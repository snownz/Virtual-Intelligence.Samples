<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ILGPU</name>
    </assembly>
    <members>
        <member name="T:ILGPU.ArrayView`2">
            <summary>
            Represents a generic view to an n-dimensional array on an accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="F:ILGPU.ArrayView`2.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView`2.#ctor(System.IntPtr,`1)">
            <summary>
            Constructs a new array view.
            </summary>
            <param name="data">The data pointer to the first element.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView`2.IsValid">
            <summary>
            Returns true iff this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.Pointer">
            <summary>
            Returns the address of the first element.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`2.Item(`1)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.LoadRef(`1)">
            <summary>
            Loads a reference to the element at the given index as ref T.
            </summary>
            <param name="index">The element index.</param>
            <returns>The loaded reference to the desired element.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.Load(`1)">
            <summary>
            Loads the element at the given index as T.
            </summary>
            <param name="index">The element index.</param>
            <returns>The loaded element.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.Store(`1,`0)">
            <summary>
            Stores the value into the element at the given index as T.
            </summary>
            <param name="index">The element index.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:ILGPU.ArrayView`2.GetVariableView(`1)">
            <summary>
            Returns a variable view that targets the element at the given index.
            </summary>
            <param name="index">The target index.</param>
            <returns>A variable view that targets the element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.GetSubView(`1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.GetSubView(`1,`1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.Cast``1">
            <summary>
            Casts the current array view into another array-view type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.Cast``2(``1)">
            <summary>
            Casts the current array view into another array-view type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <typeparam name="TOtherIndex">The target index type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.Equals(ILGPU.ArrayView{`0,`1})">
            <summary>
            Returns true iff the given view is equal to the current view.
            </summary>
            <param name="other">The other view.</param>
            <returns>True, iff the given view is equal to the current view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current view.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.GetHashCode">
            <summary>
            Returns the hash code of this view.
            </summary>
            <returns>The hash code of this view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.op_Equality(ILGPU.ArrayView{`0,`1},ILGPU.ArrayView{`0,`1})">
            <summary>
            Returns true iff the first and second views are the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second views are the same.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`2.op_Inequality(ILGPU.ArrayView{`0,`1},ILGPU.ArrayView{`0,`1})">
            <summary>
            Returns true iff the first and second view are not the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second view are not the same.</returns>
        </member>
        <member name="T:ILGPU.ArrayView`1">
            <summary>
            Represents a general view to an array on an accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.ArrayView`1.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Constructs a new 1D array view.
            </summary>
            <param name="data">The data pointer to the first element.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView`1.Item(System.Int32)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.As2DView(System.Int32)">
            <summary>
            Converts this view into a new 2D view.
            </summary>
            <param name="height">The height (number of elements in y direction).</param>
            <returns>The converted 2D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.As2DView(System.Int32,System.Int32)">
            <summary>
            Converts this view into a new 2D view.
            </summary>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <returns>The converted 2D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.As2DView(ILGPU.Index2)">
            <summary>
            Converts this view into a new 2D view.
            </summary>
            <param name="extent">The extent.</param>
            <returns>The converted 2D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.As3DView(System.Int32,System.Int32)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.As3DView(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.As3DView(ILGPU.Index3)">
            <summary>
            Converts this view into a new 3D view.
            </summary>
            <param name="extent">The extent.</param>
            <returns>The converted 3D view.</returns>
        </member>
        <member name="F:ILGPU.ArrayView`1.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView`1.#ctor(ILGPU.ArrayView{`0,ILGPU.Index})">
            <summary>
            Constructs a new 1D array view.
            </summary>
            <param name="view">The source view.</param>
        </member>
        <member name="M:ILGPU.ArrayView`1.#ctor(System.IntPtr,ILGPU.Index)">
            <summary>
            Constructs a new 1D array view.
            </summary>
            <param name="data">The data pointer to the first element.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView`1.IsValid">
            <summary>
            Returns true iff this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Pointer">
            <summary>
            Returns the in-memory address of the first element.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView`1.Item(ILGPU.Index)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.LoadRef(ILGPU.Index)">
            <summary>
            Loads a reference to the element at the given index as ref T.
            </summary>
            <param name="index">The element index.</param>
            <returns>The loaded reference to the desired element.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.Load(ILGPU.Index)">
            <summary>
            Loads the element at the given index as T.
            </summary>
            <param name="index">The element index.</param>
            <returns>The loaded element.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.Store(ILGPU.Index,`0)">
            <summary>
            Stores the value into the element at the given index as T.
            </summary>
            <param name="index">The element index.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:ILGPU.ArrayView`1.GetVariableView">
            <summary>
            Returns a variable view that targets the first element.
            </summary>
            <returns>A variable view that targets the first element.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.GetVariableView(ILGPU.Index)">
            <summary>
            Returns a variable view that targets the element at the given index.
            </summary>
            <param name="index">The target index.</param>
            <returns>A variable view that targets the element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.GetSubView(ILGPU.Index)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.GetSubView(ILGPU.Index,ILGPU.Index)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.Cast``1">
            <summary>
            Casts the current array view into another array-view type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.Equals(ILGPU.ArrayView{`0})">
            <summary>
            Returns true iff the given view is equal to the current view.
            </summary>
            <param name="other">The other view.</param>
            <returns>True, iff the given view is equal to the current view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current view.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.GetHashCode">
            <summary>
            Returns the hash code of this view.
            </summary>
            <returns>The hash code of this view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.op_Equality(ILGPU.ArrayView{`0},ILGPU.ArrayView{`0})">
            <summary>
            Returns true iff the first and second views are the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second views are the same.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.op_Inequality(ILGPU.ArrayView{`0},ILGPU.ArrayView{`0})">
            <summary>
            Returns true iff the first and second view are not the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second view are not the same.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.op_Implicit(ILGPU.ArrayView{`0})~ILGPU.ArrayView{`0,ILGPU.Index}">
            <summary>
            Converts the given specialized array view into a corresponding generic view.
            </summary>
            <returns>The corresponding generic view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView`1.op_Implicit(ILGPU.ArrayView{`0,ILGPU.Index})~ILGPU.ArrayView{`0}">
            <summary>
            Converts the given generic array view into a corresponding specialized view.
            </summary>
            <returns>The corresponding specialized view.</returns>
        </member>
        <member name="T:ILGPU.ArrayView2D`1">
            <summary>
            Represents a general view to an array on an accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.#ctor(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="data">The data pointer to the first element.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.#ctor(ILGPU.ArrayView{`0},System.Int32)">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="height">The height (number of elements in y direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.#ctor(ILGPU.ArrayView{`0},System.Int32,System.Int32)">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.#ctor(ILGPU.ArrayView{`0},ILGPU.Index2)">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="extent">The extent (width, height) (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Width">
            <summary>
            Returns the Width of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Height">
            <summary>
            Returns the height of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Rows">
            <summary>
            Returns the rows of this view that represents
            an implicitly transposed matrix.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Columns">
            <summary>
            Returns the columns of this view that represents
            an implicitly transposed matrix.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="x">The x index.</param>
            <param name="y">The y index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetVariableView(System.Int32,System.Int32)">
            <summary>
            Returns a variable view for the element at the given index.
            </summary>
            <param name="x">The x index.</param>
            <param name="y">The y index.</param>
            <returns>A variable view for the element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetRowView(System.Int32)">
            <summary>
            Returns a linear view to a single row.
            </summary>
            <param name="y">The y index of the row.</param>
            <returns>A linear view to a single row.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="F:ILGPU.ArrayView2D`1.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.#ctor(ILGPU.ArrayView{`0,ILGPU.Index2})">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="view">The source view.</param>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.#ctor(System.IntPtr,ILGPU.Index2)">
            <summary>
            Constructs a new 2D array view.
            </summary>
            <param name="data">The data pointer to the first element.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.IsValid">
            <summary>
            Returns true iff this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Pointer">
            <summary>
            Returns the in-memory address of the first element.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView2D`1.Item(ILGPU.Index2)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.LoadRef(ILGPU.Index2)">
            <summary>
            Loads a reference to the element at the given index as ref T.
            </summary>
            <param name="index">The element index.</param>
            <returns>The loaded reference to the desired element.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.Load(ILGPU.Index2)">
            <summary>
            Loads the element at the given index as T.
            </summary>
            <param name="index">The element index.</param>
            <returns>The loaded element.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.Store(ILGPU.Index2,`0)">
            <summary>
            Stores the value into the element at the given index as T.
            </summary>
            <param name="index">The element index.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetVariableView">
            <summary>
            Returns a variable view that targets the first element.
            </summary>
            <returns>A variable view that targets the first element.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetVariableView(ILGPU.Index2)">
            <summary>
            Returns a variable view that targets the element at the given index.
            </summary>
            <param name="index">The target index.</param>
            <returns>A variable view that targets the element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetSubView(ILGPU.Index2)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetSubView(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.Cast``1">
            <summary>
            Casts the current array view into another array-view type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.Equals(ILGPU.ArrayView2D{`0})">
            <summary>
            Returns true iff the given view is equal to the current view.
            </summary>
            <param name="other">The other view.</param>
            <returns>True, iff the given view is equal to the current view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current view.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.GetHashCode">
            <summary>
            Returns the hash code of this view.
            </summary>
            <returns>The hash code of this view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.op_Equality(ILGPU.ArrayView2D{`0},ILGPU.ArrayView2D{`0})">
            <summary>
            Returns true iff the first and second views are the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second views are the same.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.op_Inequality(ILGPU.ArrayView2D{`0},ILGPU.ArrayView2D{`0})">
            <summary>
            Returns true iff the first and second view are not the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second view are not the same.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.op_Implicit(ILGPU.ArrayView2D{`0})~ILGPU.ArrayView{`0,ILGPU.Index2}">
            <summary>
            Converts the given specialized array view into a corresponding generic view.
            </summary>
            <returns>The corresponding generic view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView2D`1.op_Implicit(ILGPU.ArrayView{`0,ILGPU.Index2})~ILGPU.ArrayView2D{`0}">
            <summary>
            Converts the given generic array view into a corresponding specialized view.
            </summary>
            <returns>The corresponding specialized view.</returns>
        </member>
        <member name="T:ILGPU.ArrayView3D`1">
            <summary>
            Represents a general view to an array on an accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="data">The data pointer to the first element.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0},System.Int32,System.Int32)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0},ILGPU.Index3)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="view">The linear view to the data.</param>
            <param name="extent">The extent (width, height, depth) (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Width">
            <summary>
            Returns the Width of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Height">
            <summary>
            Returns the height of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Depth">
            <summary>
            Returns the depth of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="x">The x index.</param>
            <param name="y">The y index.</param>
            <param name="z">The z index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetRowView(System.Int32,System.Int32)">
            <summary>
            Returns a linear view to a single row.
            </summary>
            <param name="y">The y index of the row.</param>
            <param name="z">The z index of the slice.</param>
            <returns>A linear view to a single row.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetSliceView(System.Int32)">
            <summary>
            Returns a 2D view to a single slice.
            </summary>
            <param name="z">The z index of the slice.</param>
            <returns>A 2D view to a single slice.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="F:ILGPU.ArrayView3D`1.ElementSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(ILGPU.ArrayView{`0,ILGPU.Index3})">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="view">The source view.</param>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.#ctor(System.IntPtr,ILGPU.Index3)">
            <summary>
            Constructs a new 3D array view.
            </summary>
            <param name="data">The data pointer to the first element.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.IsValid">
            <summary>
            Returns true iff this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Pointer">
            <summary>
            Returns the in-memory address of the first element.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Length">
            <summary>
            Returns the length of this array view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Extent">
            <summary>
            Returns the extent of this view.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.LengthInBytes">
            <summary>
            Returns the length of this array view in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.ArrayView3D`1.Item(ILGPU.Index3)">
            <summary>
            Access the element at the given index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.LoadRef(ILGPU.Index3)">
            <summary>
            Loads a reference to the element at the given index as ref T.
            </summary>
            <param name="index">The element index.</param>
            <returns>The loaded reference to the desired element.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.Load(ILGPU.Index3)">
            <summary>
            Loads the element at the given index as T.
            </summary>
            <param name="index">The element index.</param>
            <returns>The loaded element.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.Store(ILGPU.Index3,`0)">
            <summary>
            Stores the value into the element at the given index as T.
            </summary>
            <param name="index">The element index.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetVariableView">
            <summary>
            Returns a variable view that targets the first element.
            </summary>
            <returns>A variable view that targets the first element.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetVariableView(ILGPU.Index3)">
            <summary>
            Returns a variable view that targets the element at the given index.
            </summary>
            <param name="index">The target index.</param>
            <returns>A variable view that targets the element at the given index.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetSubView(ILGPU.Index3)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetSubView(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.Cast``1">
            <summary>
            Casts the current array view into another array-view type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <returns>The casted array view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.Equals(ILGPU.ArrayView3D{`0})">
            <summary>
            Returns true iff the given view is equal to the current view.
            </summary>
            <param name="other">The other view.</param>
            <returns>True, iff the given view is equal to the current view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current view.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.GetHashCode">
            <summary>
            Returns the hash code of this view.
            </summary>
            <returns>The hash code of this view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.op_Equality(ILGPU.ArrayView3D{`0},ILGPU.ArrayView3D{`0})">
            <summary>
            Returns true iff the first and second views are the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second views are the same.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.op_Inequality(ILGPU.ArrayView3D{`0},ILGPU.ArrayView3D{`0})">
            <summary>
            Returns true iff the first and second view are not the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second view are not the same.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.op_Implicit(ILGPU.ArrayView3D{`0})~ILGPU.ArrayView{`0,ILGPU.Index3}">
            <summary>
            Converts the given specialized array view into a corresponding generic view.
            </summary>
            <returns>The corresponding generic view.</returns>
        </member>
        <member name="M:ILGPU.ArrayView3D`1.op_Implicit(ILGPU.ArrayView{`0,ILGPU.Index3})~ILGPU.ArrayView3D{`0}">
            <summary>
            Converts the given generic array view into a corresponding specialized view.
            </summary>
            <returns>The corresponding specialized view.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.ICompareExchangeOperation`1">
            <summary>
            Represents the base interface for compare-exchange operations.
            </summary>
            <typeparam name="T">The type of the compare-exchange operation.</typeparam>
        </member>
        <member name="M:ILGPU.AtomicOperations.ICompareExchangeOperation`1.CompareExchange(ILGPU.VariableView{`0},`0,`0)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.IAtomicOperation`1">
            <summary>
            Represents the base interface for atomic binary operations.
            </summary>
            <typeparam name="T">The parameter type of the atomic operation.</typeparam>
        </member>
        <member name="M:ILGPU.AtomicOperations.IAtomicOperation`1.Operation(`0,`0)">
            <summary>
            Performs the actual atomic binary operation.
            </summary>
            <param name="current">The current value at the target memory location.</param>
            <param name="value">The involved external value.</param>
            <returns>The result of the binary operation.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeInt32">
            <summary>
            Represents an atomic compare-exchange operation of type int.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeInt32.CompareExchange(ILGPU.VariableView{System.Int32},System.Int32,System.Int32)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeInt64">
            <summary>
            Represents an atomic compare-exchange operation of type long.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeInt64.CompareExchange(ILGPU.VariableView{System.Int64},System.Int64,System.Int64)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeUInt32">
            <summary>
            Represents an atomic compare-exchange operation of type uint.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeUInt32.CompareExchange(ILGPU.VariableView{System.UInt32},System.UInt32,System.UInt32)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeUInt64">
            <summary>
            Represents an atomic compare-exchange operation of type ulong.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeUInt64.CompareExchange(ILGPU.VariableView{System.UInt64},System.UInt64,System.UInt64)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeFloat">
            <summary>
            Represents an atomic compare-exchange operation of type float.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeFloat.CompareExchange(ILGPU.VariableView{System.Single},System.Single,System.Single)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.AtomicOperations.CompareExchangeDouble">
            <summary>
            Represents an atomic compare-exchange operation of type double.
            </summary>
        </member>
        <member name="M:ILGPU.AtomicOperations.CompareExchangeDouble.CompareExchange(ILGPU.VariableView{System.Double},System.Double,System.Double)">
            <summary>
            Realizes an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.Atomic">
            <summary>
            Contains atomic functions that are supported on devices.
            </summary>
        </member>
        <member name="M:ILGPU.Atomic.Add(ILGPU.VariableView{System.Single},System.Single)">
            <summary>
            Atommically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">the target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(ILGPU.VariableView{System.Double},System.Double)">
            <summary>
            Atommically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(ILGPU.VariableView{ILGPU.Index},ILGPU.Index)">
            <summary>
            Atommically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">the target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Sub(ILGPU.VariableView{ILGPU.Index},ILGPU.Index)">
            <summary>
            Atommically subtracts the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to subtract.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Increment(ILGPU.VariableView{System.UInt32},System.UInt32)">
            <summary>
            Atomically increments the target location by 1 and computes ((old >= value) ? 0 : (old+1)).
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The maximum value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Decrement(ILGPU.VariableView{System.UInt32},System.UInt32)">
            <summary>
            Atomically decrements the target location by 1 and computes ((old == 0) | (old > val)) ? val : (old-1).
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The maximum value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(ILGPU.VariableView{System.UInt32},System.UInt32)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(ILGPU.VariableView{System.UInt64},System.UInt64)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(ILGPU.VariableView{System.IntPtr},System.IntPtr)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(ILGPU.VariableView{System.Single},System.Single)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(ILGPU.VariableView{System.Double},System.Double)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(ILGPU.VariableView{ILGPU.Index},ILGPU.Index)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">the target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(ILGPU.VariableView{System.UInt32},System.UInt32,System.UInt32)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(ILGPU.VariableView{System.UInt64},System.UInt64,System.UInt64)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(ILGPU.VariableView{System.IntPtr},System.IntPtr,System.IntPtr)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(ILGPU.VariableView{System.Single},System.Single,System.Single)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(ILGPU.VariableView{System.Double},System.Double,System.Double)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(ILGPU.VariableView{ILGPU.Index},ILGPU.Index,ILGPU.Index)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">the target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The value to add.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.MakeAtomic``3(ILGPU.VariableView{``0},``0,``1,``2)">
            <summary>
            Implements a generic pattern to build custom atomic operations.
            </summary>
            <typeparam name="T">The parameter type of the atomic operation.</typeparam>
            <typeparam name="TOperation">The type of the custom atomic operation.</typeparam>
            <typeparam name="TCompareExchangeOperation">The type of the custom compare-exchange-operation logic.</typeparam>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <param name="operation">The custom atomic operation.</param>
            <param name="compareExchangeOperation">The custom compare-exchange-operation logic.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(ILGPU.VariableView{System.Int32},System.Int32)">
            <summary>
            Atommically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(ILGPU.VariableView{System.Int64},System.Int64)">
            <summary>
            Atommically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(ILGPU.VariableView{System.UInt32},System.UInt32)">
            <summary>
            Atommically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Add(ILGPU.VariableView{System.UInt64},System.UInt64)">
            <summary>
            Atommically adds the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to add.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Sub(ILGPU.VariableView{System.Int32},System.Int32)">
            <summary>
            Atommically subtracts the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to subtract.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Sub(ILGPU.VariableView{System.Int64},System.Int64)">
            <summary>
            Atommically subtracts the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to subtract.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Sub(ILGPU.VariableView{System.Single},System.Single)">
            <summary>
            Atommically subtracts the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to subtract.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Sub(ILGPU.VariableView{System.Double},System.Double)">
            <summary>
            Atommically subtracts the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to subtract.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Sub(ILGPU.VariableView{System.UInt32},System.UInt32)">
            <summary>
            Atommically subtracts the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to subtract.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Sub(ILGPU.VariableView{System.UInt64},System.UInt64)">
            <summary>
            Atommically subtracts the given value and the value at the target location
            and returns the old value.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The value to subtract.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(ILGPU.VariableView{System.Int32},System.Int32)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(ILGPU.VariableView{System.Int64},System.Int64)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(ILGPU.VariableView{System.UInt32},System.UInt32)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(ILGPU.VariableView{System.UInt64},System.UInt64)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(ILGPU.VariableView{System.Single},System.Single)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Max(ILGPU.VariableView{System.Double},System.Double)">
            <summary>
            Atomically computes the maximum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(ILGPU.VariableView{System.Int32},System.Int32)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(ILGPU.VariableView{System.Int64},System.Int64)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(ILGPU.VariableView{System.UInt32},System.UInt32)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(ILGPU.VariableView{System.UInt64},System.UInt64)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(ILGPU.VariableView{System.Single},System.Single)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Min(ILGPU.VariableView{System.Double},System.Double)">
            <summary>
            Atomically computes the minimum at the target location with the given value
            and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(ILGPU.VariableView{System.Int32},System.Int32)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(ILGPU.VariableView{System.Int64},System.Int64)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(ILGPU.VariableView{System.UInt32},System.UInt32)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.And(ILGPU.VariableView{System.UInt64},System.UInt64)">
            <summary>
            Atomically computes the logical and of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(ILGPU.VariableView{System.Int32},System.Int32)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(ILGPU.VariableView{System.Int64},System.Int64)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(ILGPU.VariableView{System.UInt32},System.UInt32)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Or(ILGPU.VariableView{System.UInt64},System.UInt64)">
            <summary>
            Atomically computes the logical or of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(ILGPU.VariableView{System.Int32},System.Int32)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(ILGPU.VariableView{System.Int64},System.Int64)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(ILGPU.VariableView{System.UInt32},System.UInt32)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Xor(ILGPU.VariableView{System.UInt64},System.UInt64)">
            <summary>
            Atomically computes the logical xor of the value at the target location with
            the given value and returns the old value that was stored at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The comparison value.</param>
            <returns>The old value that was stored at the target location.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(ILGPU.VariableView{System.Int32},System.Int32)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.Exchange(ILGPU.VariableView{System.Int64},System.Int64)">
            <summary>
            Represents an atomic exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(ILGPU.VariableView{System.Int32},System.Int32,System.Int32)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="M:ILGPU.Atomic.CompareExchange(ILGPU.VariableView{System.Int64},System.Int64,System.Int64)">
            <summary>
            Represents an atomic compare-exchange operation.
            </summary>
            <param name="target">The target location.</param>
            <param name="compare">The expected comparison value.</param>
            <param name="value">The target value.</param>
            <returns>The old value.</returns>
        </member>
        <member name="T:ILGPU.Backends.ABI.ABISpecification">
            <summary>
            Represents an ABI specification.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.ABI.ABISpecification.ManagedAlignments">
            <summary>
            Contains default .Net alignment information about built-in blittable types.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.ABI.ABISpecification.NonBlittableTypes">
            <summary>
            Contains default non-blittable .Net types that can be handled by ILGPU.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.ABI.ABISpecification.#ctor(ILGPU.CompileUnit)">
            <summary>
            Constructs a new ABI specification.
            </summary>
            <param name="unit">The compile unit used for ABI generation.</param>
        </member>
        <member name="M:ILGPU.Backends.ABI.ABISpecification.AddNonBlittableTypes">
            <summary>
            Registers default non-blittable types.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.ABI.ABISpecification.AddPtrAlignment(System.Int32)">
            <summary>
            Registers platform-dependent pointer types.
            </summary>
            <param name="alignment">The alignment of pointers.</param>
        </member>
        <member name="P:ILGPU.Backends.ABI.ABISpecification.LLVMContext">
            <summary>
            Returns the native LLVM context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.ABI.ABISpecification.CompileUnit">
            <summary>
            Returns the assocated compile unit.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.ABI.ABISpecification.GetSizeOf(System.Type)">
            <summary>
            Computes the actual ABI size of the given type in bytes.
            </summary>
            <param name="type">The input type.</param>
            <returns>The ABI size of the given type.</returns>
        </member>
        <member name="M:ILGPU.Backends.ABI.ABISpecification.GetAlignmentOf(System.Type)">
            <summary>
            Computes the actual ABI alignment of the given type in bytes.
            </summary>
            <param name="type">The input type.</param>
            <returns>The ABI alignment of the given type.</returns>
        </member>
        <member name="P:ILGPU.Backends.ABI.ABISpecification.Item(System.Type)">
            <summary>
            Returns the required alignment of the given type in bytes.
            </summary>
            <param name="type">The input type.</param>
            <returns>The required alignment of the given type in bytes.</returns>
        </member>
        <member name="M:ILGPU.Backends.ABI.ABISpecification.AlignField(System.Reflection.FieldInfo[],System.Int32,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef})">
            <summary>
            Aligns the given field according to the current ABI.
            </summary>
            <param name="fields">The fields of the current type.</param>
            <param name="fieldIndex">The index of the current field.</param>
            <param name="structElements">The target LLVM-structure elements.</param>
        </member>
        <member name="M:ILGPU.Backends.ABI.ABISpecification.AlignType(System.Type,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef})">
            <summary>
            Adds or manipulates added structure elements to achieve a certain alignment.
            </summary>
            <param name="type"></param>
            <param name="structElements">The target LLVM-structure elements.</param>
        </member>
        <member name="T:ILGPU.Backends.ABI.DefaultLLVMABI">
            <summary>
            Represents a default LLVM-based ABI specification.
            It uses LLVM data-layout information to resolve alignment
            and size information of types.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.ABI.DefaultLLVMABI.#ctor(ILGPU.CompileUnit)">
            <summary>
            Constructs a default LLVM-based ABI specification.
            </summary>
            <param name="unit">The compile unit used for ABI generation.</param>
        </member>
        <member name="P:ILGPU.Backends.ABI.DefaultLLVMABI.LLVMTargetData">
            <summary>
            Returns the LLVM target data for this ABI specification.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.ABI.DefaultLLVMABI.GetSizeOf(System.Type)">
            <summary cref="M:ILGPU.Backends.ABI.ABISpecification.GetSizeOf(System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.ABI.DefaultLLVMABI.GetSizeOf(ILGPU.LLVM.LLVMTypeRef)">
            <summary>
            Computes the actual ABI size of the given type in bytes.
            </summary>
            <param name="type">The input type.</param>
            <returns>The ABI size of the given type.</returns>
        </member>
        <member name="M:ILGPU.Backends.ABI.DefaultLLVMABI.GetAlignmentOf(System.Type)">
            <summary cref="M:ILGPU.Backends.ABI.ABISpecification.GetAlignmentOf(System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.ABI.DefaultLLVMABI.AlignField(System.Reflection.FieldInfo[],System.Int32,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef})">
            <summary cref="M:ILGPU.Backends.ABI.ABISpecification.AlignField(System.Reflection.FieldInfo[],System.Int32,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef})"/>
        </member>
        <member name="M:ILGPU.Backends.ABI.DefaultLLVMABI.AlignType(System.Type,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef})">
            <summary cref="M:ILGPU.Backends.ABI.ABISpecification.AlignType(System.Type,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef})"/>
        </member>
        <member name="M:ILGPU.Backends.ABI.DefaultLLVMABI.AlignSmallType(System.Type,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef},System.Int32,System.Int32)">
            <summary>
            Aligns a type with a size that is less than the required .Net size.
            </summary>
            <param name="type">The type to align.</param>
            <param name="structElements">The LLVM struct elements for adjustment.</param>
            <param name="managedSize">The .Net size of the given type in bytes.</param>
            <param name="abiSize">The current ABI size of the given type in bytes.</param>
        </member>
        <member name="M:ILGPU.Backends.ABI.DefaultLLVMABI.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Backends.ABI.MSILABI">
            <summary>
            Represents a MSIL-internal ABI speficiation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.ABI.MSILABI.#ctor(ILGPU.CompileUnit)">
            <summary>
            Constructs a new MSIL ABI Specification.
            </summary>
            <param name="unit">The compile unit used for ABI generation.</param>
        </member>
        <member name="M:ILGPU.Backends.ABI.MSILABI.GetSizeOf(System.Type)">
            <summary cref="M:ILGPU.Backends.ABI.ABISpecification.GetSizeOf(System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.ABI.MSILABI.GetAlignmentOf(System.Type)">
            <summary cref="M:ILGPU.Backends.ABI.ABISpecification.GetAlignmentOf(System.Type)"/>
        </member>
        <member name="M:ILGPU.Backends.ABI.MSILABI.AlignField(System.Reflection.FieldInfo[],System.Int32,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef})">
            <summary cref="M:ILGPU.Backends.ABI.ABISpecification.AlignField(System.Reflection.FieldInfo[],System.Int32,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef})"/>
        </member>
        <member name="M:ILGPU.Backends.ABI.MSILABI.AlignType(System.Type,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef})">
            <summary cref="M:ILGPU.Backends.ABI.ABISpecification.AlignType(System.Type,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef})"/>
        </member>
        <member name="M:ILGPU.Backends.ABI.MSILABI.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Backends.ABI.PTXABI">
            <summary>
            Represents a PTX ABI specification.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.ABI.PTXABI.#ctor(ILGPU.CompileUnit)">
            <summary>
            Constructs a new PTX ABI specification.
            </summary>
            <param name="unit">The compile unit used for ABI generation.</param>
        </member>
        <member name="M:ILGPU.Backends.ABI.PTXABI.AlignField(System.Reflection.FieldInfo[],System.Int32,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef})">
            <summary cref="M:ILGPU.Backends.ABI.ABISpecification.AlignField(System.Reflection.FieldInfo[],System.Int32,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef})"/>
        </member>
        <member name="M:ILGPU.Backends.ABI.PTXABI.AlignSmallType(System.Type,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef},System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Backends.ABI.DefaultLLVMABI.AlignSmallType(System.Type,System.Collections.Generic.List{ILGPU.LLVM.LLVMTypeRef},System.Int32,System.Int32)"/>
        </member>
        <member name="T:ILGPU.Backends.TargetPlatform">
            <summary>
            Represents a target platform.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.TargetPlatform.X86">
            <summary>
            The X86 target platform.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.TargetPlatform.X64">
            <summary>
            The X64 target platform.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.Backend">
            <summary>
            Represents a general ILGPU backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.RuntimePlatform">
            <summary>
            Returns the current execution platform.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.OSPlatform">
            <summary>
            Returns the native OS platform.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.RunningOnNativePlatform">
            <summary>
            Returns true iff the current runtime platform is equal to the OS platform.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.EnsureRunningOnNativePlatform">
            <summary>
            Ensures that the current runtime platform is equal to the OS platform.
            If not, this method will throw a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.EnsureRunningOnPlatform(ILGPU.Backends.TargetPlatform)">
            <summary>
            Ensures that the current runtime platform is equal to the given platform.
            If not, this method will throw a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="platform">The desired target platform.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend.GetPlatform(System.Nullable{ILGPU.Backends.TargetPlatform})">
            <summary>
            Returns either the given target platform or the current one.
            </summary>
            <param name="platform">The nullable target platform.</param>
            <returns>The computed target platform.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.#ctor(ILGPU.Context,ILGPU.Backends.TargetPlatform)">
            <summary>
            Constructs a new generic backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="platform">The target platform.</param>
        </member>
        <member name="P:ILGPU.Backends.Backend.Context">
            <summary>
            Returns the assigned context.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.Platform">
            <summary>
            Returns the target platform.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.Backend.IntPtrType">
            <summary>
            Returns the int-pointer type for this backend.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.Backend.TargetUnit(ILGPU.CompileUnit)">
            <summary>
            Specifies the target backend for the given compile unit.
            </summary>
            <param name="unit">The target unit.</param>
        </member>
        <member name="M:ILGPU.Backends.Backend.CreateABISpecification(ILGPU.CompileUnit)">
            <summary>
            Creates a compatbile ABI specification for the given compile unit.
            </summary>
            <param name="unit">The target unit.</param>
            <returns>The created ABI specification.</returns>
        </member>
        <member name="M:ILGPU.Backends.Backend.Compile(ILGPU.CompileUnit,System.Reflection.MethodInfo)">
            <summary>
            Compiles a given compile unit with the specified entry point.
            </summary>
            <param name="unit">The compile unit to compile.</param>
            <param name="entry">The desired entry point.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoint">
            <summary>
            Represents a kernel entry point.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoint.GetSharedVariableElementType(System.Type,System.Boolean@)">
            <summary>
            Resolves the element-type of a shared-memoery variable.
            </summary>
            <param name="parameterType">The given parameter type.</param>
            <param name="isArray">True, iff the parameter type specifies an array view.</param>
            <returns>The resolved element type.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoint.SharedMemoryVariable">
            <summary>
            Represents a single variable that is allocated
            in shared memory. This can be a single elementatry variable
            or an array of elements.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.SharedMemoryVariable.Index">
            <summary>
            The parameter index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.SharedMemoryVariable.SharedMemoryIndex">
            <summary>
            The shared-memory index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.SharedMemoryVariable.Type">
            <summary>
            Returns the type of the variable.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.SharedMemoryVariable.ElementType">
            <summary>
            Returns the element type of the variable.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.SharedMemoryVariable.IsArray">
            <summary>
            Returns true iff this shared variable represents an array.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.SharedMemoryVariable.Count">
            <summary>
            Returns null, if the number of elements is unbounded (dynamically
            sized in case of an array, or simply constant in case of a variable)
            or the actual number of requested elements.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.SharedMemoryVariable.IsDynamicallySizedArray">
            <summary>
            Returns true iff this shared variable represents a dynamically-sized array.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.SharedMemoryVariable.ElementSize">
            <summary>
            Returns the size of the element type in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.SharedMemoryVariable.Size">
            <summary>
            Returns the size in bytes of this shared-memory variable.
            Note that an <see cref="T:System.InvalidOperationException"/> will be thrown, iff
            this variable is a dynamically-sized array.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoint.SharedMemoryVariable.ToString">
            <summary>
            Returns the string representation of this variable.
            </summary>
            <returns>The string representation of this variable.</returns>
        </member>
        <member name="T:ILGPU.Backends.EntryPoint.UniformVariable">
            <summary>
            Represents a uniform variable.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.UniformVariable.Index">
            <summary>
            The parameter index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.UniformVariable.VariableType">
            <summary>
            Returns the type of the variable.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.UniformVariable.Size">
            <summary>
            Returns the size in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoint.UniformVariable.ToString">
            <summary>
            Returns the string representation of this variable.
            </summary>
            <returns>The string representation of this variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.EntryPoint.#ctor(System.Reflection.MethodInfo,ILGPU.CompileUnit)">
            <summary>
            Constructs a new entry point targeting the given method.
            </summary>
            <param name="methodInfo">The targeted method.</param>
            <param name="unit">The unit in the current context.</param>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.MethodInfo">
            <summary>
            Returns the associated method info.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.Type">
            <summary>
            Returns the index type of the index parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.IsGroupedIndexEntry">
            <summary>
            Returns true iff the entry-point type = grouped index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.UngroupedIndexType">
            <summary>
            Returns the ungrouped index type of the index parameter.
            This can be <see cref="T:ILGPU.Index"/>, <see cref="T:ILGPU.Index2"/> or <see cref="T:ILGPU.Index3"/>.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.KernelIndexType">
            <summary>
            Returns the index type of the index parameter.
            This can also return a grouped index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.UniformVariables">
            <summary>
            Returns the uniform variables that are passed to the kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.NumUniformVariables">
            <summary>
            Returns the number of uniform parameters that have to be passed
            to the virtual entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.SharedMemoryVariables">
            <summary>
            Returns the shared-memory variables that are requested by the kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.NumDynamicallySizedSharedMemoryVariables">
            <summary>
            Returns the number of dynamically sized shared-memory variables.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.EntryPoint.NumCustomParameters">
            <summary>
            Returns the number of custom parameters that have to be passed
            to the virtual entry point.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.EntryPoint.CreateCustomParameterTypes">
            <summary>
            Creates a signature for the actual kernel entry point.
            </summary>
            <returns>A signature for the actual kernel entry point.</returns>
        </member>
        <member name="T:ILGPU.Backends.LLVMBackendEventArgs">
            <summary>
            Represents event args of a LLVM ILGPU backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.LLVMBackendEventArgs.CompileUnit">
            <summary>
            Returns the used compile unit.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.LLVMBackendEventArgs.ModuleRef">
            <summary>
            Returns the current LLVM module.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.LLVMBackend">
            <summary>
            Represents a LLVM ILGPU backend.
            </summary>
        </member>
        <member name="E:ILGPU.Backends.LLVMBackend.PrepareModuleLowering">
            <summary>
            Will be invoked when the target-specific backend has generated
            a supported entry point. The event argument will represent the
            module of the compile unit before any further transformation.
            </summary>
        </member>
        <member name="E:ILGPU.Backends.LLVMBackend.KernelModuleLowered">
            <summary>
            Will be invoked when the actual kernel code has been generated.
            The event argument will point to the kernel-specific module
            after all required transformations.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.LLVMBackend.#ctor(ILGPU.Context,ILGPU.Backends.TargetPlatform,System.String,System.String)">
            <summary>
            Constructs a new LLVM backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="platform">The target platform.</param>
            <param name="triple">The platform triple.</param>
            <param name="arch">The target architecture.</param>
        </member>
        <member name="P:ILGPU.Backends.LLVMBackend.LLVMTarget">
            <summary>
            Returns the LLVM target of this backend.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.LLVMBackend.LLVMTargetMachine">
            <summary>
            Returns the LLVM target machine of this backend.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.LLVMBackend.CreateEntry(ILGPU.CompileUnit,ILGPU.Backends.EntryPoint,System.String@)">
            <summary>
            Creates a compatible entry point for this backend.
            </summary>
            <param name="unit">The target unit.</param>
            <param name="entryPoint">The desired entry point.</param>
            <param name="entryPointName">The name of the entry point.</param>
            <returns>The created entry point.</returns>
        </member>
        <member name="M:ILGPU.Backends.LLVMBackend.PrepareModule(ILGPU.CompileUnit,ILGPU.LLVM.LLVMModuleRef,ILGPU.Backends.EntryPoint,ILGPU.LLVM.LLVMValueRef)">
            <summary>
            Prepares the given native module for code generation.
            This step can generate required meta information or attributes, for instance.
            </summary>
            <param name="unit">The target unit.</param>
            <param name="module">The final module for code generation.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="generatedEntryPoint">The generated entry point.</param>
        </member>
        <member name="M:ILGPU.Backends.LLVMBackend.Link(ILGPU.LLVM.LLVMModuleRef,ILGPU.LLVM.LLVMValueRef)">
            <summary>
            Performs the actual linking and code-generation operation.
            </summary>
            <param name="module">The prepared module for code generation.</param>
            <param name="generatedEntryPoint">The entry point.</param>
            <returns>The compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.LLVMBackend.Compile(ILGPU.CompileUnit,System.Reflection.MethodInfo)">
            <summary cref="M:ILGPU.Backends.Backend.Compile(ILGPU.CompileUnit,System.Reflection.MethodInfo)"/>
        </member>
        <member name="M:ILGPU.Backends.LLVMBackend.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Backends.MSILBackend">
            <summary>
            Represents a MSIL backend that is used by the CPU runtime.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.MSILBackend.IntrinsicTypes">
            <summary>
            Contains intrinsic types.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.MSILBackend.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new MSIL backend.
            </summary>
            <param name="context">The used context.</param>
        </member>
        <member name="M:ILGPU.Backends.MSILBackend.TargetUnit(ILGPU.CompileUnit)">
            <summary cref="M:ILGPU.Backends.Backend.TargetUnit(ILGPU.CompileUnit)"/>
        </member>
        <member name="M:ILGPU.Backends.MSILBackend.CreateABISpecification(ILGPU.CompileUnit)">
            <summary cref="M:ILGPU.Backends.Backend.CreateABISpecification(ILGPU.CompileUnit)"/>
        </member>
        <member name="M:ILGPU.Backends.MSILBackend.Compile(ILGPU.CompileUnit,System.Reflection.MethodInfo)">
            <summary>
            Compiles a given compile unit with the specified entry point.
            </summary>
            <param name="unit">The compile unit to compile.</param>
            <param name="entry">The desired entry point.</param>
            <returns>The compiled kernel that represents the compilation result.</returns>
        </member>
        <member name="M:ILGPU.Backends.MSILBackend.CheckMethod(ILGPU.CompileUnit,System.Reflection.MethodBase,ILGPU.Backends.EntryPoint)">
            <summary>
            Checks the given method for compatibility.
            </summary>
            <param name="unit">The current compilation unit.</param>
            <param name="method">The method to test for compatiblity.</param>
            <param name="entryPoint">The entry point.</param>
        </member>
        <member name="M:ILGPU.Backends.MSILBackend.VerifyActivatorCall(ILGPU.CompileUnit,System.Reflection.MethodBase)">
            <summary>
            Checks the given target method for a compatible activator call.
            </summary>
            <param name="unit">The current compilation unit.</param>
            <param name="target">The call target to test for compatiblity.</param>
            <returns>True, iff the given method is a valid activator call.</returns>
        </member>
        <member name="M:ILGPU.Backends.MSILBackend.CheckCall(ILGPU.CompileUnit,System.Reflection.MethodBase,ILGPU.Backends.EntryPoint)">
            <summary>
            Checks the given call target for compatibility.
            </summary>
            <param name="unit">The current compilation unit.</param>
            <param name="target">The call target to test for compatiblity.</param>
            <param name="entryPoint">The entry point.</param>
        </member>
        <member name="M:ILGPU.Backends.MSILBackend.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Backends.PTXArchitecture">
            <summary>
            Represents a PTX architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_20">
            <summary>
            The 2.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_21">
            <summary>
            The 2.1 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_30">
            <summary>
            The 3.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_35">
            <summary>
            The 3.5 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_37">
            <summary>
            The 3.7 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_50">
            <summary>
            The 5.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_52">
            <summary>
            The 5.2 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_60">
            <summary>
            The 6.0 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_61">
            <summary>
            The 6.1 architecture.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXArchitecture.SM_62">
            <summary>
            The 6.2 architecture.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTXBackend">
            <summary>
            Represents a PTX (Cuda) backend.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXBackend.ArchitectureLookup">
            <summary>
            Maps major and minor versions of Cuda devices to their corresponding PTX architecture.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.GetArchitecture(System.Int32,System.Int32)">
            <summary>
            Resolves the PTX architecture for the given major and minor versions.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <returns>The resolved PTX version.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.GetLLVMTriple(ILGPU.Backends.TargetPlatform)">
            <summary>
            Returns the appropriate triple for the nvptx backend.
            </summary>
            <param name="platform">The target platform.</param>
            <returns>The appropriate triple for the nvptx backend.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.GetLLVMLayout(ILGPU.Backends.TargetPlatform)">
            <summary>
            Returns the appropriate layout for the nvptx backend.
            </summary>
            <param name="platform">The target platform.</param>
            <returns>The appropriate triple for the nvptx backend.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.ResolveLibDeviceDir">
            <summary>
            Determines the current lib-device directory.
            </summary>
            <returns>The current lib-device directory.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.ResolveLibDevicePattern(ILGPU.Backends.PTXArchitecture,System.Int32)">
            <summary>
            Resolves a lib-device-filename pattern for the given gpu architecture.
            </summary>
            <param name="gpuArch">The desired GPU architecture.</param>
            <param name="driverVersion">The current driver version.</param>
            <returns>The resolved lib-device pattern.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.#cctor">
            <summary>
            Initializes the PTX backend.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.#ctor(ILGPU.Context,ILGPU.Backends.PTXArchitecture,ILGPU.Backends.TargetPlatform,System.String)">
            <summary>
            Constructs a new Cuda backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="gpuArch">The target gpu architecture.</param>
            <param name="platform">The target platform.</param>
            <param name="libDeviceDir">The directory that contains the different libdevice libraries.</param>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.#ctor(ILGPU.Context,ILGPU.Backends.PTXArchitecture,System.String)">
            <summary>
            Constructs a new Cuda backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="gpuArch">The target gpu architecture.</param>
            <param name="libDeviceDir">The directory that contains the different libdevice libraries.</param>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.#ctor(ILGPU.Context,ILGPU.Backends.PTXArchitecture)">
            <summary>
            Constructs a new Cuda backend.
            </summary>
            <param name="context">The context to use.</param>
            <param name="gpuArch">The target gpu architecture.</param>
        </member>
        <member name="P:ILGPU.Backends.PTXBackend.LibDevicePath">
            <summary>
            Returns the path to the used lib-device library.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.TargetUnit(ILGPU.CompileUnit)">
            <summary cref="M:ILGPU.Backends.Backend.TargetUnit(ILGPU.CompileUnit)"/>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.CreateABISpecification(ILGPU.CompileUnit)">
            <summary cref="M:ILGPU.Backends.Backend.CreateABISpecification(ILGPU.CompileUnit)"/>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.CreatePTXKernelFunctionType(ILGPU.CompileUnit,ILGPU.Backends.EntryPoint,System.Int32@)">
            <summary>
            Creates a signature for the actual kernel entry point.
            </summary>
            <param name="unit">The target unit.</param>
            <param name="entryPoint">The target entry point.</param>
            <param name="parameterOffset">The parameter offset for the actual kernel parameters.</param>
            <returns>A signature for the actual kernel entry point.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.CreateIndexValue(ILGPU.CompileUnit,ILGPU.Backends.EntryPoint,ILGPU.LLVM.LLVMBuilderRef,ILGPU.Backends.PTXDeviceFunctions)">
            <summary>
            Creates an <see cref="T:ILGPU.Index3"/> in the LLVM world containing the current grid indices.
            </summary>
            <param name="unit">The target unit.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="builder">The LLVM builder.</param>
            <param name="cudaDeviceFunctions">A reference to the cuda device functions.</param>
            <returns>An <see cref="T:ILGPU.Index3"/> in the LLVM world containg the current grid indices.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.CreateGroupIndexValue(ILGPU.CompileUnit,ILGPU.Backends.EntryPoint,ILGPU.LLVM.LLVMBuilderRef,ILGPU.Backends.PTXDeviceFunctions)">
            <summary>
            Creates an <see cref="T:ILGPU.Index3"/> in the LLVM world containing the current group-thread indices.
            </summary>
            <param name="unit">The target unit.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="builder">The LLVM builder.</param>
            <param name="cudaDeviceFunctions">A reference to the cuda device functions.</param>
            <returns>An <see cref="T:ILGPU.Index3"/> in the LLVM world containg the current group-thread indices.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.CreateGlobalIndexValue(ILGPU.CompileUnit,ILGPU.Backends.EntryPoint,ILGPU.LLVM.LLVMBuilderRef,ILGPU.Backends.PTXDeviceFunctions,ILGPU.LLVM.LLVMValueRef,ILGPU.LLVM.LLVMValueRef)">
            <summary>
            Creates an <see cref="T:ILGPU.Index3"/> in the LLVM world containing the current global indices
            (gridIdx * blockDim + blockIdx).
            </summary>
            <param name="unit">The target unit.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="builder">The LLVM builder.</param>
            <param name="cudaDeviceFunctions">A reference to the cuda device functions.</param>
            <param name="indexValue">The current grid-index value (gridIdx).</param>
            <param name="groupIndexValue">The current group-thread-index value (blockIdx).</param>
            <returns>An <see cref="T:ILGPU.Index3"/> in the LLVM world containg the current global indices.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.CreateGlobalIndexRangeComparison(ILGPU.CompileUnit,ILGPU.Backends.EntryPoint,ILGPU.LLVM.LLVMBuilderRef,ILGPU.Backends.PTXDeviceFunctions,ILGPU.LLVM.LLVMValueRef,ILGPU.LLVM.LLVMValueRef)">
            <summary>
            Creates a comparison of the current global index to the custom desired number of user threads.
            </summary>
            <param name="unit">The target unit.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="builder">The LLVM builder.</param>
            <param name="cudaDeviceFunctions">A reference to the cuda device functions.</param>
            <param name="globalIndexValue">The current global index values.</param>
            <param name="userIndexRange">The user given custom launcher range.</param>
            <returns>An instance of an <see cref="T:ILGPU.IGroupedIndex`1"/> in the LLVM world.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.CreateGroupedIndex(ILGPU.CompileUnit,ILGPU.Backends.EntryPoint,ILGPU.LLVM.LLVMBuilderRef,ILGPU.Backends.PTXDeviceFunctions,ILGPU.LLVM.LLVMValueRef,ILGPU.LLVM.LLVMValueRef)">
            <summary>
            Creates an instance of an <see cref="T:ILGPU.IGroupedIndex`1"/> in the LLVM world.
            </summary>
            <param name="unit">The target unit.</param>
            <param name="entryPoint">The entry point.</param>
            <param name="builder">The LLVM builder.</param>
            <param name="cudaDeviceFunctions">A reference to the cuda device functions.</param>
            <param name="indexValue">The current index values (first part of a grouped index).</param>
            <param name="groupIndexValue">The current group-index values (second part of a grouped index).</param>
            <returns>An instance of an <see cref="T:ILGPU.IGroupedIndex`1"/> in the LLVM world.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.DeclareSharedMemoryVariable(ILGPU.CompileUnit,ILGPU.LLVM.LLVMBuilderRef,ILGPU.LLVM.LLVMTypeRef)">
            <summary>
            Declares a new shared-memory variable.
            </summary>
            <param name="unit">The target compile unit.</param>
            <param name="builder">The current IR builder.</param>
            <param name="type">The type of the variable to declare.</param>
            <returns>A GEP value that points to the base address of the shared-memory variable.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.CreateEntry(ILGPU.CompileUnit,ILGPU.Backends.EntryPoint,System.String@)">
            <summary cref="M:ILGPU.Backends.LLVMBackend.CreateEntry(ILGPU.CompileUnit,ILGPU.Backends.EntryPoint,System.String@)"/>
        </member>
        <member name="M:ILGPU.Backends.PTXBackend.PrepareModule(ILGPU.CompileUnit,ILGPU.LLVM.LLVMModuleRef,ILGPU.Backends.EntryPoint,ILGPU.LLVM.LLVMValueRef)">
            <summary cref="M:ILGPU.Backends.LLVMBackend.PrepareModule(ILGPU.CompileUnit,ILGPU.LLVM.LLVMModuleRef,ILGPU.Backends.EntryPoint,ILGPU.LLVM.LLVMValueRef)"/>
        </member>
        <member name="T:ILGPU.Backends.PTXDeviceFunctions">
            <summary>
            The implementation of PTX-specific device functions.
            </summary>
        </member>
        <member name="F:ILGPU.Backends.PTXDeviceFunctions.DebugAssertWrapper">
            <summary>
            Represents the Debug.Assert wrapper to realize debug assertion.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.#ctor(ILGPU.CompileUnit)">
            <summary>
            Constructs a new PTX-device-functions instance.
            </summary>
            <param name="unit">The targeted compile unit.</param>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.AssertFailedMethod">
            <summary>
            Represents a failed assertion method inside a Cuda kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.AtomicAddF32">
            <summary>
            Represents an atomic add for f32.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.AtomicIncU32">
            <summary>
            Represents an atomic inc for u32.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.AtomicDecU32">
            <summary>
            Represents an atomic dec for u32.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GroupBarrier">
            <summary>
            Represents a simple group barrier (syncthreads).
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GroupBarrierAnd">
            <summary>
            Represents a simple and group barrier.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GroupBarrierOr">
            <summary>
            Represents a simple or group barrier.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GroupBarrierPopCount">
            <summary>
            Represents a simple popcount group barrier.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.BlockLevelFence">
            <summary>
            Represents a block-level memory fence.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.DeviceLevelFence">
            <summary>
            Represents a device-level memory fence.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.SystemLevelFence">
            <summary>
            Represents a system-level memory fence.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetBlockIdxX">
            <summary>
            Returns an operation to resolve the x dimension of the
            current block index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetBlockIdxY">
            <summary>
            Returns an operation to resolve the y dimension of the
            current block index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetBlockIdxZ">
            <summary>
            Returns an operation to resolve the z dimension of the
            current block index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetGridDimX">
            <summary>
            Returns an operation to resolve the x dimension of
            the current grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetGridDimY">
            <summary>
            Returns an operation to resolve the y dimension of
            the current grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetGridDimZ">
            <summary>
            Returns an operation to resolve the z dimension of
            the current grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetThreadIdxX">
            <summary>
            Returns an operation to resolve the x dimension of the
            current thread index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetThreadIdxY">
            <summary>
            Returns an operation to resolve the y dimension of the
            current thread index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetThreadIdxZ">
            <summary>
            Returns an operation to resolve the z dimension of the
            current thread index.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetBlockDimX">
            <summary>
            Returns an operation to resolve the x dimension of
            the current block dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetBlockDimY">
            <summary>
            Returns an operation to resolve the y dimension of
            the current block dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetBlockDimZ">
            <summary>
            Returns an operation to resolve the z dimension of
            the current block dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetGridDimensions">
            <summary>
            Returns access to the different grid dimensions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetBlockDimensions">
            <summary>
            Returns access to the different block dimensions.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.ShuffleI32">
            <summary>
            Represents a shuffle-up operation for i32.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.ShuffleF32">
            <summary>
            Represents a shuffle-up operation for f32.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.ShuffleDownI32">
            <summary>
            Represents a shuffle-down operation for i32.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.ShuffleDownF32">
            <summary>
            Represents a shuffle-down operation for f32.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.ShuffleUpI32">
            <summary>
            Represents a shuffle-up operation for i32.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.ShuffleUpF32">
            <summary>
            Represents a shuffle-up operation for f32.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.ShuffleXorI32">
            <summary>
            Represents a shuffle-xor operation for i32.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.ShuffleXorF32">
            <summary>
            Represents a shuffle-xor operation for f32.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.ShuffleLookup">
            <summary>
            Represents a lookup for shuffle intrinsics
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetWarpSize">
            <summary>
            Represents a get-warp-size operation.
            </summary>
        </member>
        <member name="P:ILGPU.Backends.PTXDeviceFunctions.GetLaneId">
            <summary>
            Represents a get-lane-id operation.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.MakeConditionAssert(ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary cref="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeConditionAssert(ILGPU.Compiler.Intrinsic.InvocationContext)"/>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.MakeMessageAssert(ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary cref="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeMessageAssert(ILGPU.Compiler.Intrinsic.InvocationContext)"/>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.MakeAssert(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Value,System.Nullable{ILGPU.Compiler.Value},System.String,System.Int32,System.String)">
            <summary>
            Builds code to invoke the assertion wrapper for debug assertions.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">The assertion message.</param>
            <param name="file">The current file name.</param>
            <param name="line">The line number.</param>
            <param name="func">The current function.</param>
            <returns>Null.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.AssertWrapper(System.Boolean,System.String,System.String,System.Int32,System.String)">
            <summary>
            Represents an assert-wrapper for Debug.Assert functions.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.AssertFailedWrapper(System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Internal wrapper to call the built-in function for failed asserts.
            This method will never be compiled or called.
            </summary>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.MakeAssertFailed(ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary>
            Builds the actual invocation of the built-in assertion-failed method.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>Null.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.MakeCudaAtomic(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.LLVM.LLVMValueRef,ILGPU.LLVM.LLVMValueRef)">
            <summary>
            Creates an atomic operation.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="ptr">The data pointer.</param>
            <param name="atomic">The atomic operation.</param>
            <returns>The created LLVM operation.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.MakeAtomicAdd(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.LLVM.LLVMValueRef,ILGPU.Compiler.Intrinsic.AtomicIntrinsicKind)">
            <summary cref="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeAtomicAdd(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.LLVM.LLVMValueRef,ILGPU.Compiler.Intrinsic.AtomicIntrinsicKind)" />
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.MakeAtomicInc(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.LLVM.LLVMValueRef,ILGPU.Compiler.Intrinsic.AtomicIntrinsicKind)">
            <summary cref="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeAtomicInc(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.LLVM.LLVMValueRef,ILGPU.Compiler.Intrinsic.AtomicIntrinsicKind)"/>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.MakeAtomicDec(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.LLVM.LLVMValueRef,ILGPU.Compiler.Intrinsic.AtomicIntrinsicKind)">
            <summary cref="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeAtomicDec(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.LLVM.LLVMValueRef,ILGPU.Compiler.Intrinsic.AtomicIntrinsicKind)"/>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.MakeGrid(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.GridIntrinsicKind)">
            <summary cref="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeGrid(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.GridIntrinsicKind)"/>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.MakeGroup(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.GroupIntrinsicKind)">
            <summary cref="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeGroup(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.GroupIntrinsicKind)"/>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.MakeMath(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.MathIntrinsicKind)">
            <summary cref="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeMath(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.MathIntrinsicKind)"/>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.MakeMemoryFence(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.MemoryFenceIntrinsicKind)">
            <summary cref="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeMemoryFence(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.MemoryFenceIntrinsicKind)"/>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.MakeWarpSize(ILGPU.LLVM.LLVMBuilderRef)">
            <summary>
            Creates a new query of the current warp size.
            </summary>
            <param name="builder">The current builder.</param>
            <returns>A value that represents the current warp size.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.BuildWarpShuffleMask(ILGPU.CompileUnit,ILGPU.LLVM.LLVMBuilderRef,ILGPU.LLVM.LLVMValueRef,System.Boolean)">
            <summary>
            Builds a warp-shuffle mask.
            </summary>
            <param name="unit">The current unit.</param>
            <param name="builder">The current builder.</param>
            <param name="width">The width that was passed by the user.</param>
            <param name="addOrMask">True, to add an or mask consisting of (WarpSize - 1).</param>
            <returns>A value that represents the desired warp-shuffle mask.</returns>
        </member>
        <member name="M:ILGPU.Backends.PTXDeviceFunctions.MakeWarp(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.WarpIntrinsicKind)">
            <summary cref="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeWarp(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.WarpIntrinsicKind)"/>
        </member>
        <member name="T:ILGPU.Backends.PTXMathFunctionAttribute">
            <summary>
            Represents a math-function mapping for the PTX backend.
            </summary>
        </member>
        <member name="T:ILGPU.Backends.PTXFastMathFunctionAttribute">
            <summary>
            Represents a fast-math-function mapping for the PTX backend.
            </summary>
        </member>
        <member name="T:ILGPU.BasicValueType">
            <summary>
            Represents a basic value type.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.None">
            <summary>
            Represent a non-basic value type.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.UInt1">
            <summary>
            Represents an 1-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int8">
            <summary>
            Represents an 8-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.UInt8">
            <summary>
            Represents an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int16">
            <summary>
            Represents a 16-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.UInt16">
            <summary>
            Represents a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int32">
            <summary>
            Represents a 32-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.UInt32">
            <summary>
            Represents a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Int64">
            <summary>
            Represents a 64-bit integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.UInt64">
            <summary>
            Represents a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Single">
            <summary>
            Represents a 32-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Double">
            <summary>
            Represents a 64-bit float.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Ptr">
            <summary>
            Represents general a pointer type.
            </summary>
        </member>
        <member name="F:ILGPU.BasicValueType.Array">
            <summary>
            Represents an array type.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.CompiledKernel">
            <summary>
            Represents a compiled kernel that encapsulates
            the emitted binary code.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CompiledKernel.#ctor(ILGPU.Context,System.Reflection.MethodInfo,System.Byte[],System.String,ILGPU.Backends.EntryPoint)">
            <summary>
            Constructs a new compiled kernel.
            </summary>
            <param name="context">The associated context.</param>
            <param name="sourceMethod">The source method.</param>
            <param name="buffer">The binary buffer.</param>
            <param name="entryName">The entry name.</param>
            <param name="entryPoint">The entry point.</param>
        </member>
        <member name="P:ILGPU.Compiler.CompiledKernel.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.CompiledKernel.SourceMethod">
            <summary>
            Represents the source method.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.CompiledKernel.EntryName">
            <summary>
            Returns the name of the entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.CompiledKernel.IndexType">
            <summary>
            Returns the index type of the entry point.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.CompiledKernel.EntryPoint">
            <summary>
            Returns the internally used entry point.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CompiledKernel.GetBuffer">
            <summary>
            Returns the internal buffer that contains the
            emitted binary code.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CompiledKernel.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current kernel.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current kernel.</returns>
        </member>
        <member name="M:ILGPU.Compiler.CompiledKernel.GetHashCode">
            <summary>
            Returns the hash code of this kernel.
            </summary>
            <returns>The hash code of this kernel.</returns>
        </member>
        <member name="M:ILGPU.Compiler.CompiledKernel.ToString">
            <summary>
            Returns the string representation of this kernel.
            </summary>
            <returns>The string representation of this kernel.</returns>
        </member>
        <member name="T:ILGPU.Compiler.BasicBlock">
            <summary>
            Represents a single basic block for code generation.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.BasicBlock.IncompletePhi">
            <summary>
            Represents an incomplete phi node that has
            to be completed by adding its required operands
            later on.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.IncompletePhi.#ctor(ILGPU.Compiler.VariableRef,ILGPU.LLVM.LLVMValueRef,System.Type)">
            <summary>
            Constructs an incomplete phi.
            </summary>
            <param name="variableRef">The referenced variable.</param>
            <param name="phi">The actual phi node.</param>
            <param name="phiType">The managed type of the node.</param>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.IncompletePhi.VariableRef">
            <summary>
            Returns the associated variable ref.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.IncompletePhi.Phi">
            <summary>
            Returns the actual phi node.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.IncompletePhi.PhiType">
            <summary>
            Returns the type of the phi node.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.BasicBlock.values">
            <summary>
            Value cache for SSA GetValue and SetValue functionality.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.BasicBlock.predecessors">
            <summary>
            Set of predecessors.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.BasicBlock.successors">
            <summary>
            Set of successors.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.BasicBlock.incompletePhis">
            <summary>
            Container for incomplete phis that have to be wired during block sealing.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.#ctor(ILGPU.Compiler.IBasicBlockHost,ILGPU.LLVM.LLVMBasicBlockRef)">
            <summary>
            Constructs a new basic block.
            </summary>
            <param name="blockHost">The block-host container.</param>
            <param name="basicBlock">The LLVM basic block.</param>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.StackCounter">
            <summary>
            Returnsd the current stack counter.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.BlockHost">
            <summary>
            Returns the associated block host.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.LLVMBlock">
            <summary>
            Returns the wrapped LLVM block.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.Unit">
            <summary>
            Returns the compilation unit.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.IntPtrType">
            <summary>
            Returns the used int-ptr type.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.Builder">
            <summary>
            Returns the used builder.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.CompilationContext">
            <summary>
            Returns the current compilation context.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.Predecesors">
            <summary>
            Returns the predecessors of this block.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.Successors">
            <summary>
            Returns the successors of this block.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.IsSealed">
            <summary>
            True, iff this block is sealed.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.InstructionOffset">
            <summary>
            Returns the instruction offset of this block.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.BasicBlock.InstructionCount">
            <summary>
            Returns the number of instructions in this block.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.AddSuccessor(ILGPU.Compiler.BasicBlock)">
            <summary>
            Adds the given block as successor.
            </summary>
            <param name="successor">The successor to add.</param>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.SetValue(ILGPU.Compiler.VariableRef,ILGPU.Compiler.Value)">
            <summary>
            Sets the given variable to the given value.
            </summary>
            <param name="var">The variable reference.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.GetValue(ILGPU.Compiler.VariableRef)">
            <summary>
            Returns the value of the given variable.
            </summary>
            <param name="var">The variable reference.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.PeekValue(ILGPU.Compiler.VariableRef)">
            <summary>
            Peeks a value recursively. This method only retrieves a value
            from a predecessor but does not build any phi nodes.
            </summary>
            <param name="var"></param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.GetValueRecursive(ILGPU.Compiler.VariableRef)">
            <summary>
            Returns the value of the given variable by asking the predecessors.
            This method recursively constructs required phi nodes to break cycles.
            </summary>
            <param name="var">The variable reference.</param>
            <returns>The value of the given variable.</returns>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.AddPhiOperands(ILGPU.Compiler.BasicBlock.IncompletePhi)">
            <summary>
            Wires phi operands for the given variable reference and the given
            phi node. This method is invoked for sealed blocks during SSA
            construction or during the sealing process in the last step.
            </summary>
            <param name="incompletePhi">An incomplete phi node to complete.</param>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.Seal">
            <summary>
            Seals this block (called when all predecessors have been seen) and
            wires all (previously unwired) phi nodes.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.PeekBasicValueType">
            <summary>
            Peeks the basic-value type of the element on the top of the stack.
            </summary>
            <returns>The peeked basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.Dup">
            <summary>
            Duplicates the element at the top of the stack.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.Pop">
            <summary>
            Pops a value from the execution stack.
            </summary>
            <returns>The popped value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.Pop(System.Type)">
            <summary>
            Pops a value as the required type from the execution stack.
            </summary>
            <param name="targetType">The required targt type.</param>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.Convert(ILGPU.Compiler.Value,System.Type)">
            <summary>
            Converts a value to the required type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The required targt type.</param>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.PopInt">
            <summary>
            Pops an element as integer from the stack.
            </summary>
            <returns>The popped element as integer.</returns>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.PopMethodArgs(System.Reflection.MethodBase,ILGPU.Compiler.Value[],System.Int32)">
            <summary>
            Pops the required arguments from the stack.
            </summary>
            <param name="methodBase">The method to use for the argument types.</param>
            <param name="methodValues">The target values.</param>
            <param name="valueOffset"></param>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.PopCompareOrArithmeticValue">
            <summary>
            Pops a value from the stack that can be used in the context of
            compare and arithmetic operations.
            </summary>
            <returns>
            The popped value from the stack that can be used in the
            context of compare and arithmetic operations.</returns>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.PopArithmeticArgs(ILGPU.LLVM.LLVMValueRef@,ILGPU.LLVM.LLVMValueRef@)">
            <summary>
            Pops two compatible arithmetic arguments from the execution stack.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The type of the two operands.</returns>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.Push(System.Type,ILGPU.LLVM.LLVMValueRef)">
            <summary>
            Pushes the value of the given type onto the execution stack.
            </summary>
            <param name="type">The type of the value.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Compiler.BasicBlock.Push(ILGPU.Compiler.Value)">
            <summary>
            Pushes the given stack value onto the execution stack.
            </summary>
            <param name="entry">The value to push.</param>
        </member>
        <member name="T:ILGPU.Compiler.CodeGenerator">
            <summary>
            Represents a LLVM code generator for .Net methods.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Compiler.CodeGenerator.disassembledMethod">
            <summary>
            The disassembled method for the current code generator.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.CodeGenerator.processedBasicBlocks">
            <summary>
            Stores processed basic blocks.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.#ctor(ILGPU.CompileUnit,ILGPU.Method,ILGPU.Compiler.DisassembledMethod)">
            <summary>
            Constructs a new code generator that targets the given unit.
            </summary>
            <param name="unit">The target unit.</param>
            <param name="method">The source method for code generation.</param>
            <param name="disassembledMethod">The disassembled method for code generation.</param>
        </member>
        <member name="P:ILGPU.Compiler.CodeGenerator.Unit">
            <summary>
            Returns the assigned compile unit.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.CodeGenerator.Method">
            <summary>
            Returns the source method.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.CodeGenerator.Builder">
            <summary>
            Returns the assigned instruction builder.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.CodeGenerator.CompilationContext">
            <summary>
            Returns the current compilation context.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.CodeGenerator.MethodBase">
            <summary>
            Returns the current method base.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.CodeGenerator.LLVMContext">
            <summary>
            Returns the associated LLVM context.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.CodeGenerator.Function">
            <summary>
            Returns the associated LLVM function.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.CodeGenerator.EntryBlock">
            <summary>
            Returns the entry block of the function.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.CodeGenerator.CurrentBlock">
            <summary>
            Returns the current block.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.GenerateCode">
            <summary>
            Generates LLVM code for the current method.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.IsProcessed(ILGPU.Compiler.BasicBlock)">
            <summary>
            Returns true iff the given block was already preprocessed.
            </summary>
            <param name="block">The block to check.</param>
            <returns>True, iff the given block was already preprocessed.</returns>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.GenerateCodeForBlock(ILGPU.Compiler.BasicBlock)">
            <summary>
            Generates code for the given basic block.
            </summary>
            <param name="block">The block to generate code for.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.CreateTempAlloca(ILGPU.LLVM.LLVMTypeRef)">
            <summary>
            Creates a temporary alloca instruction that allocates a temp
            storage of the given type in the entry block.
            </summary>
            <param name="llvmType">The type of the temporary to allocate.</param>
            <returns>The allocated alloca instruction.</returns>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeIntrinsicMathOperation(System.Type,System.Reflection.MethodInfo,ILGPU.LLVM.LLVMValueRef,ILGPU.LLVM.LLVMValueRef)">
            <summary>
            Constructs general math intrinsics.
            </summary>
            <param name="type">The type of the operation.</param>
            <param name="targetMethod">A reference to a specific target method.</param>
            <param name="left">The left param.</param>
            <param name="right">The right param.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeArithmeticAdd(System.Boolean)">
            <summary>
            Realizes an arithmetic add operation.
            </summary>
            <param name="overflow">True, if an overflow has to be checked.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeArithmeticSub(System.Boolean)">
            <summary>
            Realizes an arithmetic sub operation.
            </summary>
            <param name="overflow">True, if an overflow has to be checked.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeArithmeticMul(System.Boolean)">
            <summary>
            Realizes an arithmetic mul operation.
            </summary>
            <param name="overflow">True, if an overflow has to be checked.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeArithmeticDiv(System.Boolean)">
            <summary>
            Realizes an arithmetic div operation.
            </summary>
            <param name="forceUnsigned">True, if the comparison should be forced to be unsigned.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeArithmeticRem(System.Boolean)">
            <summary>
            Realizes an arithmetic rem operation.
            </summary>
            <param name="forceUnsigned">True, if the comparison should be forced to be unsigned.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.ComputeArrayAddress(ILGPU.LLVM.LLVMValueRef,ILGPU.LLVM.LLVMValueRef)">
            <summary>
            Computes the array-element address for the given array and the element index.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The target index/</param>
            <returns>The computed element address.</returns>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeNewArray(System.Type)">
            <summary>
            Realizes a new-array instruction.
            </summary>
            <param name="elementType">The element type of the array.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.LoadArrayLength">
            <summary>
            Loads the length of an array.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.LoadArrayElement(System.Type)">
            <summary>
            Loads an array element.
            </summary>
            <param name="type">The type of element to load.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.LoadArrayElementAddress">
            <summary>
            Loads the address of an array element.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.StoreArrayElement(System.Type)">
            <summary>
            Stores an array element of the specified type.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.CreateCall(System.Reflection.MethodBase,ILGPU.Compiler.Value[])">
            <summary>
            Creates a call instruction to the given method with the given arguments.
            </summary>
            <param name="target">The target method to invoke.</param>
            <param name="args">The call arguments</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeCall(System.Reflection.MethodBase)">
            <summary>
            Realizes a call instruction.
            </summary>
            <param name="target">The target method to invoke.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.ResolveVirtualCallTarget(ILGPU.CompilationContext,System.Reflection.MethodInfo,System.Type)">
            <summary>
            Resolves the virtual call target of the given virtual (or abstract) method.
            </summary>
            <param name="compilationContext">The current compilation context.</param>
            <param name="target">The virtual method to call.</param>
            <param name="constrainedType">The constrained type of the virtual call.</param>
            <returns>The resolved call target.</returns>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeVirtualCall(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Realizes a virtual-call instruction.
            </summary>
            <param name="target">The target method to invoke.</param>
            <param name="constrainedType">The target type on which to invoke the method.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeCalli(System.Object)">
            <summary>
            Realizes an indirect call instruction.
            </summary>
            <param name="signature">The target signature.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeJump(System.Reflection.MethodBase)">
            <summary>
            Realizes a jump instruction.
            </summary>
            <param name="target">The target method to invoke.</param>
        </member>
        <member name="F:ILGPU.Compiler.CodeGenerator.bbMapping">
            <summary>
            The block mapping from il offsets to basic blocks.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.DeterminePostOrder(ILGPU.Compiler.BasicBlock)">
            <summary>
            Determines the post order of all blocks.
            </summary>
            <param name="block">The current block.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.BuildBasicBlocks">
            <summary>
            Build all required basic blocks.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.SetupBasicBlocks(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.HashSet{ILGPU.Compiler.BasicBlock},ILGPU.Compiler.BasicBlock,System.Int32)">
            <summary>
            Setups all basic blocks (fills in the required information).
            </summary>
            <param name="offsetMapping">The offset mapping that maps il-byte offsets to indices.</param>
            <param name="handledBlocks">A collection of handled blocks.</param>
            <param name="current">The current block.</param>
            <param name="instructionIdx">The starting instruction index.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeCompare(ILGPU.Compiler.CompareType,System.Boolean)">
            <summary>
            Realizes a compare instruction of the given type.
            </summary>
            <param name="compareType">The comparison type to use.</param>
            <param name="forceUnsigned">True, if the comparison should be forced to be unsigned.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.CreateCompare(ILGPU.Compiler.CompareType,System.Boolean)">
            <summary>
            Creates a compare instruction of the given type.
            </summary>
            <param name="compareType">The comparison type to use.</param>
            <param name="forceUnsigned">True, if the comparison should be forced to be unsigned.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.LoadNull">
            <summary>
            Loads the constant null.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.Load(System.Int32)">
            <summary>
            Loads an int.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.Load(System.Int64)">
            <summary>
            Loads a long.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.Load(System.Single)">
            <summary>
            Loads a float.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.Load(System.Double)">
            <summary>
            Loads a double.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.LoadString(System.String)">
            <summary>
            Loads a string.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeReturn">
            <summary>
            Realizes a return instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeBranch(ILGPU.Compiler.ILInstructionBranchTargets)">
            <summary>
            Realizes an uncoditional branch instruction.
            </summary>
            <param name="targets">The jump targets.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeBranch(ILGPU.Compiler.ILInstructionBranchTargets,ILGPU.Compiler.CompareType,System.Boolean)">
            <summary>
            Realizes a conditional branch instruction.
            </summary>
            <param name="targets">The jump targets.</param>
            <param name="compareType">The comparison type of the condition.</param>
            <param name="unsigned">True, .</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeSwitch(ILGPU.Compiler.ILInstructionBranchTargets)">
            <summary>
            Realizes a switch instruction.
            </summary>
            <param name="targets">The jump targets.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeConvert(System.Type,System.Boolean)">
            <summary>
            Realizes a convert instruction.
            </summary>
            <param name="targetType">The target type.</param>
            <param name="forceUnsigned">True, if the comparison should be forced to be unsigned.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.CreateConversion(ILGPU.Compiler.Value,System.Type,System.Boolean)">
            <summary>
            Conerts the given value to the target type.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target type.</param>
            <param name="forceUnsigned">True, if the comparison should be forced to be unsigned.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeCastClass(System.Type)">
            <summary>
            Realizes a cast operation that casts a given class to another type.
            </summary>
            <param name="targetType">The target type.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.CreateCastClass(ILGPU.Compiler.Value,System.Type)">
            <summary>
            Conerts the given class value to the target type.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target type.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.LoadFieldAddress(System.Reflection.FieldInfo,ILGPU.Compiler.Value)">
            <summary>
            Loads the field address of the given field reference.
            </summary>
            <param name="field">The field to address.</param>
            <param name="value">The object value.</param>
            <returns>The computed field address.</returns>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.LoadField(System.Reflection.FieldInfo)">
            <summary>
            Loads the value of a field specified by the given metadata token.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.LoadFieldAddress(System.Reflection.FieldInfo)">
            <summary>
            Loads the address of a field specified by the given metadata token.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.LoadStaticField(System.Reflection.FieldInfo)">
            <summary>
            Loads a static field specified by the given metadata token.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.LoadStaticFieldAddress(System.Reflection.FieldInfo)">
            <summary>
            Loads the address of a static field specified by the given metadata token.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.StoreField(System.Reflection.FieldInfo)">
            <summary>
            Stores a value to a field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.StoreStaticField(System.Reflection.FieldInfo)">
            <summary>
            Stores a value to a static field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeTrap">
            <summary>
            Creates a new debug-trap instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeNumericAnd">
            <summary>
            Realizes a numeric-and instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeNumericOr">
            <summary>
            Realizes a numeric-or instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeNumericXor">
            <summary>
            Realizes a numeric-xor instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeNumericShl">
            <summary>
            Realizes a numeric-shl instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeNumericShr(System.Boolean)">
            <summary>
            Realizes a numeric-shr instruction.
            </summary>
            <param name="forceUnsigned">True if the comparison should be forced to be unsigned.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeNumericNeg">
            <summary>
            Realizes a numeric-neg instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeNumericNot">
            <summary>
            Realizes a numeric-not instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeBox">
            <summary>
            Realizes a boxing operation that boxes a value.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeUnbox(System.Type)">
            <summary>
            Realizes an un-boxing operation that unboxes a previously boxed value.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeNewObject(System.Reflection.MethodBase)">
            <summary>
            Realizes a new-object operation that creates a new instance of a specified type.
            </summary>
            <param name="method">The target method.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeInitObject(System.Type)">
            <summary>
            Realizes a managed-object initialization.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeIsInstance(System.Type)">
            <summary>
            Realizes an is-instance instruction.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeLoadObject(System.Type)">
            <summary>
            Realizes an indirect load instruction.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeStoreObject(System.Type)">
            <summary>
            Realizes an indirect store instruction.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.MakeLocalAlloc">
            <summary>
            Realizes a local stackalloc instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.InitArgsAndLocals">
            <summary>
            Initializes args and locals for the current method.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.LoadVariable(ILGPU.Compiler.VariableRef)">
            <summary>
            Loads a variable. This can be an argument or a local reference.
            </summary>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.LoadVariableAddress(ILGPU.Compiler.VariableRef)">
            <summary>
            Loads a variable address. This can be an argument or a local reference.
            </summary>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.StoreVariable(ILGPU.Compiler.VariableRef)">
            <summary>
            Stores a value to the argument with index idx.
            </summary>
            <param name="var">The variable reference.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.LoadIndirect(System.Type)">
            <summary>
            Loads a value of the given type from an unsafe memory address.
            </summary>
            <param name="type">The type of the value to load.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.StoreIndirect(System.Type)">
            <summary>
            Stores a value to an unsafe address.
            </summary>
            <param name="type">The type of the value to store.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.VerifyNotRuntimeMethod(ILGPU.CompilationContext,System.Reflection.MethodBase)">
            <summary>
            Verifies that the given method is not a .Net-runtime-dependent method.
            If it depends on the runtime, this method will throw a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="compilationContext">The current compilation context.</param>
            <param name="method">The method to verify.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.VerifyAccessToMethodInImplicitlyGroupedKernel(ILGPU.CompilationContext,System.Reflection.MethodBase,ILGPU.Backends.EntryPoint)">
            <summary>
            Verifies that the given method is supported in the scope of an implictly-grouped kernel.
            Note that all other (non-grouped) methods will be accepted.
            </summary>
            <param name="compilationContext">The current compilation context.</param>
            <param name="method">The method to verify.</param>
            <param name="entryPoint">The kernel entry point.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.VerifyStaticFieldLoad(ILGPU.CompilationContext,ILGPU.CompileUnitFlags,System.Reflection.FieldInfo)">
            <summary>
            Verifies a static-field load operation.
            </summary>
            <param name="compilationContext">The current compilation context.</param>
            <param name="flags">The current compile unit flags.</param>
            <param name="field">The static field to load.</param>
        </member>
        <member name="M:ILGPU.Compiler.CodeGenerator.VerifyStaticFieldStore(ILGPU.CompilationContext,ILGPU.CompileUnitFlags,System.Reflection.FieldInfo)">
            <summary>
            Verifies a static-field store operation.
            </summary>
            <param name="compilationContext">The current compilation context.</param>
            <param name="flags">The current compile unit flags.</param>
            <param name="field">The static field to store to.</param>
        </member>
        <member name="T:ILGPU.Compiler.CompareType">
            <summary>
            Represents the comparison type of two value.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.DisassembledMethod">
            <summary>
            Represents a disassembled method.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="P:ILGPU.Compiler.DisassembledMethod.Method">
            <summary>
            Returns the method that was disassembled.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.DisassembledMethod.Instructions">
            <summary>
            Returns the disassembled instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.DisassembledMethod.DirectCallInstructions">
            <summary>
            Returns the disassembled direct call instructions (call/jump).
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.DisassembledMethod.CallInstructions">
            <summary>
            Returns all disassembled call instructions (including calli/callvirt).
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.DisassembledMethod.MaxStackSize">
            <summary>
            Returns the maximum stack size.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.DisassembledMethod.Count">
            <summary>
            Returns the number of instructions.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.DisassembledMethod.Item(System.Int32)">
            <summary>
            Returns the instruction at the given index.
            </summary>
            <param name="index">The instruction index.</param>
            <returns>The instruction at the given index.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassembledMethod.Disassemble(System.Reflection.MethodBase)">
            <summary>
            Disassembles the given method.
            </summary>
            <param name="method">The method to disassemble.</param>
            <returns>The disassembled method.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassembledMethod.Disassemble(System.Reflection.MethodBase,System.EventHandler{ILGPU.Compiler.ILOpCode})">
            <summary>
            Disassembles the given method.
            </summary>
            <param name="method">The method to disassemble.</param>
            <param name="notSupportedILinstructionHandler">Event handler for IL instructions that are not supported.</param>
            <returns>The disassembled method.</returns>
        </member>
        <member name="T:ILGPU.Compiler.DisassemblerContext">
            <summary>
            Represents a disassembler for .Net methods.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Compiler.DisassemblerContext.NativePtrType">
            <summary>
            Represents the native pointer type that is used during the
            disassembling process.
            </summary>
        </member>
        <member name="E:ILGPU.Compiler.DisassemblerContext.NotSupportedILInstruction">
            <summary>
            Will be raised iff a method without a not supported IL instruction is detected.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.DisassemblerContext.il">
            <summary>
            The current il byte code.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.DisassemblerContext.ilOffset">
            <summary>
            The current offset within the byte code.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.DisassemblerContext.instructionOffset">
            <summary>
            The current instruction type.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.DisassemblerContext.flags">
            <summary>
            The current flags that are applied to the next instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.DisassemblerContext.flagsArgument">
            <summary>
            The current flags argument.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.DisassemblerContext.instructions">
            <summary>
            Represents the current list of instructions.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.#ctor(System.Reflection.MethodBase)">
            <summary>
            Constructs a new disassembler.
            </summary>
            <param name="methodBase">The target method.</param>
        </member>
        <member name="P:ILGPU.Compiler.DisassemblerContext.MethodBase">
            <summary>
            Returns the current method base.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.DisassemblerContext.MethodBody">
            <summary>
            Returns the current method body.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.DisassemblerContext.DeclaringType">
            <summary>
            Returns the declaring type of the method.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.DisassemblerContext.AssociatedModule">
            <summary>
            Returns the associated managed module.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.DisassemblerContext.MethodGenericArguments">
            <summary>
            Returns the generic arguments of the method.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.DisassemblerContext.TypeGenericArguments">
            <summary>
            Returns the generic arguments of the declaring type.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.Disassemble">
            <summary>
            Disassembles the current method and returns a list of
            disassembled instructions.
            </summary>
            <returns>The list of disassembled instructions.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.DisassembleCall(ILGPU.Compiler.ILInstructionType,System.Int32)">
            <summary>
            Disassembles a call to the given method.
            </summary>
            <param name="type">The instruction type.</param>
            <param name="methodToken">The token of the method to be disassembled.</param>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.AddFlags(ILGPU.Compiler.ILInstructionFlags)">
            <summary>
            Adds the given flags to the current instruction flags.
            </summary>
            <param name="flagsToAdd">The flags to be added.</param>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.AppendInstruction(ILGPU.Compiler.ILInstructionType,System.UInt16,System.UInt16,System.Object)">
            <summary>
            Appends an instruction to the current instruction list.
            </summary>
            <param name="type">The instruction type.</param>
            <param name="popCount">The number of elements to pop from the stack.</param>
            <param name="pushCount">The number of elements to push onto the stack.</param>
            <param name="argument">The argument of the instruction.</param>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.AppendInstructionWithFlags(ILGPU.Compiler.ILInstructionType,System.UInt16,System.UInt16,ILGPU.Compiler.ILInstructionFlags,System.Object)">
            <summary>
            Appends an instruction to the current instruction list.
            </summary>
            <param name="type">The instruction type.</param>
            <param name="popCount">The number of elements to pop from the stack.</param>
            <param name="pushCount">The number of elements to push onto the stack.</param>
            <param name="additionalFlags">Additional instruction flags.</param>
            <param name="argument">The argument of the instruction.</param>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ResolveType(System.Int32)">
            <summary>
            Resolves the type for the given token using
            the current generic information.
            </summary>
            <param name="token">The token of the type to resolve.</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ResolveMethod(System.Int32)">
            <summary>
            Resolves the method for the given token using
            the current generic information.
            </summary>
            <param name="token">The token of the method to resolve.</param>
            <returns>The resolved method.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ResolveField(System.Int32)">
            <summary>
            Resolves the field for the given token using
            the current generic information.
            </summary>
            <param name="token">The token of the field to resolve.</param>
            <returns>The resolved field.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ReadOpCode">
            <summary>
            Reads an op-code from the current instruction data.
            </summary>
            <returns>The decoded op-code.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ReadShortBranchTarget">
            <summary>
            Reads a short branch target from the current instruction data.
            </summary>
            <returns>The decoded short branch target.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ReadBranchTarget">
            <summary>
            Reads a branch target from the current instruction data.
            </summary>
            <returns>The decoded branch target.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ReadByteArg">
            <summary>
            Reads a byte from the current instruction data.
            </summary>
            <returns>The decoded byte.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ReadTypeArg">
            <summary>
            Reads a type reference from the current instruction data.
            </summary>
            <returns>The decoded type reference.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ReadFieldArg">
            <summary>
            Reads a field reference from the current instruction data.
            </summary>
            <returns>The decoded field reference.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ReadSByteArg">
            <summary>
            Reads a sbyte from the current instruction data.
            </summary>
            <returns>The decoded sbyte.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ReadUShortArg">
            <summary>
            Reads an ushort from the current instruction data.
            </summary>
            <returns>The decoded ushort.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ReadIntArg">
            <summary>
            Reads an int from the current instruction data.
            </summary>
            <returns>The decoded int.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ReadUIntArg">
            <summary>
            Reads an uint from the current instruction data.
            </summary>
            <returns>The decoded uint.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ReadSingleArg">
            <summary>
            Reads a string from the current instruction data.
            </summary>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ReadLongArg">
            <summary>
            Reads a long from the current instruction data.
            </summary>
            <returns>The decoded long.</returns>
        </member>
        <member name="M:ILGPU.Compiler.DisassemblerContext.ReadDoubleArg">
            <summary>
            Reads a double from the current instruction data.
            </summary>
            <returns>The decoded double.</returns>
        </member>
        <member name="T:ILGPU.Compiler.IBasicBlockHost">
            <summary>
            Represents a host for basic blocks.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.IBasicBlockHost.Unit">
            <summary>
            Returns the associated compile unit.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.IBasicBlockHost.Builder">
            <summary>
            Returns the current instruction builder.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.IBasicBlockHost.CompilationContext">
            <summary>
            Returns the current compilation context.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.IBasicBlockHost.CreateCastClass(ILGPU.Compiler.Value,System.Type)">
            <summary>
            Conerts the given class value to the target type.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target type.</param>
        </member>
        <member name="M:ILGPU.Compiler.IBasicBlockHost.CreateConversion(ILGPU.Compiler.Value,System.Type,System.Boolean)">
            <summary>
            Conerts the given value to the target type.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target type.</param>
            <param name="forceUnsigned">True if the comparison should be forced to be unsigned.</param>
        </member>
        <member name="M:ILGPU.Compiler.IBasicBlockHost.IsProcessed(ILGPU.Compiler.BasicBlock)">
            <summary>
            Returns true iff the given block was already preprocessed.
            </summary>
            <param name="block">The block to check.</param>
            <returns>True, iff the given block was already preprocessed.</returns>
        </member>
        <member name="T:ILGPU.Compiler.ILInstructionType">
            <summary>
            Represents an instruction type of a single il instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Nop">
            
             <summary>Nop</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Break">
            
             <summary>Break</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldarg">
            
             <summary>Ldarg</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldarga">
            
             <summary>Ldarga</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Starg">
            
             <summary>Starg</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldloc">
            
             <summary>Ldloc</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldloca">
            
             <summary>Ldloca</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Stloc">
            
             <summary>Stloc</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldnull">
            
             <summary>Ldnull</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.LdI4">
            
             <summary>LdI4</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.LdI8">
            
             <summary>LdI8</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.LdR4">
            
             <summary>LdR4</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.LdR8">
            
             <summary>LdR8</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldstr">
            
             <summary>Ldstr</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Dup">
            
             <summary>Dup</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Pop">
            
             <summary>Pop</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Jmp">
            
             <summary>Jmp</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Call">
            
             <summary>Call</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Calli">
            
             <summary>Calli</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Callvirt">
            
             <summary>Callvirt</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ret">
            
             <summary>Ret</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Br">
            
             <summary>Br</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Brfalse">
            
             <summary>Brfalse</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Brtrue">
            
             <summary>Brtrue</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Beq">
            
             <summary></summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Bne">
            
             <summary>Bne</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Bge">
            
             <summary>Bge</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Bgt">
            
             <summary>Bgt</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ble">
            
             <summary>Ble</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Blt">
            
             <summary>Blt</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Switch">
            
             <summary>Switch</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Add">
            
             <summary>Add</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Sub">
            
             <summary>Sub</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Mul">
            
             <summary>Mul</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Div">
            
             <summary>Div</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Rem">
            
             <summary>Rem</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.And">
            
             <summary>And</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Or">
            
             <summary>Or</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Xor">
            
             <summary>Xor</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Shl">
            
             <summary>Shl</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Shr">
            
             <summary>Shr</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Neg">
            
             <summary>Neg</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Not">
            
             <summary>Not</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Conv">
            
             <summary>Conv</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Initobj">
            
             <summary>Initobj</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Newobj">
            
             <summary>Newobj</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Newarr">
            
             <summary>Newarr</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Castclass">
            
             <summary>Castclass</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Isinst">
            
             <summary>Isinst</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Box">
            
             <summary>Box</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Unbox">
            
             <summary>Unbox</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldfld">
            
             <summary>Ldfld</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldflda">
            
             <summary>Ldflda</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Stfld">
            
             <summary>Stfld</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldsfld">
            
             <summary>Ldsfld</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldsflda">
            
             <summary>Ldsflda</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Stsfld">
            
             <summary>Stsfld</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldobj">
            
             <summary>Ldobj</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Stobj">
            
             <summary>Stobj</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Cpobj">
            
             <summary>Cpobj</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldlen">
            
             <summary>Ldlen</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldelem">
            
             <summary>Ldelem</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldelema">
            
             <summary>Ldelema</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Stelem">
            
             <summary>Stelem</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ceq">
            
             <summary>Ceq</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Cgt">
            
             <summary>Cgt</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Clt">
            
             <summary>Clt</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Ldind">
            
             <summary>Ldind</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Stind">
            
             <summary>Stind</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Localloc">
            
             <summary>Localloc</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Cpblk">
            
             <summary>Cpblk</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.Initblk">
            
             <summary>Initblk</summary>
            
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionType.SizeOf">
            
             <summary>SizeOf</summary>
            
        </member>
        <member name="T:ILGPU.Compiler.ILInstructionBranchTargets">
            <summary>
            Represents a collection fo branch targets.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.ILInstructionBranchTargets.#ctor(System.Int32[])">
            <summary>
            Constructs a new container for branch targets.
            </summary>
            <param name="targets"></param>
        </member>
        <member name="P:ILGPU.Compiler.ILInstructionBranchTargets.Count">
            <summary>
            Returns the number of targets
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.ILInstructionBranchTargets.Item(System.Int32)">
            <summary>
            Returns the target offset at the given index.
            </summary>
            <param name="index">The index of the target offset.</param>
            <returns>The resolved target offset.</returns>
        </member>
        <member name="P:ILGPU.Compiler.ILInstructionBranchTargets.UnconditionalBranchTarget">
            <summary>
            Returns the unconditional branch target (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.ILInstructionBranchTargets.ConditionalBranchIfTarget">
            <summary>
            Returns the conditional branch if-target (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.ILInstructionBranchTargets.ConditionalBranchElseTarget">
            <summary>
            Returns the conditional branch else-target (if any).
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.ILInstructionBranchTargets.SwitchDefaultTarget">
            <summary>
            Returns the default switch branch target (if any).
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.ILInstructionBranchTargets.GetTargetOffsets">
            <summary>
            Returns the branch offsets.
            </summary>
            <returns>The branch offsets.</returns>
        </member>
        <member name="M:ILGPU.Compiler.ILInstructionBranchTargets.ToString">
            <summary>
            Returns the string representation of the branch targets.
            </summary>
            <returns>The string representation of the branch targets.</returns>
        </member>
        <member name="T:ILGPU.Compiler.ILInstructionFlags">
            <summary>
            Represent flags of an il instruction.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionFlags.Unsigned">
            <summary>
            Unsigned operation.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionFlags.Overflow">
            <summary>
            Overflow check requested.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionFlags.Unchecked">
            <summary>
            Unchecked operation.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionFlags.Unaligned">
            <summary>
            Unaligned operation.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionFlags.Volatile">
            <summary>
            Volatile access.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionFlags.ReadOnly">
            <summary>
            ReadOnly access.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionFlags.Tail">
            <summary>
            Tail call.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.ILInstructionFlags.Constrained">
            <summary>
            Constraint virtual-function access.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.ILInstructionFlagsContext">
            <summary>
            Represents a context of instruction flags.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.ILInstructionFlagsContext.#ctor(ILGPU.Compiler.ILInstructionFlags,System.Object)">
            <summary>
            Constructs a new instruction-flag context.
            </summary>
            <param name="flags">The instruction flags.</param>
            <param name="argument">The flags argument.</param>
        </member>
        <member name="P:ILGPU.Compiler.ILInstructionFlagsContext.Flags">
            <summary>
            Returns the flags.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.ILInstructionFlagsContext.Argument">
            <summary>
            Returns the flag argument.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.ILInstructionFlagsContext.Equals(ILGPU.Compiler.ILInstructionFlagsContext)">
            <summary>
            Returns true iff the current object is equal to the given one.
            </summary>
            <param name="other">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Compiler.ILInstructionFlagsContext.Equals(System.Object)">
            <summary>
            Returns true iff the current object is equal to the given one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Compiler.ILInstructionFlagsContext.GetHashCode">
            <summary>
            Returns the hash code of this flags.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ILGPU.Compiler.ILInstructionFlagsContext.ToString">
            <summary>
            Returns the string representation of this flags.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ILGPU.Compiler.ILInstructionFlagsContext.op_Equality(ILGPU.Compiler.ILInstructionFlagsContext,ILGPU.Compiler.ILInstructionFlagsContext)">
            <summary>
            Returns true iff the first instruction context is equal to the second one.
            </summary>
            <param name="first">The first instruction context.</param>
            <param name="second">The second instruction context.</param>
            <returns>True, iff the first instruction is equal to the second one.</returns>
        </member>
        <member name="M:ILGPU.Compiler.ILInstructionFlagsContext.op_Inequality(ILGPU.Compiler.ILInstructionFlagsContext,ILGPU.Compiler.ILInstructionFlagsContext)">
            <summary>
            Returns true iff the first instruction context is not equal to the second one.
            </summary>
            <param name="first">The first instruction context.</param>
            <param name="second">The second instruction context.</param>
            <returns>True, iff the first instruction is not equal to the second one.</returns>
        </member>
        <member name="T:ILGPU.Compiler.ILInstruction">
            <summary>
            Represents a single il instruction.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.ILInstruction.#ctor(System.Int32,ILGPU.Compiler.ILInstructionType,ILGPU.Compiler.ILInstructionFlagsContext,System.UInt16,System.UInt16,System.Object)">
            <summary>
            Constructs a new il instruction.
            </summary>
            <param name="offset">The instruction offset in bytes.</param>
            <param name="type">The instruction type.</param>
            <param name="flagsContext">The flags context.</param>
            <param name="popCount">The number of elements to pop from the stack.</param>
            <param name="pushCount">The number of elements to push onto the stack.</param>
            <param name="argument">The instruction argument.</param>
        </member>
        <member name="P:ILGPU.Compiler.ILInstruction.Offset">
            <summary>
            Returns the instruction offset in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.ILInstruction.InstructionType">
            <summary>
            Returns the instruction type.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.ILInstruction.Flags">
            <summary>
            Returns the instruction flags.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.ILInstruction.FlagsContext">
            <summary>
            Returns the instruction-flags context.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.ILInstruction.PopCount">
            <summary>
            Returns the number of elements to pop from the stack.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.ILInstruction.PushCount">
            <summary>
            Returns the number of elements to push onto the stack.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.ILInstruction.Argument">
            <summary>
            Returns the instruction argument.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.ILInstruction.IsTerminator">
            <summary>
            Returns true iff this instruction is a basic block terminator.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.ILInstruction.GetArgumentAs``1">
            <summary>
            Returns the instruction argument as T.
            </summary>
            <typeparam name="T">The target type T.</typeparam>
            <returns>The instruction argument T.</returns>
        </member>
        <member name="M:ILGPU.Compiler.ILInstruction.HasFlags(ILGPU.Compiler.ILInstructionFlags)">
            <summary>
            Returns true iff current instruction has the given flags.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, iff current instruction has the given flags.</returns>
        </member>
        <member name="M:ILGPU.Compiler.ILInstruction.Equals(ILGPU.Compiler.ILInstruction)">
            <summary>
            Returns true iff the current object is equal to the given one.
            </summary>
            <param name="other">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Compiler.ILInstruction.Equals(System.Object)">
            <summary>
            Returns true iff the current object is equal to the given one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if the current object is equal to the given one.</returns>
        </member>
        <member name="M:ILGPU.Compiler.ILInstruction.GetHashCode">
            <summary>
            Returns the hash code of this instruction.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ILGPU.Compiler.ILInstruction.ToString">
            <summary>
            Returns the string representation of this instruction.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.AtomicIntrinsicAttribute">
            <summary>
            Marks intrinsic atomic methods.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.AtomicIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions">
            <summary>
            Represents the base class for all compiler-specific device functions.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.DeviceFunctionHandler">
            <summary>
            Represents a basic handler for all compiler-specific device functions.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.IntrinsicDeviceFunctionHandler">
            <summary>
            Represents a basic handler for all ILGPU intrinsic device functions.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.DeviceFunctionRemapper">
            <summary>
            Represents a basic remapper for all compiler-specific device functions.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.DeviceFunctionHandlers">
            <summary>
            Stores the default handlers.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.IntrinsicDeviceFunctionHandlers">
            <summary>
            Stores the intrinsic handlers.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.DeviceFunctionRemappers">
            <summary>
            Stores the default function remappers.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.#ctor(ILGPU.CompileUnit)">
            <summary>
            Constructs a new compiler-specific device-function storage.
            </summary>
            <param name="unit">The target compilation unit.</param>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.Unit">
            <summary>
            Returns the assigned compilation unit.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.Remap(ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary>
            Tries to remap the given invocation context to another context.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The remapped context or null, iff the remapping operation was not successful.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.Handle(ILGPU.Compiler.Intrinsic.InvocationContext,System.Nullable{ILGPU.Compiler.Value}@)">
            <summary>
            Tries to handle the given invocation context in the scope of these compiler-known functions.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="result">The resulting value.</param>
            <returns>True, iff this context can handle the curent invocation context.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeAtomic(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.AtomicIntrinsicKind)">
            <summary>
            Makes a general atomic invocation of the given kind.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="kind">The kind of the atomic operation.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeAtomicAdd(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.LLVM.LLVMValueRef,ILGPU.Compiler.Intrinsic.AtomicIntrinsicKind)">
            <summary>
            Makes a specifc atomic-inc invocation of the given kind.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="ptr">The pointer to the data location.</param>
            <param name="kind">The kind of the atomic operations.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeAtomicInc(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.LLVM.LLVMValueRef,ILGPU.Compiler.Intrinsic.AtomicIntrinsicKind)">
            <summary>
            Makes a specifc atomic-inc invocation of the given kind.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="ptr">The pointer to the data location.</param>
            <param name="kind">The kind of the atomic operations.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeAtomicDec(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.LLVM.LLVMValueRef,ILGPU.Compiler.Intrinsic.AtomicIntrinsicKind)">
            <summary>
            Makes a specifc atomic-dec invocation of the given kind.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="ptr">The pointer to the data location.</param>
            <param name="kind">The kind of the atomic operations.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeMemoryFence(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.MemoryFenceIntrinsicKind)">
            <summary>
            Handles general memory-fence operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="kind">The kind of the memory-fence intrinsic.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeGrid(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.GridIntrinsicKind)">
            <summary>
            Handles general grid operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="kind">The kind of the grid intrinsic.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeGroup(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.GroupIntrinsicKind)">
            <summary>
            Handles general group operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="kind">The kind of the group intrinsic.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeWarp(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.WarpIntrinsicKind)">
            <summary>
            Handles general warp operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="kind">The kind of the warp intrinsic.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeIntPtr(ILGPU.Compiler.Intrinsic.InvocationContext,System.Type)">
            <summary>
            Handles IntPtr creation.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="sourceType">The source type.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeIntPtrCompare(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.LLVM.LLVMIntPredicate)">
            <summary>
            Handles IntPtr comparisons.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="predicate">The comparison predicate.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeCastIntToIntPtr(ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary>
            Handles int to IntPtr casts.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeIntPtrCastToPtr(ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary>
            Handles IntPtr to void* casts.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeIntPtrCastToInt(ILGPU.Compiler.Intrinsic.InvocationContext,System.Type)">
            <summary>
            Handles IntPtr to int casts.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="intType">The target int type.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeIntPtrOffsetManipulation(ILGPU.Compiler.Intrinsic.InvocationContext,System.Boolean)">
            <summary>
            Handles IntPtr offset manipilations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="positive">True, iff the given offset should be treated as positive.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.RemapNullableMethods(ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary>
            Remaps methods of nullable types.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The remapped invocation context.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.GetNullableValue``1(System.Nullable{``0}@)">
            <summary>
            Wraps the getter T?.Value.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="nullable">The nullable value.</param>
            <returns>The internal value of the given nullable.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.AddMathRemapping(System.Type,System.String,System.String,System.Type[])">
            <summary>
            Registers a math mapping for a function from mathType via ILGPU.GPUMath.
            </summary>
            <param name="mathType">The scope of the function.</param>
            <param name="mathName">The name of the function in the scope of mathType.</param>
            <param name="gpuMathName">The name of the function in the scope of ILGPU.GPUMath.</param>
            <param name="paramTypes">The parameter types of both functions.</param>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeDefaultMathRemapping(ILGPU.Compiler.Intrinsic.InvocationContext,System.Reflection.MethodInfo)">
            <summary>
            Default remapping of a generic math operation.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="targetMethod">The target method from the gpu-math class.</param>
            <returns>The remapped invocation context.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeMathRemapping(ILGPU.Compiler.Intrinsic.InvocationContext,System.Reflection.MethodInfo)">
            <summary>
            Remaps general math operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="targetMethod">The target method from the gpu-math class.</param>
            <returns>The remapped invocation context.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeMathInternal(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.MathIntrinsicKind)">
            <summary>
            Handles general math operations and performs double-intrinsic to float-intrinsic conversions if requested.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="kind">The kind of the math intrinsic.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeMath(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.MathIntrinsicKind)">
            <summary>
            Handles general math operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="kind">The kind of the math intrinsic.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeConditionAssert(ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary>
            Triggers code generation of a conditional assert function.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeMessageAssert(ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary>
            Triggers code generation of a message assert function.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeActivatorCall(ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary>
            Handles general activator operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.CompilerDeviceFunctions.MakeInterop(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.InteropIntrinsicKind)">
            <summary>
            Handles general interop operations.
            </summary>
            <param name="context">The current invocation context.</param>
            <param name="kind">The kind of the interop intrinsic.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.IDeviceFunctions">
            <summary>
            Represents the base interface for custom device functions.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.IDeviceFunctions.Remap(ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary>
            Tries to remap the given invocation context to another context.
            </summary>
            <param name="context">The current invocation context.</param>
            <returns>The remapped context or null, iff the remapping operation was not successful.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.IDeviceFunctions.Handle(ILGPU.Compiler.Intrinsic.InvocationContext,System.Nullable{ILGPU.Compiler.Value}@)">
            <summary>
            Tries to handle a specific invocation context. This method
            can generate custom code instead of the default method-invocation
            functionality.
            </summary>
            <param name="invocationContext">The current invocation context.</param>
            <param name="result">The resulting value of the intrinsic call.</param>
            <returns>True, iff this class could handle the call.</returns>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.IDeviceTypes">
            <summary>
            Represents the base interface for custom device types that require
            a specific translation.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.IDeviceTypes.MapType(System.Type)">
            <summary>
            Maps the given type to an LLVM type.
            </summary>
            <param name="type">The type to map.</param>
            <returns>The mapped output type, or null iff the type could not be mapped.</returns>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.GridIntrinsicAttribute">
            <summary>
            Marks grid methods that are builtin.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.GridIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.GroupIntrinsicAttribute">
            <summary>
            Marks group methods that are builtin.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.GroupIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.InteropIntrinsicAttribute">
            <summary>
            Marks intrinsic interop methods.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.InteropIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.IntrinsicAttribute">
            <summary>
            Marks methods that are builtin.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.IntrinsicAttribute.Type">
            <summary>
            Returns the type of this intrinsic attribute.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.InvocationContext">
            <summary>
            Represents an invocation context for compiler-known methods
            that are supported in the scope of ILGPU programs.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.InvocationContext.#ctor(ILGPU.LLVM.LLVMBuilderRef,ILGPU.Method,System.Reflection.MethodBase,ILGPU.Compiler.Value[],ILGPU.Compiler.CodeGenerator)">
            <summary>
            Constructs a new invocation context.
            </summary>
            <param name="builder">The current instruction builder.</param>
            <param name="callerMethod">The caller.</param>
            <param name="method">The called method.</param>
            <param name="args">The method arguments.</param>
            <param name="codeGenerator">The associated code generator.</param>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.InvocationContext.Unit">
            <summary>
            Returns the current compile unit
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.InvocationContext.Context">
            <summary>
            Returns the current context.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.InvocationContext.LLVMContext">
            <summary>
            Returns the LLVM context.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.InvocationContext.Builder">
            <summary>
            Returns the current instruction builder.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.InvocationContext.CallerMethod">
            <summary>
            Represents the caller method.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.InvocationContext.Method">
            <summary>
            Represents the targeted method.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.InvocationContext.Module">
            <summary>
            Returns the associated module.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.InvocationContext.CodeGenerator">
            <summary>
            Returns the associated code generator.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.InvocationContext.CompilationContext">
            <summary>
            Returns the current compilation context.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.InvocationContext.GetArgs">
            <summary>
            Represents the arguments of the method invocation.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.InvocationContext.GetLLVMArgs">
            <summary>
            Resolves the native LLVM arguments and returns the in form
            of an argument array.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.InvocationContext.GetMethodGenericArguments">
            <summary>
            Returns the generic arguments of the used method.
            </summary>
            <returns>The generic arguments of the used method.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.InvocationContext.GetTypeGenericArguments">
            <summary>
            Returns the generic arguments of the used method.
            </summary>
            <returns>The generic arguments of the used method.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.InvocationContext.Equals(ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary>
            Returns true iff the given invocation context is equal to the current invocation context.
            </summary>
            <param name="other">The other invocation context.</param>
            <returns>True, iff the given invocation context is equal to the current invocation context.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.InvocationContext.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current invocation context.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current invocation context.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.InvocationContext.GetHashCode">
            <summary>
            Returns the hash code of this invocation context.
            </summary>
            <returns>The hash code of this invocation context.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.InvocationContext.ToString">
            <summary>
            Returns the string representation of this invocation context.
            </summary>
            <returns>The string representation of this invocation context.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.InvocationContext.op_Equality(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary>
            Returns true iff the first and second invocation contexts are the same.
            </summary>
            <param name="first">The first invocation context.</param>
            <param name="second">The second invocation context.</param>
            <returns>True, iff the first and second invocation contexts are the same.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.InvocationContext.op_Inequality(ILGPU.Compiler.Intrinsic.InvocationContext,ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary>
            Returns true iff the first and second invocation contexts are not the same.
            </summary>
            <param name="first">The first invocation context.</param>
            <param name="second">The second invocation context.</param>
            <returns>True, iff the first and second invocation contexts are not the same.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.MethodIntrinsicKindExtensions.IsFloatIntrinsic(ILGPU.Compiler.Intrinsic.MathIntrinsicKind)">
            <summary>
            Returns true iff the given intrinsic kind represents an intrinsic operation
            that works on floats.
            </summary>
            <param name="kind">The intrinsic kind.</param>
            <returns>
            True, iff the given intrinsic kind represents an intrinsic operation
            that works on floats.
            </returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.MethodIntrinsicKindExtensions.IsF32Intrinsic(ILGPU.Compiler.Intrinsic.MathIntrinsicKind)">
            <summary>
            Returns true iff the given intrinsic kind represents an intrinsic operation
            that works on 32bit floats.
            </summary>
            <param name="kind">The intrinsic kind.</param>
            <returns>
            True, iff the given intrinsic kind represents an intrinsic operation
            that works on 32bit floats.
            </returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.MethodIntrinsicKindExtensions.IsF64Intrinsic(ILGPU.Compiler.Intrinsic.MathIntrinsicKind)">
            <summary>
            Returns true iff the given intrinsic kind represents an intrinsic operation
            that works on 6432bit floats.
            </summary>
            <param name="kind">The intrinsic kind.</param>
            <returns>
            True, iff the given intrinsic kind represents an intrinsic operation
            that works on 64bit floats.
            </returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.MethodIntrinsicKindExtensions.IsIntIntrinsic(ILGPU.Compiler.Intrinsic.MathIntrinsicKind)">
            <summary>
            Returns true iff the given intrinsic kind represents an intrinsic operation
            that works on integers.
            </summary>
            <param name="kind">The intrinsic kind.</param>
            <returns>
            True, iff the given intrinsic kind represents an intrinsic operation
            that works on 32bit floats.
            </returns>
        </member>
        <member name="M:ILGPU.Compiler.Intrinsic.MethodIntrinsicKindExtensions.ResolveIntrinsicKind(ILGPU.Compiler.Intrinsic.MathIntrinsicKind,System.Boolean)">
            <summary>
            Resolves the appropriate intrinsic kind for the desired scenario.
            </summary>
            <param name="kind">The intrinsic kind.</param>
            <param name="force32BitMath">True, iff the intrinsic should treat f64 as f32.</param>
            <returns>The resolved intrinsic kind.</returns>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.MathIntrinsicAttribute">
            <summary>
            Marks math methods that are builtin.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.MathIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.MemoryFenceIntrinsicAttribute">
            <summary>
            Marks memory-fence methods that are builtin.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.MemoryFenceIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.Intrinsic.WarpIntrinsicAttribute">
            <summary>
            Marks warp methods that are builtin.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Intrinsic.WarpIntrinsicAttribute.IntrinsicKind">
            <summary>
            Returns the assigned intrinsic kind.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.Value">
            <summary>
            Represents an abstract value entry on the abstract execution stack.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.Value.#ctor(System.Type,ILGPU.LLVM.LLVMValueRef)">
            <summary>
            Constructs a new stack entry with the given arguments.
            </summary>
            <param name="type">The .Net type of the entry.</param>
            <param name="value">The LLVM value of the entry.</param>
        </member>
        <member name="P:ILGPU.Compiler.Value.ValueType">
            <summary>
            Returns the .Net type of this entry.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Value.LLVMValue">
            <summary>
            Returns the LLVM value of this entry.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Value.IsValid">
            <summary>
            Returns true if the value has a valid reference.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.Value.BasicValueType">
            <summary>
            Returns the basic-value type of this value.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.Value.Equals(ILGPU.Compiler.Value)">
            <summary>
            Returns true iff the given value is equal to the current value.
            </summary>
            <param name="other">The other value.</param>
            <returns>True, iff the given value is equal to the current value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Value.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current value.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Value.GetHashCode">
            <summary>
            Returns the hash code of this value.
            </summary>
            <returns>The hash code of this value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Value.ToString">
            <summary>
            Returns the string representation of this value.
            </summary>
            <returns>The string representation of this value.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Value.op_Equality(ILGPU.Compiler.Value,ILGPU.Compiler.Value)">
            <summary>
            Returns true iff the first and second values are the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second values are the same.</returns>
        </member>
        <member name="M:ILGPU.Compiler.Value.op_Inequality(ILGPU.Compiler.Value,ILGPU.Compiler.Value)">
            <summary>
            Returns true iff the first and second values are not the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second values are not the same.</returns>
        </member>
        <member name="T:ILGPU.Compiler.VariableRefType">
            <summary>
            The type of a single variable reference.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.VariableRefType.Argument">
            <summary>
            Represents a reference to a function argument.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.VariableRefType.Local">
            <summary>
            Represents a reference to a local variable.
            </summary>
        </member>
        <member name="F:ILGPU.Compiler.VariableRefType.Stack">
            <summary>
            Represents a reference to a stack slot.
            </summary>
        </member>
        <member name="T:ILGPU.Compiler.VariableRef">
            <summary>
            Represents a single variable.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.VariableRef.#ctor(System.Int32,ILGPU.Compiler.VariableRefType)">
            <summary>
            Constructs a new variable entry. 
            </summary>
            <param name="index">Index of the variable.</param>
            <param name="refType">Type of this variable reference.</param>
        </member>
        <member name="P:ILGPU.Compiler.VariableRef.Index">
            <summary>
            Returns the index of the variable.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.VariableRef.RefType">
            <summary>
            Returns the variable-reference type.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.VariableRef.Equals(ILGPU.Compiler.VariableRef)">
            <summary>
            Returns true iff the given variable ref is equal to the current one.
            </summary>
            <param name="other">The other variable reference.</param>
            <returns>True, iff the given variable ref is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Compiler.VariableRef.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given variable ref is equal to the current one.</returns>
        </member>
        <member name="M:ILGPU.Compiler.VariableRef.GetHashCode">
            <summary>
            Returns the hash code of this variable reference.
            </summary>
            <returns>The hash code of this variable reference.</returns>
        </member>
        <member name="M:ILGPU.Compiler.VariableRef.ToString">
            <summary>
            Returns the string representation of this variable.
            </summary>
            <returns>The string representation of this variable.</returns>
        </member>
        <member name="M:ILGPU.Compiler.VariableRef.op_Equality(ILGPU.Compiler.VariableRef,ILGPU.Compiler.VariableRef)">
            <summary>
            Returns true iff both variable references represent the same variable.
            </summary>
            <param name="first">The first reference.</param>
            <param name="second">The second reference.</param>
            <returns>True, iff both variable references represent the same variable.</returns>
        </member>
        <member name="M:ILGPU.Compiler.VariableRef.op_Inequality(ILGPU.Compiler.VariableRef,ILGPU.Compiler.VariableRef)">
            <summary>
            Returns true iff both variable references do not represent the same variable.
            </summary>
            <param name="first">The first reference.</param>
            <param name="second">The second reference.</param>
            <returns>True, iff both variable references do not represent the same variable.</returns>
        </member>
        <member name="T:ILGPU.Compiler.MappedType">
            <summary>
            Represents a .Net type that was mapped to a LLVM type.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Compiler.MappedType.fieldOffsets">
            <summary>
            Maps field information to offsets.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.MappedType.#ctor(System.Type,ILGPU.LLVM.LLVMTypeRef,System.Int32,System.Collections.Generic.Dictionary{System.Reflection.FieldInfo,System.Int32})">
            <summary>
            Constructs a new mapped type.
            </summary>
            <param name="type">The .Net type.</param>
            <param name="llvmType">The LLVM type.</param>
            <param name="numLLVMTypeElements">The number of LLVM-struct-type elements.</param>
            <param name="fieldOffsets">The individual field offsets.</param>
        </member>
        <member name="P:ILGPU.Compiler.MappedType.ManagedType">
            <summary>
            Returns the .Net type.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.MappedType.LLVMType">
            <summary>
            Returns the corresponding LLVM type.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.MappedType.NumFields">
            <summary>
            Returns the number of fields.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.MappedType.Fields">
            <summary>
            Returns the stored fields.
            </summary>
        </member>
        <member name="P:ILGPU.Compiler.MappedType.Item(System.Reflection.FieldInfo)">
            <summary>
            Resolves the offset of the given field.
            </summary>
            <param name="field">The field.</param>
            <returns>The target offset.</returns>
        </member>
        <member name="P:ILGPU.Compiler.MappedType.NumLLVMTypeElements">
            <summary>
            Returns the total number of LLVM struct elements.
            </summary>
        </member>
        <member name="M:ILGPU.Compiler.MappedType.TryResolveOffset(System.Reflection.FieldInfo,System.Int32@)">
            <summary>
            Tries to resolve an offset for the given field.
            </summary>
            <param name="info">The field.</param>
            <param name="offset">The target offset.</param>
            <returns>True, if this field can be resolved to an offset.</returns>
        </member>
        <member name="M:ILGPU.Compiler.MappedType.ToString">
            <summary>
            Returns the string representation of this type.
            </summary>
            <returns>The string representation of this type.</returns>
        </member>
        <member name="T:ILGPU.CompilationContext">
            <summary>
            Represents a single compilation context. It stores information about
            all methods that are currently being processed.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.CompilationContext.#ctor">
            <summary>
            Constructs a new compilation context.
            </summary>
        </member>
        <member name="P:ILGPU.CompilationContext.NotSupportedILInstructionHandler">
            <summary>
            Returns an event handler that can the handle <see cref="E:ILGPU.Compiler.DisassemblerContext.NotSupportedILInstruction"/>
            event of a <see cref="T:ILGPU.Compiler.DisassemblerContext"/>.
            </summary>
        </member>
        <member name="P:ILGPU.CompilationContext.CurrentMethod">
            <summary>
            Returns the current method that is being processed.
            </summary>
        </member>
        <member name="M:ILGPU.CompilationContext.EnterMethod(System.Reflection.MethodBase)">
            <summary>
            Enters the given method.
            </summary>
            <param name="method">The method to enter.</param>
        </member>
        <member name="M:ILGPU.CompilationContext.LeaveMethod(System.Reflection.MethodBase)">
            <summary>
            Leaves the given method.
            </summary>
            <param name="method">The method to leave.</param>
        </member>
        <member name="M:ILGPU.CompilationContext.ComputeCallStackString(System.Text.StringBuilder,System.String)">
            <summary>
            Computes a new string containing call-stack information.
            </summary>
            <param name="target">The target builder.</param>
            <param name="prefix">The prefix of each call-stack entry.</param>
        </member>
        <member name="M:ILGPU.CompilationContext.GetArgumentException(System.String,System.Object[])">
            <summary>
            Constructs a new <see cref="T:System.ArgumentException"/> based on the given
            message, the formatting arguments and the current general compilation information.
            </summary>
            <param name="message">The main content of the error message.</param>
            <param name="args">The formatting arguments.</param>
            <returns>A new <see cref="T:System.ArgumentException"/>.</returns>
        </member>
        <member name="M:ILGPU.CompilationContext.GetNotSupportedException(System.String,System.Object[])">
            <summary>
            Constructs a new <see cref="T:System.NotSupportedException"/> based on the given
            message, the formatting arguments and the current general compilation information.
            </summary>
            <param name="message">The main content of the error message.</param>
            <param name="args">The formatting arguments.</param>
            <returns>A new <see cref="T:System.NotSupportedException"/>.</returns>
        </member>
        <member name="M:ILGPU.CompilationContext.GetInvalidOperationException(System.String,System.Object[])">
            <summary>
            Constructs a new <see cref="T:System.InvalidOperationException"/> based on the given
            message, the formatting arguments and the current general compilation information.
            </summary>
            <param name="message">The main content of the error message.</param>
            <param name="args">The formatting arguments.</param>
            <returns>A new <see cref="T:System.InvalidOperationException"/>.</returns>
        </member>
        <member name="M:ILGPU.CompilationContext.GetInvalidILCodeException">
            <summary>
            Constructs a new <see cref="T:System.InvalidOperationException"/> that refers to an
            invalid IL code.
            </summary>
            <returns>A new <see cref="T:System.InvalidOperationException"/>.</returns>
        </member>
        <member name="M:ILGPU.CompilationContext.GetException``1(System.String,System.Object[])">
            <summary>
            Constructs a new exception of the given type based on the given
            message, the formatting arguments and the current general compilation information.
            </summary>
            <typeparam name="TException">The exception type.</typeparam>
            <param name="message">The main content of the error message.</param>
            <param name="args">The formatting arguments.</param>
            <returns>A new exception of type <typeparamref name="TException"/>.</returns>
        </member>
        <member name="T:ILGPU.CompileUnit">
            <summary>
            Represents a single compile unit (a bunch of compiled functions).
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.CompileUnit.MaxLLVMNameLength">
            <summary>
            The maximum length of LLVM names.
            </summary>
        </member>
        <member name="F:ILGPU.CompileUnit.LLVMNameRegex">
            <summary>
            The replacement regex for LLVM names.
            </summary>
        </member>
        <member name="M:ILGPU.CompileUnit.#ctor(ILGPU.Context,System.String,ILGPU.Backends.Backend,System.Collections.Generic.IReadOnlyList{ILGPU.Compiler.Intrinsic.IDeviceFunctions},System.Collections.Generic.IReadOnlyList{ILGPU.Compiler.Intrinsic.IDeviceTypes},ILGPU.CompileUnitFlags)">
            <summary>
            Constructs a new compile unit using the provided method.
            </summary>
            <param name="context">The parent context.</param>
            <param name="name">The name of the unit.</param>
            <param name="backend">The final backend.</param>
            <param name="deviceFunctions">The device functions to use.</param>
            <param name="deviceTypes">The device types to use.</param>
            <param name="flags">The compile-unit flags.</param>
        </member>
        <member name="P:ILGPU.CompileUnit.Name">
            <summary>
            Returns the name of this unit.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.Flags">
            <summary>
            Returns the associated compile-unit flags.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.Force32BitFloats">
            <summary>
            Returns true iff the current flags contain the <see cref="F:ILGPU.CompileUnitFlags.Force32BitFloats"/> flag.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.Backend">
            <summary>
            Returns the associated backend.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.Platform">
            <summary>
            Returns the target platform.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.LLVMContext">
            <summary>
            Returns the native LLVM context.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.LLVMModule">
            <summary>
            Returns the native LLVM module.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.IntPtrType">
            <summary>
            Returns the native int-pointer type.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.NativeIntPtrType">
            <summary>
            Returns the native LLVM int-pointer type.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.Methods">
            <summary>
            Returns all compiled methods.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.Types">
            <summary>
            Returns all compiled types.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.CodeGenFunctionPassManager">
            <summary>
            Returns a function-pass manager that is run on new generated methods.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.DeviceFunctions">
            <summary>
            Returns the custom device-function handlers.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.DeviceTypes">
            <summary>
            Returns the custom device-type handlers.
            </summary>
        </member>
        <member name="P:ILGPU.CompileUnit.CompilationContext">
            <summary>
            Returns the current compilation context.
            </summary>
        </member>
        <member name="M:ILGPU.CompileUnit.RegisterDeviceFunctions(ILGPU.Compiler.Intrinsic.IDeviceFunctions)">
            <summary>
            Registers the given device-function handlers.
            </summary>
            <param name="handler">The device-function handler to register.</param>
        </member>
        <member name="M:ILGPU.CompileUnit.RegisterDeviceTypes(ILGPU.Compiler.Intrinsic.IDeviceTypes)">
            <summary>
            Registers the given device-type handlers.
            </summary>
            <param name="handler">The device-type handler to register.</param>
        </member>
        <member name="M:ILGPU.CompileUnit.HasFlags(ILGPU.CompileUnitFlags)">
            <summary>
            Returns true iff the given flags are set.
            </summary>
            <param name="flags">The flags to check.</param>
            <returns>True, iff the given flags are set.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.RemapIntrinsic(ILGPU.Compiler.Intrinsic.InvocationContext)">
            <summary>
            Tries to remap a method invocation to another invocation.
            </summary>
            <param name="context">The invocation context.</param>
            <returns>True, iff the method was handled successfully.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.HandleIntrinsic(ILGPU.Compiler.Intrinsic.InvocationContext,System.Nullable{ILGPU.Compiler.Value}@)">
            <summary>
            Tries to handle a method invocation in a custom device-function handler.
            </summary>
            <param name="context">The invocation context.</param>
            <param name="result">The resulting stack value.</param>
            <returns>True, iff the method was handled successfully.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetObjectType(System.Type)">
            <summary>
            Converts the given class or struct type into a corresponding LLVM type.
            </summary>
            <param name="type">The type to convert.</param>
            <returns>The mapped LLVM type.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetFixedBufferType(System.Runtime.CompilerServices.FixedBufferAttribute,System.Type)">
            <summary>
            Converts the given fixed-buffer struct into a corresponding LLVM type.
            </summary>
            <param name="fba">The fixed-buffer attribute.</param>
            <param name="type">The type to convert.</param>
            <returns>The mapped LLVM type.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetStructType(System.Type)">
            <summary>
            Converts the given struct or class type into a corresponding LLVM type.
            </summary>
            <param name="type">The type to convert.</param>
            <returns>The mapped LLVM type.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetNullableType(System.Type,System.Type)">
            <summary>
            Converts the given nullable type into a corresponding LLVM type.
            </summary>
            <param name="type">The nullable type to convert.</param>
            <param name="baseType">The encapsulated type of the given nullable type.</param>
            <returns>The mapped LLVM type.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetArrayType(System.Type)">
            <summary>
            Converts the given array type into a corresponding LLVM type.
            </summary>
            <param name="type">The array type to convert.</param>
            <returns>The mapped LLVM type.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.TryGetBasicType(ILGPU.BasicValueType,ILGPU.LLVM.LLVMTypeRef@)">
            <summary>
            Tries to convert the given basic-value type to a LLVM type.
            </summary>
            <param name="valueType">The basic-value type to convert.</param>
            <param name="type">The target type.</param>
            <returns>True, iff the basic-value type could be converted.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetType(ILGPU.BasicValueType)">
            <summary>
            Converts the given basic-value type into an LLVM type.
            </summary>
            <param name="valueType"></param>
            <returns>The converted LLVM type.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetType(System.Type)">
            <summary>
            Converts the given .Net type into the corresponding LLVM type.
            </summary>
            <param name="type">The type to convert.</param>
            <returns>The converted LLVM type.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetType(System.Reflection.MethodBase)">
            <summary>
            Returns a LLVM type that represents the signature of the method.
            </summary>
            <param name="method">The method that has to be converted to a LLVM type.</param>
            <returns>A LLVM type that represents the signature of the method</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetMethod(System.Reflection.MethodBase,System.Boolean)">
            <summary>
            Returns a LLVM method that represents the given method.
            </summary>
            <param name="methodBase">The method to compile.</param>
            <param name="create">True, iff the method should be created in case of an unknown method.</param>
            <returns>The corrensponding LLVM method.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetMethod(System.Reflection.MethodBase)">
            <summary>
            Returns a LLVM method that represents the given method.
            </summary>
            <param name="methodBase">The method to compile.</param>
            <returns>The corrensponding LLVM method.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetValue(System.Type,System.Object)">
            <summary>
            Converts a .Net value into its LLVM representation.
            </summary>
            <param name="type">The type of the value to convert.</param>
            <param name="value">The value to convert.</param>
            <returns>The converted LLVM value.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetObjectValue(ILGPU.Compiler.MappedType,System.Object)">
            <summary>
            Converts a .Net object value into its LLVM representation.
            </summary>
            <param name="type">The type of the value to convert.</param>
            <param name="instanceValue">The .Net instance of the value to convert.</param>
            <returns>The converted LLVM value.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.Verify">
            <summary>
            Verifies this unit.
            </summary>
        </member>
        <member name="M:ILGPU.CompileUnit.Optimize">
            <summary>
            Optimizes all methods in this module.
            </summary>
        </member>
        <member name="M:ILGPU.CompileUnit.GetLLVMName(System.String,System.String)">
            <summary>
            Creates a new unique name in the LLVM world based on the primary
            <paramref name="name"/> and the given <paramref name="category"/>.
            </summary>
            <param name="name">The primary name.</param>
            <param name="category">The category of the given name (like Type or Method).</param>
            <returns>A new composed name in the LLVM world.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetLLVMName(System.Reflection.MethodBase,System.String)">
            <summary>
            Creates a new unique name for the given method in the LLVM world.
            </summary>
            <param name="methodBase">The method.</param>
            <param name="category">The category of the given method (like Method or Kernel).</param>
            <returns>A name for the given method in the LLVM world.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetLLVMName(System.Reflection.MethodBase)">
            <summary>
            Creates a new unique name for the given method in the LLVM world.
            </summary>
            <param name="methodBase">The method.</param>
            <returns>A name for the given method in the LLVM world.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.GetLLVMName(System.Type)">
            <summary>
            Creates a new unique name for the given type in the LLVM world.
            </summary>
            <param name="type">The Type.</param>
            <returns>A name for the given type in the LLVM world.</returns>
        </member>
        <member name="M:ILGPU.CompileUnit.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.CompileUnitFlags">
            <summary>
            Represents compile-unit flags.
            </summary>
        </member>
        <member name="F:ILGPU.CompileUnitFlags.None">
            <summary>
            Default flags.
            </summary>
        </member>
        <member name="F:ILGPU.CompileUnitFlags.EnableAssertions">
            <summary>
            Enables assertions.
            </summary>
        </member>
        <member name="F:ILGPU.CompileUnitFlags.InlineMutableStaticFieldValues">
            <summary>
            Loads from mutable static fields are rejected by default.
            However, their current values can be inlined during jit
            compilation. Adding this flags causes values from mutable
            static fields to be inlined instead of rejected.
            </summary>
        </member>
        <member name="F:ILGPU.CompileUnitFlags.IgnoreStaticFieldStores">
            <summary>
            Stores to static fields are rejected by default.
            Adding this flag causes stores to static fields
            to be silently ignored instead of rejected.
            </summary>
        </member>
        <member name="F:ILGPU.CompileUnitFlags.FastMath">
            <summary>
            Represents fast math compilation flags.
            </summary>
        </member>
        <member name="F:ILGPU.CompileUnitFlags.Force32BitFloats">
            <summary>
            Forces the use of 32bit floats instead of 64bit floats.
            This affects all math operations (like Math.Sqrt(double)) and
            all 64bit float conversions. This settings might improve
            performance dramatically but might cause precision loss.
            </summary>
        </member>
        <member name="F:ILGPU.CompileUnitFlags.UseGPUMath">
            <summary>
            Forces the use of the gpu-math library in all possible
            situations. This applies to default floating-point operations
            like x/y or x*y.
            </summary>
        </member>
        <member name="F:ILGPU.CompileUnitFlags.PTXFlushDenormalsToZero">
            <summary>
            Flushes denormals in floats to zero.
            </summary>
        </member>
        <member name="T:ILGPU.Context">
            <summary>
            Represents the main ILGPU context.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Context.#ctor">
            <summary>
            Constructs a new ILGPU main context
            </summary>
        </member>
        <member name="P:ILGPU.Context.LLVMContext">
            <summary>
            Returns the main LLVM context.
            </summary>
        </member>
        <member name="P:ILGPU.Context.OptimizeModulePassManager">
            <summary>
            Returns an O3 optimized module-pass manager.
            </summary>
        </member>
        <member name="P:ILGPU.Context.KernelModulePassManager">
            <summary>
            Returns a optimized module-pass manager for final kernel generation.
            </summary>
        </member>
        <member name="P:ILGPU.Context.DeviceFunctions">
            <summary>
            Returns the custom device-function handlers.
            </summary>
        </member>
        <member name="P:ILGPU.Context.DeviceTypes">
            <summary>
            Returns the custom device-type handlers.
            </summary>
        </member>
        <member name="M:ILGPU.Context.RegisterDeviceFunctions(ILGPU.Compiler.Intrinsic.IDeviceFunctions)">
            <summary>
            Registers the given device-function handlers.
            </summary>
            <param name="handler">The device-function handler to register.</param>
        </member>
        <member name="M:ILGPU.Context.RegisterDeviceTypes(ILGPU.Compiler.Intrinsic.IDeviceTypes)">
            <summary>
            Registers the given device-type handlers.
            </summary>
            <param name="handler">The device-type handler to register.</param>
        </member>
        <member name="M:ILGPU.Context.CreateCompileUnit(ILGPU.Backends.Backend)">
            <summary>
            Creates a new compile unit that targets the given backend.
            </summary>
            <param name="backend">The target backend.</param>
            <returns>The created compile unit.</returns>
        </member>
        <member name="M:ILGPU.Context.CreateCompileUnit(ILGPU.Backends.Backend,ILGPU.CompileUnitFlags)">
            <summary>
            Creates a new compile unit that targets the given backend.
            </summary>
            <param name="backend">The target backend.</param>
            <param name="unitFlags">The compile-unit flags.</param>
            <returns>The created compile unit.</returns>
        </member>
        <member name="M:ILGPU.Context.CreateCompileUnit(ILGPU.Backends.Backend,ILGPU.CompileUnitFlags,System.String)">
            <summary>
            Creates a new compile unit that targets the given backend.
            </summary>
            <param name="backend">The target backend.</param>
            <param name="unitFlags">The compile-unit flags.</param>
            <param name="name">The name of the compile unit.</param>
            <returns>The created compile unit.</returns>
        </member>
        <member name="M:ILGPU.Context.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.GPUMath">
            <summary>
            Represents math helpers for general double/float
            math operations that are supported on the gpu.
            </summary>
        </member>
        <member name="F:ILGPU.GPUMath.E">
            <summary>
            The E constant.
            </summary>
        </member>
        <member name="F:ILGPU.GPUMath.Log2E">
            <summary>
            The log2(E) constant.
            </summary>
        </member>
        <member name="F:ILGPU.GPUMath.Log10E">
            <summary>
            The log10(E) constant.
            </summary>
        </member>
        <member name="F:ILGPU.GPUMath.Ln2">
            <summary>
            The ln(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.GPUMath.Ln10">
            <summary>
            The ln(10) constant.
            </summary>
        </member>
        <member name="F:ILGPU.GPUMath.PI">
            <summary>
            The PI constant.
            </summary>
        </member>
        <member name="F:ILGPU.GPUMath.PIHalf">
            <summary>
            The PI/2 constant.
            </summary>
        </member>
        <member name="F:ILGPU.GPUMath.PIFourth">
            <summary>
            The PI/4 constant.
            </summary>
        </member>
        <member name="F:ILGPU.GPUMath.OneOverPI">
            <summary>
            The 1/PI constant.
            </summary>
        </member>
        <member name="F:ILGPU.GPUMath.TwoOverPI">
            <summary>
            The 2/PI constant.
            </summary>
        </member>
        <member name="F:ILGPU.GPUMath.Sqrt2">
            <summary>
            The sqrt(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.GPUMath.OneOverSqrt2">
            <summary>
            The 1/sqrt(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.GPUMath.OneThird">
            <summary>
            The 1.0f / 3.0f constant.
            </summary>
        </member>
        <member name="P:ILGPU.GPUMath.MathFunctionMapping">
            <summary>
            Contains all available math functions that can be resolved by
            their <see cref="T:ILGPU.Compiler.Intrinsic.MathIntrinsicKind"/> value.
            </summary>
        </member>
        <member name="M:ILGPU.GPUMath.IsNaN(System.Double)">
            <summary>
            Returns true iff the given value is NaN.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is NaN.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.IsNaN(System.Single)">
            <summary>
            Returns true iff the given value is NaN.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is NaN.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.IsInfinity(System.Double)">
            <summary>
            Returns true iff the given value is infinity.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is infinity.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.IsInfinity(System.Single)">
            <summary>
            Returns true iff the given value is infinity.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is infinity.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Mul(System.Double,System.Double)">
            <summary>
            Computes x*y.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>x*y.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Mul(System.Single,System.Single)">
            <summary>
            Computes x*y.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>x*y.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Div(System.Double,System.Double)">
            <summary>
            Computes x/y.
            </summary>
            <param name="x">The nominator.</param>
            <param name="y">The denominator.</param>
            <returns>x/y.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Div(System.Single,System.Single)">
            <summary>
            Computes x/y.
            </summary>
            <param name="x">The nominator.</param>
            <param name="y">The denominator.</param>
            <returns>x/y.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Rem(System.Double,System.Double)">
            <summary>
            Computes x%y.
            </summary>
            <param name="x">The nominator.</param>
            <param name="y">The denominator.</param>
            <returns>x%y.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Rem(System.Single,System.Single)">
            <summary>
            Computes x%y.
            </summary>
            <param name="x">The nominator.</param>
            <param name="y">The denominator.</param>
            <returns>x%y.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Sqrt(System.Double)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Sqrt(System.Single)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Rsqrt(System.Double)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>1/sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Rsqrt(System.Single)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>1/sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Cbrt(System.Double)">
            <summary>
            Computes value^(1/3).
            </summary>
            <param name="value">The value.</param>
            <returns>value^(1/3).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Cbrt(System.Single)">
            <summary>
            Computes value^(1/3).
            </summary>
            <param name="value">The value.</param>
            <returns>value^(1/3).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Rcbrt(System.Double)">
            <summary>
            Computes 1.value^(1/3).
            </summary>
            <param name="value">The value.</param>
            <returns>1.value^(1/3).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Rcbrt(System.Single)">
            <summary>
            Computes value^(1/3).
            </summary>
            <param name="value">The value.</param>
            <returns>value^(1/3).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Asin(System.Double)">
            <summary>
            Computes asin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>asin(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Asin(System.Single)">
            <summary>
            Computes asin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>asin(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Sin(System.Double)">
            <summary>
            Computes sin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sin(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Sin(System.Single)">
            <summary>
            Computes sin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sin(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Sinh(System.Double)">
            <summary>
            Computes sinh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sinh(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Sinh(System.Single)">
            <summary>
            Computes sinh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sinh(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Acos(System.Double)">
            <summary>
            Computes acos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>acos(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Acos(System.Single)">
            <summary>
            Computes acos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>acos(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Cos(System.Double)">
            <summary>
            Computes cos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cos(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Cos(System.Single)">
            <summary>
            Computes cos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cos(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Cosh(System.Double)">
            <summary>
            Computes cosh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cosh(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Cosh(System.Single)">
            <summary>
            Computes cosh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cosh(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Atan(System.Double)">
            <summary>
            Computes atan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>atan(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Atan(System.Single)">
            <summary>
            Computes atan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>atan(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Atan2(System.Double,System.Double)">
            <summary>
            Computes atan2(x, y).
            </summary>
            <param name="x">The x coordinate of a point.</param>
            <param name="y">The y coordinate of a point.</param>
            <returns>atan2(x, y).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Atan2(System.Single,System.Single)">
            <summary>
            Computes atan2(x, y).
            </summary>
            <param name="x">The x coordinate of a point.</param>
            <param name="y">The y coordinate of a point.</param>
            <returns>atan2(x, y).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Tan(System.Double)">
            <summary>
            Computes tan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tan(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Tan(System.Single)">
            <summary>
            Computes tan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tan(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Tanh(System.Double)">
            <summary>
            Computes tanh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tanh(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Tanh(System.Single)">
            <summary>
            Computes tanh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tanh(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.SinCos(System.Double,System.Double@,System.Double@)">
            <summary>
            Computes sin(value) and cos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <param name="sin">The result of sin(value).</param>
            <param name="cos">The result of cos(value).</param>
            <returns>tanh(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.SinCos(System.Single,System.Single@,System.Single@)">
            <summary>
            Computes sin(value) and cos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <param name="sin">The result of sin(value).</param>
            <param name="cos">The result of cos(value).</param>
            <returns>tanh(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Pow(System.Double,System.Double)">
            <summary>
            Computes basis^exp.
            </summary>
            <param name="base">The basis.</param>
            <param name="exp">The exponent.</param>
            <returns>pow(basis, exp).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Pow(System.Single,System.Single)">
            <summary>
            Computes basis^exp.
            </summary>
            <param name="base">The basis.</param>
            <param name="exp">The exponent.</param>
            <returns>pow(basis, exp).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Exp(System.Double)">
            <summary>
            Computes exp(value).
            </summary>
            <param name="value">The value.</param>
            <returns>exp(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Exp(System.Single)">
            <summary>
            Computes exp(value).
            </summary>
            <param name="value">The value.</param>
            <returns>exp(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Exp10(System.Double)">
            <summary>
            Computes 10^value.
            </summary>
            <param name="value">The value.</param>
            <returns>10^value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Exp10(System.Single)">
            <summary>
            Computes exp(value).
            </summary>
            <param name="value">The value.</param>
            <returns>exp(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Floor(System.Double)">
            <summary>
            Computes floor(value).
            </summary>
            <param name="value">The value.</param>
            <returns>floor(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Floor(System.Single)">
            <summary>
            Computes floor(value).
            </summary>
            <param name="value">The value.</param>
            <returns>floor(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Ceiling(System.Double)">
            <summary>
            Computes ceiling(value).
            </summary>
            <param name="value">The value.</param>
            <returns>ceiling(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Ceiling(System.Single)">
            <summary>
            Computes ceiling(value).
            </summary>
            <param name="value">The value.</param>
            <returns>ceiling(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Log(System.Double,System.Double)">
            <summary>
            Computes log_newBase(value) to base newBase.
            </summary>
            <param name="value">The value.</param>
            <param name="newBase">The desired base.</param>
            <returns>log_newBase(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Log(System.Single,System.Single)">
            <summary>
            Computes log_newBase(value) to base newBase.
            </summary>
            <param name="value">The value.</param>
            <param name="newBase">The desired base.</param>
            <returns>log_newBase(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Log(System.Double)">
            <summary>
            Computes log(value) to base e.
            </summary>
            <param name="value">The value.</param>
            <returns>log(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Log(System.Single)">
            <summary>
            Computes log(value) to base e.
            </summary>
            <param name="value">The value.</param>
            <returns>log(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Log10(System.Double)">
            <summary>
            Computes log10(value) to base 10.
            </summary>
            <param name="value">The value.</param>
            <returns>log10(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Log10(System.Single)">
            <summary>
            Computes log10(value) to base 10.
            </summary>
            <param name="value">The value.</param>
            <returns>log10(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Log2(System.Double)">
            <summary>
            Computes log2(value) to base 2.
            </summary>
            <param name="value">The value.</param>
            <returns>log2(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Log2(System.Single)">
            <summary>
            Computes log2(value) to base 2.
            </summary>
            <param name="value">The value.</param>
            <returns>log2(value).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Abs(System.Double)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Abs(System.Single)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Abs(System.SByte)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Abs(System.Int16)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Abs(System.Int32)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Abs(System.Int64)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Min(System.Double,System.Double)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Min(System.Single,System.Single)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Min(System.SByte,System.SByte)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Min(System.Int16,System.Int16)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Min(System.Int32,System.Int32)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Min(System.Int64,System.Int64)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Min(System.Byte,System.Byte)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Min(System.UInt16,System.UInt16)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Min(System.UInt32,System.UInt32)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Min(System.UInt64,System.UInt64)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Max(System.Double,System.Double)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Max(System.Single,System.Single)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Max(System.SByte,System.SByte)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Max(System.Int16,System.Int16)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Max(System.Int32,System.Int32)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Max(System.Int64,System.Int64)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Max(System.Byte,System.Byte)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Max(System.UInt16,System.UInt16)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Max(System.UInt32,System.UInt32)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Max(System.UInt64,System.UInt64)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.GPUMath.RoundToEven(System.Double)">
            <summary>
            Rounds the value to the nearest even value.
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest even value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.RoundToEven(System.Single)">
            <summary>
            Rounds the value to the nearest even value.
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest even value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.RoundAwayFromZero(System.Double)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded away from zero).
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.RoundAwayFromZero(System.Single)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded away from zero).
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Round(System.Double,System.MidpointRounding)">
            <summary>
            Rounds the given value according to the provided rounding mode.
            </summary>
            <param name="value">The value.</param>
            <param name="rounding">The rounding mode.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Round(System.Single,System.MidpointRounding)">
            <summary>
            Rounds the given value according to the provided rounding mode.
            </summary>
            <param name="value">The value.</param>
            <param name="rounding">The rounding mode.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Truncate(System.Double)">
            <summary>
            Truncates the given value.
            </summary>
            <param name="value">The value to truncate.</param>
            <returns>The truncated value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Truncate(System.Single)">
            <summary>
            Truncates the given value.
            </summary>
            <param name="value">The value to truncate.</param>
            <returns>The truncated value.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Sign(System.Double)">
            <summary>
            Computes the sign of the provided value.
            Sign will return 0 for NaN, Infitity or 0 values.
            </summary>
            <param name="value">The value.</param>
            <returns>-1 for negative value, 1 for positive values, and 0 for
            0, NaN or Infinity.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.Sign(System.Single)">
            <summary>
            Computes the sign of the provided value.
            Sign will return 0 for NaN, Infitity or 0 values.
            </summary>
            <param name="value">The value.</param>
            <returns>-1 for negative value, 1 for positive values, and 0 for
            0, NaN or Infinity.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.DegToRad(System.Double)">
            <summary>
            Converts the given value in degrees to radians.
            </summary>
            <param name="degrees">The value in degrees to convert.</param>
            <returns>The converted value in radians.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.DegToRad(System.Single)">
            <summary>
            Converts the given value in degrees to radians.
            </summary>
            <param name="degrees">The value in degrees to convert.</param>
            <returns>The converted value in radians.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.RadToDeg(System.Double)">
            <summary>
            Converts the given value in radians to degrees.
            </summary>
            <param name="radians">The value in radians to convert.</param>
            <returns>The converted value in degrees.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.RadToDeg(System.Single)">
            <summary>
            Converts the given value in radians to degrees.
            </summary>
            <param name="radians">The value in radians to convert.</param>
            <returns>The converted value in degrees.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.DivRoundDown(System.Int32,System.Int32)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            down to zero.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded to zero.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.DivRoundUp(System.Int32,System.Int32)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            up (away from zero).
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded up (away from zero).</returns>
        </member>
        <member name="M:ILGPU.GPUMath.DivRoundDown(System.Int64,System.Int64)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            down to zero.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded to zero.</returns>
        </member>
        <member name="M:ILGPU.GPUMath.DivRoundUp(System.Int64,System.Int64)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            up (away from zero).
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded up (away from zero).</returns>
        </member>
        <member name="T:ILGPU.Grid">
            <summary>
            Contains general grid functions.
            </summary>
        </member>
        <member name="P:ILGPU.Grid.Dimension">
            <summary>
            Returns the dimension of the scheduled thread grid.
            </summary>
            <returns>The grid dimension.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.GroupedIndex)">
            <summary>
            Computes the global index of a grouped index (gridIdx, groupIdx).
            </summary>
            <param name="index">The grouped index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.GroupedIndex2)">
            <summary>
            Computes the global index of a grouped index (gridIdx, groupIdx).
            </summary>
            <param name="index">The grouped index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.GroupedIndex3)">
            <summary>
            Computes the global index of a grouped index (gridIdx, groupIdx).
            </summary>
            <param name="index">The grouped index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.Index,ILGPU.Index)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.Grid.ComputeGlobalIndex(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Computes the global index of a given gridIdx and a groupIdx.
            </summary>
            <param name="gridIdx">The grid index.</param>
            <param name="groupIdx">The group index.</param>
            <returns>The computes global index.</returns>
        </member>
        <member name="T:ILGPU.Group">
            <summary>
            Contains general grid functions.
            </summary>
        </member>
        <member name="P:ILGPU.Group.Dimension">
            <summary>
            Returns the dimension of the number of threads per group per grid element
            in the scheduled thread grid.
            </summary>
            <returns>The thread dimension for a single group.</returns>
        </member>
        <member name="M:ILGPU.Group.Barrier">
            <summary>
            Executes a thread barrier.
            </summary>
        </member>
        <member name="M:ILGPU.Group.BarrierPopCount(System.Boolean)">
            <summary>
            Executes a thread barrier and returns the number of threads for which
            the predicate evaluated to true.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>The number of threads for which the predicate evaluated to true.</returns>
        </member>
        <member name="M:ILGPU.Group.BarrierAnd(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true iff all threads in a block
            fullfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, iff all threads in a block fullfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Group.BarrierOr(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true iff any thread in a block
            fullfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, iff any thread in a block fullfills the predicate.</returns>
        </member>
        <member name="T:ILGPU.GroupedIndex">
            <summary>
            Represents a grouped thread 1D index.
            </summary>
        </member>
        <member name="M:ILGPU.GroupedIndex.#ctor(ILGPU.Index,ILGPU.Index)">
            <summary>
            Constructs a new grouped index.
            </summary>
            <param name="gridIdx">The global index.</param>
            <param name="groupIndex">The local index.</param>
        </member>
        <member name="P:ILGPU.GroupedIndex.GridIdx">
            <summary>
            Returns the global block idx.
            </summary>
        </member>
        <member name="P:ILGPU.GroupedIndex.GroupIdx">
            <summary>
            Returns the lock thread idx.
            </summary>
        </member>
        <member name="P:ILGPU.GroupedIndex.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="P:ILGPU.GroupedIndex.Size">
            <summary>
            Returns the size represented by this grouped index (GridIdx * GroupIdx).
            </summary>
        </member>
        <member name="M:ILGPU.GroupedIndex.ComputeGlobalIndex">
            <summary>
            Computes the global index of a grouped index (gridIdx, groupIdx).
            </summary>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex.Equals(ILGPU.GroupedIndex)">
            <summary>
            Returns true iff the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, iff the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex.op_Equality(ILGPU.GroupedIndex,ILGPU.GroupedIndex)">
            <summary>
            Returns true iff the first and second index are the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex.op_Inequality(ILGPU.GroupedIndex,ILGPU.GroupedIndex)">
            <summary>
            Returns true iff the first and second index are not the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second index are not the same.</returns>
        </member>
        <member name="T:ILGPU.GroupedIndex2">
            <summary>
            Represents a grouped thread 2D index.
            </summary>
        </member>
        <member name="M:ILGPU.GroupedIndex2.#ctor(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Constructs a new grouped index.
            </summary>
            <param name="gridIdx">The global index.</param>
            <param name="groupIndex">The local index.</param>
        </member>
        <member name="P:ILGPU.GroupedIndex2.GridIdx">
            <summary>
            Returns the global block idx.
            </summary>
        </member>
        <member name="P:ILGPU.GroupedIndex2.GroupIdx">
            <summary>
            Returns the lock thread idx.
            </summary>
        </member>
        <member name="P:ILGPU.GroupedIndex2.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="P:ILGPU.GroupedIndex2.Size">
            <summary>
            Returns the size represented by this grouped index (GridIdx * GroupIdx).
            </summary>
        </member>
        <member name="M:ILGPU.GroupedIndex2.ComputeGlobalIndex">
            <summary>
            Computes the global index of a grouped index (gridIdx, groupIdx).
            </summary>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex2.Equals(ILGPU.GroupedIndex2)">
            <summary>
            Returns true iff the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, iff the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex2.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex2.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex2.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex2.op_Equality(ILGPU.GroupedIndex2,ILGPU.GroupedIndex2)">
            <summary>
            Returns true iff the first and second index are the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex2.op_Inequality(ILGPU.GroupedIndex2,ILGPU.GroupedIndex2)">
            <summary>
            Returns true iff the first and second index are not the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second index are not the same.</returns>
        </member>
        <member name="T:ILGPU.GroupedIndex3">
            <summary>
            Represents a grouped thread 3D index.
            </summary>
        </member>
        <member name="M:ILGPU.GroupedIndex3.#ctor(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Constructs a new grouped index.
            </summary>
            <param name="gridIdx">The global index.</param>
            <param name="groupIndex">The local index.</param>
        </member>
        <member name="P:ILGPU.GroupedIndex3.GridIdx">
            <summary>
            Returns the global block idx.
            </summary>
        </member>
        <member name="P:ILGPU.GroupedIndex3.GroupIdx">
            <summary>
            Returns the lock thread idx.
            </summary>
        </member>
        <member name="P:ILGPU.GroupedIndex3.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="P:ILGPU.GroupedIndex3.Size">
            <summary>
            Returns the size represented by this grouped index (GridIdx * GroupIdx).
            </summary>
        </member>
        <member name="M:ILGPU.GroupedIndex3.ComputeGlobalIndex">
            <summary>
            Computes the global index of a grouped index (gridIdx, groupIdx).
            </summary>
            <returns>The computes global index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex3.Equals(ILGPU.GroupedIndex3)">
            <summary>
            Returns true iff the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, iff the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex3.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex3.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex3.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex3.op_Equality(ILGPU.GroupedIndex3,ILGPU.GroupedIndex3)">
            <summary>
            Returns true iff the first and second index are the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.GroupedIndex3.op_Inequality(ILGPU.GroupedIndex3,ILGPU.GroupedIndex3)">
            <summary>
            Returns true iff the first and second index are not the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second index are not the same.</returns>
        </member>
        <member name="T:ILGPU.IndexType">
            <summary>
            Represents the type of index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.None">
            <summary>
            Represents no compatible index type.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.Index1D">
            <summary>
            Represents a 1D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.Index2D">
            <summary>
            Represents a 2D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.Index3D">
            <summary>
            Represents a 3D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.GroupedIndex1D">
            <summary>
            Represents a grouped 1D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.GroupedIndex2D">
            <summary>
            Represents a grouped 2D index.
            </summary>
        </member>
        <member name="F:ILGPU.IndexType.GroupedIndex3D">
            <summary>
            Represents a grouped 3D index.
            </summary>
        </member>
        <member name="T:ILGPU.IndexTypeExtensions">
            <summary>
            Contains utility functions for handling index types.
            </summary>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.GetManagedIndexType(ILGPU.IndexType)">
            <summary>
            Resolves the managed type of an index for a given index type.
            </summary>
            <param name="indexType">The index type.</param>
            <returns>The resolved managed index type..</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.GetIndexType(System.Type)">
            <summary>
            Tries to resolve an index type based on the given .Net type.
            </summary>
            <param name="indexType">The managed .Net index type.</param>
            <returns>The resolved index type or none.</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.GetUngroupedIndexType(ILGPU.IndexType)">
            <summary>
            Tries to resolve an ungrouped index type.
            An ungrouped index type is either <see cref="F:ILGPU.IndexType.None"/>,
            <see cref="F:ILGPU.IndexType.Index1D"/>, <see cref="F:ILGPU.IndexType.Index2D"/> or
            <see cref="F:ILGPU.IndexType.Index3D"/>.
            </summary>
            <param name="indexType">The index type.</param>
            <returns>The resolved index type or none.</returns>
        </member>
        <member name="M:ILGPU.IndexTypeExtensions.GetUngroupedIndexType(System.Type)">
            <summary>
            Tries to resolve an ungrouped index type.
            An ungrouped index type is either <see cref="F:ILGPU.IndexType.None"/>,
            <see cref="F:ILGPU.IndexType.Index1D"/>, <see cref="F:ILGPU.IndexType.Index2D"/> or
            <see cref="F:ILGPU.IndexType.Index3D"/>.
            </summary>
            <param name="indexType">The managed .Net index type.</param>
            <returns>The resolved index type or none.</returns>
        </member>
        <member name="T:ILGPU.IIndex">
            <summary>
            Represents a basic index type.
            </summary>
        </member>
        <member name="P:ILGPU.IIndex.Size">
            <summary>
            Returns the size represented by this index (eg. x, x * y or x * y * z).
            </summary>
        </member>
        <member name="T:ILGPU.IIntrinsicIndex">
            <summary>
            Represents an intrinsic index type.
            </summary>
        </member>
        <member name="P:ILGPU.IIntrinsicIndex.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="T:ILGPU.IGenericIndex`1">
            <summary>
            Represents a generic index type.
            </summary>
            <typeparam name="TIndex">The type of the generic index.</typeparam>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.InBounds(`0)">
            <summary>
            Returs true iff the current index is greater than or equal to 0 and
            is less than the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True iff the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.InBoundsInclusive(`0)">
            <summary>
            Returs true iff the current index is greater than or equal to 0 and
            is less than or equal to the given dimension.
            </summary>
            <param name="dimension">The dimension bounds.</param>
            <returns>True iff the current index is inside the given bounds.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.ComputeLinearIndex(`0)">
            <summary>
            Computes the linear index of this index by using the provided n-D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this index.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.ReconstructIndex(System.Int32)">
            <summary>
            Reconstructs an index from a linear index.
            </summary>
            <param name="linearIndex">The lienar index.</param>
            <returns>The reconstructed index.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.Add(`0)">
            <summary>
            Computes this + rhs.
            </summary>
            <param name="rhs">The right-hand side of the addition.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.Subtract(`0)">
            <summary>
            Computes this - rhs.
            </summary>
            <param name="rhs">The right-hand side of the subtraction.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.IGenericIndex`1.ComputedCastedExtent(`0,System.Int32,System.Int32)">
            <summary>
            The given <paramref name="extent"/> describes a chunk of contiguous memory of elements with
            size <paramref name="elementSize"/>. The parameter <paramref name="newElementSize"/> describes
            the requested new element size. The result of this function is a new extent dimension that
            represents the given extent in the context of the new element size.
            </summary>
            <param name="extent">The current extent.</param>
            <param name="elementSize">The current element size in the scope of the current extent.</param>
            <param name="newElementSize">The new element size.</param>
            <returns>The adjusted extent to match the new element size.</returns>
        </member>
        <member name="T:ILGPU.IGroupedIndex">
            <summary>
            Represents a grouped-index type.
            </summary>
        </member>
        <member name="T:ILGPU.IGroupedIndex`1">
            <summary>
            Represents a grouped-index type.
            </summary>
        </member>
        <member name="P:ILGPU.IGroupedIndex`1.GridIdx">
            <summary>
            Returns the global block idx.
            </summary>
        </member>
        <member name="P:ILGPU.IGroupedIndex`1.GroupIdx">
            <summary>
            Returns the lock thread idx.
            </summary>
        </member>
        <member name="T:ILGPU.Index">
            <summary>
            Represents a 1D index.
            </summary>
        </member>
        <member name="F:ILGPU.Index.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.Index.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.Index.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="P:ILGPU.Index.Dimension">
            <summary>
            Returns the grid dimension for this index type.
            </summary>
        </member>
        <member name="F:ILGPU.Index.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.Index.Min(ILGPU.Index,ILGPU.Index)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index.Max(ILGPU.Index,ILGPU.Index)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index.Clamp(ILGPU.Index,ILGPU.Index,ILGPU.Index)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Index.#ctor(System.Int32)">
            <summary>
            Constructs a new 1D index.
            </summary>
            <param name="x">The x index.</param>
        </member>
        <member name="P:ILGPU.Index.X">
            <summary>
            Returns the x index.
            </summary>
        </member>
        <member name="P:ILGPU.Index.IsFirst">
            <summary>
            Returns true iff this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.Index.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="P:ILGPU.Index.Size">
            <summary>
            Returns the size represented by this index (x);
            </summary>
        </member>
        <member name="M:ILGPU.Index.InBounds(ILGPU.Index)">
            <summary cref="M:ILGPU.IGenericIndex`1.InBounds(`0)"/>
        </member>
        <member name="M:ILGPU.Index.InBoundsInclusive(ILGPU.Index)">
            <summary cref="M:ILGPU.IGenericIndex`1.InBoundsInclusive(`0)"/>
        </member>
        <member name="M:ILGPU.Index.ComputeLinearIndex(ILGPU.Index)">
            <summary cref="M:ILGPU.IGenericIndex`1.ComputeLinearIndex(`0)"/>
        </member>
        <member name="M:ILGPU.Index.ReconstructIndex(System.Int32)">
            <summary cref="M:ILGPU.IGenericIndex`1.ReconstructIndex(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Index.Add(ILGPU.Index)">
            <summary cref="M:ILGPU.IGenericIndex`1.Add(`0)"/>
        </member>
        <member name="M:ILGPU.Index.Subtract(ILGPU.Index)">
            <summary cref="M:ILGPU.IGenericIndex`1.Subtract(`0)"/>
        </member>
        <member name="M:ILGPU.Index.ComputedCastedExtent(ILGPU.Index,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.IGenericIndex`1.ComputedCastedExtent(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Index.Equals(ILGPU.Index)">
            <summary>
            Returns true iff the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, iff the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index.CompareTo(ILGPU.Index)">
            <summary cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:ILGPU.Index.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Index.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.Index.Add(ILGPU.Index,ILGPU.Index)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_Addition(ILGPU.Index,ILGPU.Index)">
            <summary>
            Adds two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index.Subtract(ILGPU.Index,ILGPU.Index)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_Subtraction(ILGPU.Index,ILGPU.Index)">
            <summary>
            Subtracts two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index.Multiply(ILGPU.Index,ILGPU.Index)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_Multiply(ILGPU.Index,ILGPU.Index)">
            <summary>
            Multiplies two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index.Divide(ILGPU.Index,ILGPU.Index)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_Division(ILGPU.Index,ILGPU.Index)">
            <summary>
            Divides two indices.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_Equality(ILGPU.Index,ILGPU.Index)">
            <summary>
            Returns true iff the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.Index.op_Inequality(ILGPU.Index,ILGPU.Index)">
            <summary>
            Returns true iff the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.Index.op_LessThan(ILGPU.Index,ILGPU.Index)">
            <summary>
            Returns true iff the first index is smaller than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is smaller than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_LessThanOrEqual(ILGPU.Index,ILGPU.Index)">
            <summary>
            Returns true iff the first index is smaller than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is smaller than or equal to the second index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_GreaterThan(ILGPU.Index,ILGPU.Index)">
            <summary>
            Returns true iff the first index is greater than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is greater than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_GreaterThanOrEqual(ILGPU.Index,ILGPU.Index)">
            <summary>
            Returns true iff the first index is greater than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is greater than or equal to the second index.</returns>
        </member>
        <member name="M:ILGPU.Index.op_Implicit(ILGPU.Index)~System.Int32">
            <summary>
            Implictly converts an index to an int.
            </summary>
            <param name="idx">The index to convert.</param>
        </member>
        <member name="M:ILGPU.Index.op_Implicit(System.Int32)~ILGPU.Index">
            <summary>
            Implictly converts an int to an index.
            </summary>
            <param name="idx">The int to convert.</param>
        </member>
        <member name="T:ILGPU.Index2">
            <summary>
            Represents a 2D index.
            </summary>
        </member>
        <member name="F:ILGPU.Index2.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.Index2.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.Index2.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.Dimension">
            <summary>
            Returns the grid dimension for this index type.
            </summary>
        </member>
        <member name="M:ILGPU.Index2.ReconstructIndex(System.Int32,ILGPU.Index2)">
            <summary>
            Reconstructs a 2D index from a linear index.
            </summary>
            <param name="linearIndex">The lienar index.</param>
            <param name="dimension">The 2D dimension for reconstruction.</param>
            <returns>The reconstructed 2D index.</returns>
        </member>
        <member name="F:ILGPU.Index2.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.Index2.Min(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index2.Max(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index2.Clamp(ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Index2.#ctor(System.Int32)">
            <summary>
            Constructs a new 2D index.
            </summary>
            <param name="value">The value of every component (x, y).</param>
        </member>
        <member name="M:ILGPU.Index2.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new 2D index.
            </summary>
            <param name="x">The x index.</param>
            <param name="y">The y index.</param>
        </member>
        <member name="P:ILGPU.Index2.X">
            <summary>
            Returns the x index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.Y">
            <summary>
            Returns the y index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.IsFirst">
            <summary>
            Returns true iff this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="P:ILGPU.Index2.Size">
            <summary>
            Returns the size represented by this index (x * y).
            </summary>
        </member>
        <member name="M:ILGPU.Index2.InBounds(ILGPU.Index2)">
            <summary cref="M:ILGPU.IGenericIndex`1.InBounds(`0)"/>
        </member>
        <member name="M:ILGPU.Index2.InBoundsInclusive(ILGPU.Index2)">
            <summary cref="M:ILGPU.IGenericIndex`1.InBoundsInclusive(`0)"/>
        </member>
        <member name="M:ILGPU.Index2.ComputeLinearIndex(ILGPU.Index2)">
            <summary>
            Computes the linear index of this 2D index by using the provided 2D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this 2D index.</returns>
        </member>
        <member name="M:ILGPU.Index2.ReconstructIndex(System.Int32)">
            <summary>
            Reconstructs a 2D index from a linear index.
            </summary>
            <param name="linearIndex">The lienar index.</param>
            <returns>The reconstructed 2D index.</returns>
        </member>
        <member name="M:ILGPU.Index2.Add(ILGPU.Index2)">
            <summary cref="M:ILGPU.IGenericIndex`1.Add(`0)"/>
        </member>
        <member name="M:ILGPU.Index2.Subtract(ILGPU.Index2)">
            <summary cref="M:ILGPU.IGenericIndex`1.Subtract(`0)"/>
        </member>
        <member name="M:ILGPU.Index2.ComputedCastedExtent(ILGPU.Index2,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.IGenericIndex`1.ComputedCastedExtent(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Index2.Equals(ILGPU.Index2)">
            <summary>
            Returns true iff the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, iff the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index2.CompareTo(ILGPU.Index2)">
            <summary cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:ILGPU.Index2.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index2.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Index2.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.Index2.Add(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Adds two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added result index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Addition(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Adds two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added result index.</returns>
        </member>
        <member name="M:ILGPU.Index2.Subtract(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Subtracts two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted result index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Subtraction(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Subracts two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted result index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Multiply(System.Int32,ILGPU.Index2)">
            <summary>
            Multiplies an index with a scalar (component wise).
            </summary>
            <param name="first">The scalar value.</param>
            <param name="second">The index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Multiply(ILGPU.Index2,System.Int32)">
            <summary>
            Multiplies an index with a scalar (component wise).
            </summary>
            <param name="first">The index.</param>
            <param name="second">The scalar value.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index2.Multiply(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Multiplies two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Multiply(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Multiplies two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Division(System.Int32,ILGPU.Index2)">
            <summary>
            Divides an index with a scalar (component wise).
            </summary>
            <param name="first">The scalar value.</param>
            <param name="second">The index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Division(ILGPU.Index2,System.Int32)">
            <summary>
            Divides an index with a scalar (component wise).
            </summary>
            <param name="first">The index.</param>
            <param name="second">The scalar value.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index2.Divide(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Divides two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Division(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Divides two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Equality(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true iff the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_Inequality(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true iff the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_LessThan(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true iff the first index is smaller than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is smaller than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_LessThanOrEqual(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true iff the first index is smaller than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is smaller than or equal to the second index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_GreaterThan(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true iff the first index is greater than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is greater than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index2.op_GreaterThanOrEqual(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns true iff the first index is greater than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is greater than or equal to the second index.</returns>
        </member>
        <member name="T:ILGPU.Index3">
            <summary>
            Represents a 3D index.
            </summary>
        </member>
        <member name="F:ILGPU.Index3.Invalid">
            <summary>
            Represents an invalid index (-1);
            </summary>
        </member>
        <member name="F:ILGPU.Index3.Zero">
            <summary>
            Represents an index with zero.
            </summary>
        </member>
        <member name="F:ILGPU.Index3.One">
            <summary>
            Represents an index with 1.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.Dimension">
            <summary>
            Returns the grid dimension for this index type.
            </summary>
        </member>
        <member name="M:ILGPU.Index3.ReconstructIndex(System.Int32,ILGPU.Index3)">
            <summary>
            Reconstructs a 3D index from a linear index.
            </summary>
            <param name="linearIndex">The lienar index.</param>
            <param name="dimension">The 3D dimension for reconstruction.</param>
            <returns>The reconstructed 3D index.</returns>
        </member>
        <member name="F:ILGPU.Index3.MainConstructor">
            <summary>
            Returns the main constructor to create a new index instance.
            </summary>
        </member>
        <member name="M:ILGPU.Index3.Min(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index3.Max(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Index3.Clamp(ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Clamps the given index value according to Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Index3.#ctor(System.Int32)">
            <summary>
            Constructs a new 3D index.
            </summary>
            <param name="value">The value of every component (x, y, z).</param>
        </member>
        <member name="M:ILGPU.Index3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new 3D index.
            </summary>
            <param name="x">The x index.</param>
            <param name="y">The y index.</param>
            <param name="z">The z index.</param>
        </member>
        <member name="P:ILGPU.Index3.X">
            <summary>
            Returns the x index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.Y">
            <summary>
            Returns the y index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.Z">
            <summary>
            Returns the z index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.IsFirst">
            <summary>
            Returns true iff this is the first index.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.IndexType">
            <summary>
            Returns the current index type.
            </summary>
        </member>
        <member name="P:ILGPU.Index3.Size">
            <summary>
            Returns the size represented by this index (x * y * z).
            </summary>
        </member>
        <member name="M:ILGPU.Index3.InBounds(ILGPU.Index3)">
            <summary cref="M:ILGPU.IGenericIndex`1.InBounds(`0)"/>
        </member>
        <member name="M:ILGPU.Index3.InBoundsInclusive(ILGPU.Index3)">
            <summary cref="M:ILGPU.IGenericIndex`1.InBoundsInclusive(`0)"/>
        </member>
        <member name="M:ILGPU.Index3.ComputeLinearIndex(ILGPU.Index3)">
            <summary>
            Computes the linear index of this 3D index by using the provided 3D dimension.
            </summary>
            <param name="dimension">The dimension for index computation.</param>
            <returns>The computed linear index of this 3D index.</returns>
        </member>
        <member name="M:ILGPU.Index3.ReconstructIndex(System.Int32)">
            <summary>
            Reconstructs a 3D index from a linear index.
            </summary>
            <param name="linearIndex">The lienar index.</param>
            <returns>The reconstructed 3D index.</returns>
        </member>
        <member name="M:ILGPU.Index3.Add(ILGPU.Index3)">
            <summary cref="M:ILGPU.IGenericIndex`1.Add(`0)"/>
        </member>
        <member name="M:ILGPU.Index3.Subtract(ILGPU.Index3)">
            <summary cref="M:ILGPU.IGenericIndex`1.Subtract(`0)"/>
        </member>
        <member name="M:ILGPU.Index3.ComputedCastedExtent(ILGPU.Index3,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.IGenericIndex`1.ComputedCastedExtent(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Index3.Equals(ILGPU.Index3)">
            <summary>
            Returns true iff the given index is equal to the current index.
            </summary>
            <param name="other">The other index.</param>
            <returns>True, iff the given index is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index3.CompareTo(ILGPU.Index3)">
            <summary cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:ILGPU.Index3.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current index.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current index.</returns>
        </member>
        <member name="M:ILGPU.Index3.GetHashCode">
            <summary>
            Returns the hash code of this index.
            </summary>
            <returns>The hash code of this index.</returns>
        </member>
        <member name="M:ILGPU.Index3.ToString">
            <summary>
            Returns the string representation of this index.
            </summary>
            <returns>The string representation of this index.</returns>
        </member>
        <member name="M:ILGPU.Index3.Add(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Adds two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Addition(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Adds two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The added index.</returns>
        </member>
        <member name="M:ILGPU.Index3.Subtract(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Subtracts two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Subtraction(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Subtracts two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The subtracted index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Multiply(System.Int32,ILGPU.Index3)">
            <summary>
            Multiplies an index with a scalar (component wise).
            </summary>
            <param name="first">The scalar value.</param>
            <param name="second">The index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Multiply(ILGPU.Index3,System.Int32)">
            <summary>
            Multiplies an index with a scalar (component wise).
            </summary>
            <param name="first">The index.</param>
            <param name="second">The scalar value.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index3.Multiply(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Multiplies two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Multiply(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Multiplies two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The multiplied index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Division(System.Int32,ILGPU.Index3)">
            <summary>
            Divides an index with a scalar (component wise).
            </summary>
            <param name="first">The scalar value.</param>
            <param name="second">The index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Division(ILGPU.Index3,System.Int32)">
            <summary>
            Divides an index with a scalar (component wise).
            </summary>
            <param name="first">The index.</param>
            <param name="second">The scalar value.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index3.Divide(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Divides two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Division(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Divides two indices (component wise).
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>The divided index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Equality(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true iff the first and second index are the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first and second index are the same.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_Inequality(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true iff the first and second index are not the same.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first and second index are not the same.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_LessThan(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true iff the first index is smaller than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is smaller than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_LessThanOrEqual(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true iff the first index is smaller than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is smaller than or equal the second index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_GreaterThan(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true iff the first index is greater than the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is greater than the second index.</returns>
        </member>
        <member name="M:ILGPU.Index3.op_GreaterThanOrEqual(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns true iff the first index is greater than or equal to the second index.
            </summary>
            <param name="first">The first index.</param>
            <param name="second">The second index.</param>
            <returns>True, iff the first index is greater or equal to the second index.</returns>
        </member>
        <member name="T:ILGPU.Interop">
            <summary>
            Contains general interop functions.
            </summary>
        </member>
        <member name="M:ILGPU.Interop.GetRef``1(System.IntPtr)">
            <summary>
            Returns a reference that references given address.
            </summary>
            <param name="value">A pointer to a variable of type <typeparamref name="T"/>.</param>
            <returns>A reference that references given address.</returns>
        </member>
        <member name="M:ILGPU.Interop.GetAddress``1(``0@)">
            <summary>
            Returns a pointer that points to the given managed reference.
            </summary>
            <param name="variableRef">The variable reference.</param>
            <returns>A pointer that points to the given managed reference.</returns>
        </member>
        <member name="M:ILGPU.Interop.PtrToStructure``1(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Loads a structure of type T from the given memory address that is adjusted
            with the help of elementSize * elementIndex.
            </summary>
            <typeparam name="T">The structure type.</typeparam>
            <param name="ptr">The source address.</param>
            <param name="elementSize">The size in bytes of a single element.</param>
            <param name="elementIndex">The index of the target element.</param>
            <returns>The loaded structure of type T.</returns>
        </member>
        <member name="M:ILGPU.Interop.PtrToStructure``1(System.IntPtr)">
            <summary>
            Loads a structure of type T from the given memory address.
            </summary>
            <typeparam name="T">The structure type.</typeparam>
            <param name="ptr">The source address.</param>
            <returns>The loaded structure of type T.</returns>
        </member>
        <member name="M:ILGPU.Interop.StructureToPtr``1(``0,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Stores a structure of type T into the given memory address that is adjusted
            with the help of elementSize * elementIndex.
            </summary>
            <typeparam name="T">The structure type.</typeparam>
            <param name="source">The source structure.</param>
            <param name="ptr">The target address.</param>
            <param name="elementSize">The size in bytes of a single element.</param>
            <param name="elementIndex">The index of the target element.</param>
        </member>
        <member name="M:ILGPU.Interop.StructureToPtr``1(``0,System.IntPtr)">
            <summary>
            Stores a structure of type T into the given memory address.
            </summary>
            <typeparam name="T">The structure type.</typeparam>
            <param name="source">The source structure.</param>
            <param name="ptr">The target address.</param>
        </member>
        <member name="M:ILGPU.Interop.DestroyStructure``1(System.IntPtr)">
            <summary>
            Destroys a structure of type T at the given memory address.
            </summary>
            <typeparam name="T">The structure type.</typeparam>
            <param name="ptr">The target address.</param>
        </member>
        <member name="M:ILGPU.Interop.SizeOf``1">
            <summary>
            Computes the size of the given type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
        </member>
        <member name="M:ILGPU.Interop.SizeOf``1(``0)">
            <summary>
            Computes the size of the given type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
        </member>
        <member name="M:ILGPU.Interop.OffsetOf``1(System.String)">
            <summary>
            Computes the unsigned offset of the given field in bytes.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="fieldName">The name of the target field.</param>
        </member>
        <member name="M:ILGPU.Interop.LoadEffectiveAddress(System.IntPtr,System.Int32)">
            <summary>
            Loads the effective address by computing <paramref name="basePointer"/> +
            <paramref name="globalOffset"/>.
            </summary>
            <param name="basePointer">The base pointer.</param>
            <param name="globalOffset">The global offset in bytes.</param>
            <returns>The effective address.</returns>
        </member>
        <member name="M:ILGPU.Interop.LoadEffectiveAddress(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Loads the effective address by computing <paramref name="basePointer"/> +
            <paramref name="elementSize"/> * <paramref name="elementIndex"/>
            </summary>
            <param name="basePointer">The base pointer.</param>
            <param name="elementSize">The size of a single element in bytes.</param>
            <param name="elementIndex">The index of the target element.</param>
            <returns>The effective address.</returns>
        </member>
        <member name="T:ILGPU.MemoryFence">
            <summary>
            Contains memory-fence functions.
            </summary>
        </member>
        <member name="M:ILGPU.MemoryFence.GroupLevel">
            <summary>
            A memory fence at the group level.
            </summary>
        </member>
        <member name="M:ILGPU.MemoryFence.DeviceLevel">
            <summary>
            A memory fence at the device level.
            </summary>
        </member>
        <member name="M:ILGPU.MemoryFence.SystemLevel">
            <summary>
            A memory fence at the system level.
            </summary>
        </member>
        <member name="T:ILGPU.Method">
            <summary>
            Represents a method that was compiled to LLVM.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Method.#ctor(ILGPU.CompileUnit,System.Reflection.MethodBase)">
            <summary>
            Constructs a new method.
            </summary>
            <param name="unit">The target unit.</param>
            <param name="methodBase">The target method.</param>
        </member>
        <member name="P:ILGPU.Method.CompileUnit">
            <summary>
            Returns the associated compile unit.
            </summary>
        </member>
        <member name="P:ILGPU.Method.Name">
            <summary>
            Returns the LLVM-compatible name of method.
            </summary>
        </member>
        <member name="P:ILGPU.Method.ManagedFullName">
            <summary>
            Returns the full name in the managed context of this method.
            </summary>
        </member>
        <member name="P:ILGPU.Method.ReturnType">
            <summary>
            Returns the return-type of the method.
            </summary>
        </member>
        <member name="P:ILGPU.Method.IsVoid">
            <summary>
            Returns true iff the return type of the method is void.
            </summary>
        </member>
        <member name="P:ILGPU.Method.IsStatic">
            <summary>
            Returns true iff the mehtod is a static method.
            </summary>
        </member>
        <member name="P:ILGPU.Method.IsInstance">
            <summary>
            Returns true iff the method is an instance method (non-static).
            </summary>
        </member>
        <member name="P:ILGPU.Method.ParameterOffset">
            <summary>
            Returns the parameter offset of the method.
            Instance methods have an offset of 1, whereas static methods
            have an offset of 0.
            </summary>
        </member>
        <member name="P:ILGPU.Method.LLVMFunction">
            <summary>
            Returns the LLVM-function-value that represents
            the encapsulated method.
            </summary>
        </member>
        <member name="P:ILGPU.Method.MethodBase">
            <summary>
            Returns the internal method base.
            </summary>
        </member>
        <member name="P:ILGPU.Method.DisassembledMethod">
            <summary>
            Returns the disassembled method.
            </summary>
        </member>
        <member name="M:ILGPU.Method.VisitCalls(System.Action{ILGPU.Compiler.ILInstruction,ILGPU.Method})">
            <summary>
            Visits all call instructions and invokes the call handler for each
            called method. Note that this method is invoked recursively on each
            called method.
            </summary>
            <param name="callHandler">The handler to handle called methods.</param>
        </member>
        <member name="M:ILGPU.Method.VisitCalls(System.Action{ILGPU.Compiler.ILInstruction,ILGPU.Method},System.Boolean)">
            <summary>
            Visits all call instructions and invokes the call handler for each
            called method.
            </summary>
            <param name="callHandler">The handler to handle called methods.</param>
            <param name="recursive">True, iff this method should be invoked on each called method recursively.</param>
        </member>
        <member name="M:ILGPU.Method.Disassemble(ILGPU.CompilationContext)">
            <summary>
            Triggers disassembly of this method.
            </summary>
            <param name="compilationContext">The current compilation context.</param>
        </member>
        <member name="M:ILGPU.Method.Decompile(ILGPU.CompileUnit)">
            <summary>
            Triggers decompilation of this method in the scope of
            the given compilation unit.
            </summary>
            <param name="unit">The target unit.</param>
        </member>
        <member name="T:ILGPU.ReductionOperations.IReduction`1">
            <summary>
            Represents an abstract interface for a value reduction.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
        </member>
        <member name="P:ILGPU.ReductionOperations.IReduction`1.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.IReduction`1.Reduce(`0,`0)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.AddInt8">
            <summary>
            Represents an Add reduction of type sbyte.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.AddInt8.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.AddInt8.Reduce(System.SByte,System.SByte)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MulInt8">
            <summary>
            Represents an Mul reduction of type sbyte.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MulInt8.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MulInt8.Reduce(System.SByte,System.SByte)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MaxInt8">
            <summary>
            Represents an Max reduction of type sbyte.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MaxInt8.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MaxInt8.Reduce(System.SByte,System.SByte)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MinInt8">
            <summary>
            Represents an Min reduction of type sbyte.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MinInt8.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MinInt8.Reduce(System.SByte,System.SByte)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.AddInt16">
            <summary>
            Represents an Add reduction of type short.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.AddInt16.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.AddInt16.Reduce(System.Int16,System.Int16)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MulInt16">
            <summary>
            Represents an Mul reduction of type short.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MulInt16.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MulInt16.Reduce(System.Int16,System.Int16)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MaxInt16">
            <summary>
            Represents an Max reduction of type short.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MaxInt16.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MaxInt16.Reduce(System.Int16,System.Int16)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MinInt16">
            <summary>
            Represents an Min reduction of type short.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MinInt16.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MinInt16.Reduce(System.Int16,System.Int16)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.AddInt32">
            <summary>
            Represents an Add reduction of type int.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.AddInt32.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.AddInt32.Reduce(System.Int32,System.Int32)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MulInt32">
            <summary>
            Represents an Mul reduction of type int.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MulInt32.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MulInt32.Reduce(System.Int32,System.Int32)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MaxInt32">
            <summary>
            Represents an Max reduction of type int.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MaxInt32.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MaxInt32.Reduce(System.Int32,System.Int32)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MinInt32">
            <summary>
            Represents an Min reduction of type int.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MinInt32.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MinInt32.Reduce(System.Int32,System.Int32)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.AddInt64">
            <summary>
            Represents an Add reduction of type long.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.AddInt64.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.AddInt64.Reduce(System.Int64,System.Int64)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MulInt64">
            <summary>
            Represents an Mul reduction of type long.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MulInt64.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MulInt64.Reduce(System.Int64,System.Int64)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MaxInt64">
            <summary>
            Represents an Max reduction of type long.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MaxInt64.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MaxInt64.Reduce(System.Int64,System.Int64)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MinInt64">
            <summary>
            Represents an Min reduction of type long.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MinInt64.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MinInt64.Reduce(System.Int64,System.Int64)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.AddUInt8">
            <summary>
            Represents an Add reduction of type byte.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.AddUInt8.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.AddUInt8.Reduce(System.Byte,System.Byte)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MulUInt8">
            <summary>
            Represents an Mul reduction of type byte.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MulUInt8.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MulUInt8.Reduce(System.Byte,System.Byte)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MaxUInt8">
            <summary>
            Represents an Max reduction of type byte.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MaxUInt8.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MaxUInt8.Reduce(System.Byte,System.Byte)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MinUInt8">
            <summary>
            Represents an Min reduction of type byte.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MinUInt8.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MinUInt8.Reduce(System.Byte,System.Byte)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.AddUInt16">
            <summary>
            Represents an Add reduction of type ushort.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.AddUInt16.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.AddUInt16.Reduce(System.UInt16,System.UInt16)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MulUInt16">
            <summary>
            Represents an Mul reduction of type ushort.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MulUInt16.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MulUInt16.Reduce(System.UInt16,System.UInt16)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MaxUInt16">
            <summary>
            Represents an Max reduction of type ushort.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MaxUInt16.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MaxUInt16.Reduce(System.UInt16,System.UInt16)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MinUInt16">
            <summary>
            Represents an Min reduction of type ushort.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MinUInt16.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MinUInt16.Reduce(System.UInt16,System.UInt16)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.AddUInt32">
            <summary>
            Represents an Add reduction of type uint.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.AddUInt32.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.AddUInt32.Reduce(System.UInt32,System.UInt32)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MulUInt32">
            <summary>
            Represents an Mul reduction of type uint.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MulUInt32.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MulUInt32.Reduce(System.UInt32,System.UInt32)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MaxUInt32">
            <summary>
            Represents an Max reduction of type uint.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MaxUInt32.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MaxUInt32.Reduce(System.UInt32,System.UInt32)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MinUInt32">
            <summary>
            Represents an Min reduction of type uint.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MinUInt32.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MinUInt32.Reduce(System.UInt32,System.UInt32)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.AddUInt64">
            <summary>
            Represents an Add reduction of type ulong.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.AddUInt64.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.AddUInt64.Reduce(System.UInt64,System.UInt64)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MulUInt64">
            <summary>
            Represents an Mul reduction of type ulong.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MulUInt64.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MulUInt64.Reduce(System.UInt64,System.UInt64)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MaxUInt64">
            <summary>
            Represents an Max reduction of type ulong.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MaxUInt64.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MaxUInt64.Reduce(System.UInt64,System.UInt64)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MinUInt64">
            <summary>
            Represents an Min reduction of type ulong.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MinUInt64.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MinUInt64.Reduce(System.UInt64,System.UInt64)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.AddFloat">
            <summary>
            Represents an Add reduction of type float.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.AddFloat.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.AddFloat.Reduce(System.Single,System.Single)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MulFloat">
            <summary>
            Represents an Mul reduction of type float.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MulFloat.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MulFloat.Reduce(System.Single,System.Single)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MaxFloat">
            <summary>
            Represents an Max reduction of type float.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MaxFloat.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MaxFloat.Reduce(System.Single,System.Single)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MinFloat">
            <summary>
            Represents an Min reduction of type float.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MinFloat.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MinFloat.Reduce(System.Single,System.Single)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.AddDouble">
            <summary>
            Represents an Add reduction of type double.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.AddDouble.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.AddDouble.Reduce(System.Double,System.Double)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MulDouble">
            <summary>
            Represents an Mul reduction of type double.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MulDouble.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MulDouble.Reduce(System.Double,System.Double)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MaxDouble">
            <summary>
            Represents an Max reduction of type double.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MaxDouble.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MaxDouble.Reduce(System.Double,System.Double)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.ReductionOperations.MinDouble">
            <summary>
            Represents an Min reduction of type double.
            </summary>
        </member>
        <member name="P:ILGPU.ReductionOperations.MinDouble.NeutralElement">
            <summary>
            Returns the neutral element of this reduction operation, such that
            Reduce(Reduce(neutralElement, left), right) == Reduce(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.ReductionOperations.MinDouble.Reduce(System.Double,System.Double)">
            <summary>
            Performs a reduction of the form result = Reduce(left, right).
            </summary>
            <param name="left">The left value of the reduction.</param>
            <param name="right">The right value of the reduction.</param>
            <returns>The result of the reduction.</returns>
        </member>
        <member name="T:ILGPU.Resources.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CannotFindFieldOfType">
            <summary>
              Looks up a localized string similar to Cannot find the field &apos;{0}&apos; of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CannotLoadLLVMLib">
            <summary>
              Looks up a localized string similar to Cannot load required LLVM library.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CannotTakeFieldOffsetOfPrimitiveType">
            <summary>
              Looks up a localized string similar to Cannot take field offset of primitive type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CouldNotGenerateMachineCode">
            <summary>
              Looks up a localized string similar to Could not generate machine code: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CouldNotLoadLibDevice">
            <summary>
              Looks up a localized string similar to Could not load lib-device library: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CouldNotReadLibDevice">
            <summary>
              Looks up a localized string similar to Could not read lib-device library: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CudaPathNotFound">
            <summary>
              Looks up a localized string similar to Cuda path could not be determined automatically. Custom device library could not be found..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CustomABIImplementationRequired">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; requires a custom ABI implementation.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.CustomExceptionSemantics">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; has custom exception semantics..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.ExplicitMemoryOffsetRequired">
            <summary>
              Looks up a localized string similar to The field &apos;{0}.{1}&apos; requires an explicit memory offset.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointIndexParameter">
            <summary>
              Looks up a localized string similar to An entry point must receive at least one index parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointIndexParameterOfWrongType">
            <summary>
              Looks up a localized string similar to An entry point must receive a compatible index type as first parameter.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidEntryPointInstanceKernelMethod">
            <summary>
              Looks up a localized string similar to Only static methods are supported at the moment.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidILCode">
            <summary>
              Looks up a localized string similar to Invalid IL Code.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidMathIntrinsic">
            <summary>
              Looks up a localized string similar to Invalid math-intrinsic implementation of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.InvalidUseOfVariableViewsInSharedMemory">
            <summary>
              Looks up a localized string similar to Variable views cannot have a specified element count in shared memory. Consider using an array view instead..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.LibDeviceNotFound">
            <summary>
              Looks up a localized string similar to Could not find a compatible lib-device library.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.LibDevicePathNotFound">
            <summary>
              Looks up a localized string similar to Custom device-library path could not be determined automatically. Try specifying the path explicitly..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.LLVMModuleVerificationFailed">
            <summary>
              Looks up a localized string similar to LLVM-module verification failed: {0}.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.MismatchingTypes">
            <summary>
              Looks up a localized string similar to The provided types &apos;{0}&apos; and &apos;{1}&apos; do not match.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NativeMethodNotSupported">
            <summary>
              Looks up a localized string similar to Native method &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NativePlatformInvocationRequired">
            <summary>
              Looks up a localized string similar to This operation is only permitted in native-OS-platform mode. The current runtime is &apos;{0}&apos; but the native OS platform is &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedActivatorOperation">
            <summary>
              Looks up a localized string similar to The operation &apos;{0}&apos; on the .Net activator is not supported..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedArithmeticOperandTypes">
            <summary>
              Looks up a localized string similar to Not supported arithmetic operands &apos;{0}&apos; &amp; &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedArrayCreation">
            <summary>
              Looks up a localized string similar to Cannot create a dynamically sized array on an accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedArrayElementType">
            <summary>
              Looks up a localized string similar to The array type &apos;{0}&apos; uses a non-value element type.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedAtomicOperation">
            <summary>
              Looks up a localized string similar to Atomic operation of type &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedBackend">
            <summary>
              Looks up a localized string similar to Not supported backend.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedBoxing">
            <summary>
              Looks up a localized string similar to Boxing a value is currently not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedClassType">
            <summary>
              Looks up a localized string similar to Class type &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedCompareOperation">
            <summary>
              Looks up a localized string similar to Not supported compare operation of types &apos;{0}&apos; &amp; &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedCompareOrArithmeticValue">
            <summary>
              Looks up a localized string similar to Not supported compare or arithmetic value of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedCompileUnit">
            <summary>
              Looks up a localized string similar to Not supported compile unit.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedConversion">
            <summary>
              Looks up a localized string similar to Not supported conversion.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedFloatComparison">
            <summary>
              Looks up a localized string similar to Not supported float comparison of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedFloatConversion">
            <summary>
              Looks up a localized string similar to Not supported float conversion.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedGenericMethod">
            <summary>
              Looks up a localized string similar to Not supported generic method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedGenericType">
            <summary>
              Looks up a localized string similar to Generic type &apos;{0}&apos; without required type arguments cannot be converted to an object type.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedGridIntrinsic">
            <summary>
              Looks up a localized string similar to Not supported grid intrinsic of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedGroupBarrier">
            <summary>
              Looks up a localized string similar to The group-barrier function &apos;{0}&apos; is not supported in the scope of implicitly-grouped kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedGroupIntrinsic">
            <summary>
              Looks up a localized string similar to Not supported group intrinsic of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedILInstruction">
            <summary>
              Looks up a localized string similar to Not supported IL instruction in method of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedILInstructionPossibleLambda">
            <summary>
              Looks up a localized string similar to Not supported IL instruction in method of type &apos;{0}&apos;. Are you using a lambda closure?.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIndirectMethodCall">
            <summary>
              Looks up a localized string similar to Not supported indirect call to a method with the signature &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInstruction">
            <summary>
              Looks up a localized string similar to Not supported instruction in method &apos;{0}&apos; of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntComparison">
            <summary>
              Looks up a localized string similar to Not supported int comparison of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntConversion">
            <summary>
              Looks up a localized string similar to Not supported int conversion.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedInterfaceType">
            <summary>
              Looks up a localized string similar to Interface type &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntOperand">
            <summary>
              Looks up a localized string similar to Not supported int operand of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIntrinsic">
            <summary>
              Looks up a localized string similar to Not supported intrinsic type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedIsInstance">
            <summary>
              Looks up a localized string similar to IsInstance is currently not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedKernelParameterType">
            <summary>
              Looks up a localized string similar to Not supported kernel-parameter type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedLoadOfStaticField">
            <summary>
              Looks up a localized string similar to Cannot load from the static field &apos;{0}&apos; since it is not read only.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedLoadOfStaticFieldAddress">
            <summary>
              Looks up a localized string similar to Cannot take address of the static field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedMathIntrinsic">
            <summary>
              Looks up a localized string similar to Not supported math intrinsic of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedMemoryFenceOperation">
            <summary>
              Looks up a localized string similar to Not supported memory-fence operation of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedMethodJump">
            <summary>
              Looks up a localized string similar to Not supported jump to method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedPlatform">
            <summary>
              Looks up a localized string similar to Not supported platform &apos;{0}&apos; ({1} required).
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedPointerConversion">
            <summary>
              Looks up a localized string similar to Not supported pointer conversion.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedPointerToObjectType">
            <summary>
              Looks up a localized string similar to Pointer type &apos;{0}&apos; cannot be converted to an object type.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedPrimitiveToObjectType">
            <summary>
              Looks up a localized string similar to The primitive type &apos;{0}&apos; cannot be converted to an object type.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedRecursiveProgram">
            <summary>
              Looks up a localized string similar to Not supported recursive program.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedRuntimeMethod">
            <summary>
              Looks up a localized string similar to Not supported runtime method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedSharedMemoryVariableType">
            <summary>
              Looks up a localized string similar to Not supported shared-memory variable of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedSizeOf">
            <summary>
              Looks up a localized string similar to Could not resolve the native size of the type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedStoreToStaticField">
            <summary>
              Looks up a localized string similar to Cannot store a value to the static field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedStringOperation">
            <summary>
              Looks up a localized string similar to String operations are not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedStructDueToExplicitPacking">
            <summary>
              Looks up a localized string similar to The struct type &apos;{0}&apos; requires an explicit packing.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedStructDueToExplicitSize">
            <summary>
              Looks up a localized string similar to The struct type &apos;{0}&apos; requires an explicit size.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedStructDueToNonAnsiCharSet">
            <summary>
              Looks up a localized string similar to The struct type &apos;{0}&apos; requires a non-ansi charset.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedStructDueToNonSequentialMemoryLayout">
            <summary>
              Looks up a localized string similar to The struct type &apos;{0}&apos; requires a non-sequential memory layout.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedTargetPlatform">
            <summary>
              Looks up a localized string similar to Not supported target platform.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedType">
            <summary>
              Looks up a localized string similar to Not supported type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedUnboxing">
            <summary>
              Looks up a localized string similar to Unboxing a value is currently not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedUnsafeAllocation">
            <summary>
              Looks up a localized string similar to Not supported unsafe allocation on stack.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedUnsignedToFloatConversion">
            <summary>
              Looks up a localized string similar to Not supported unsigned to float conversion.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedUseOfSharedMemory">
            <summary>
              Looks up a localized string similar to Shared memory can only be used in the context of a grouped kernel. Consider using a grouped index..
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedValue">
            <summary>
              Looks up a localized string similar to Not supported value &apos;{0}&apos; of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedVirtualMethodCall">
            <summary>
              Looks up a localized string similar to Not supported virtual call to method &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedVirtualMethodCallToObject">
            <summary>
              Looks up a localized string similar to Not supported virtual call to method &apos;{0}&apos; defined in type &apos;{1}&apos; that was called on &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedVirtualMethodCallToUnconstrainedInstance">
            <summary>
              Looks up a localized string similar to Calling the virtual method &apos;{0}&apos; of unconstrained instance is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedWarpIntrinsic">
            <summary>
              Looks up a localized string similar to Not supported warp intrinsic of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.NotSupportedWarpShuffle">
            <summary>
              Looks up a localized string similar to The warp-shuffle function &apos;{0}&apos; is not supported in the scope of implicitly-grouped kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.RuntimeInternalMethodNotSupported">
            <summary>
              Looks up a localized string similar to Runtime-internal method &apos;{0}&apos; is not supported.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.ErrorMessages.WrongArrayType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not represent an array type.
            </summary>
        </member>
        <member name="T:ILGPU.Resources.RuntimeErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CannotEnablePeerAccessToDifferentAcceleratorKind">
            <summary>
              Looks up a localized string similar to Cannot enable peer access to an accelerator of a different kind.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CannotResolveErrorString">
            <summary>
              Looks up a localized string similar to Error-description string could not be resolved.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.CudaNotSupported">
            <summary>
              Looks up a localized string similar to Cuda is not supported on this platform.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidCustomGroupSize">
            <summary>
              Looks up a localized string similar to Invalid custom group size &gt; 0 in a grouped-index scenario.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidGridDimension">
            <summary>
              Looks up a localized string similar to Invalid grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidGroupDimension">
            <summary>
              Looks up a localized string similar to Invalid group dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidNumberOfDynamicallySharedMemoryVariableArgs">
            <summary>
              Looks up a localized string similar to The number of provided shared-memory array sizes does not match the required length.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidNumberOfUniformArgs">
            <summary>
              Looks up a localized string similar to The number of provided arguments does not match the required length.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.InvalidSharedMemorySize">
            <summary>
              Looks up a localized string similar to Shared-memory size cannot be &lt; 0.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedExplicitlyGroupedKernel">
            <summary>
              Looks up a localized string similar to Not supported explicitly-grouped kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedIndexType">
            <summary>
              Looks up a localized string similar to Not supported index type.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedKernel">
            <summary>
              Looks up a localized string similar to Not supported kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedOSPlatform">
            <summary>
              Looks up a localized string similar to Not supported OS platform.
            </summary>
        </member>
        <member name="P:ILGPU.Resources.RuntimeErrorMessages.NotSupportedTargetAccelerator">
            <summary>
              Looks up a localized string similar to Not supported target accelerator.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorType">
            <summary>
            Represents the general type of an accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.AcceleratorType.CPU">
            <summary>
            Represents a CPU accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.AcceleratorType.Cuda">
            <summary>
            Represents a Cuda accelerator.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator">
            <summary>
            Represents a general abstract accelerator.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.DefaultFlags">
            <summary>
            Represents the default flags of a new lightning context.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.FastMathFlags">
            <summary>
            Represents the default flags of a new lightning context.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.FastMath32BitFloatsFlags">
            <summary>
            Represents the default flags of a new lightning context.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.accelerators">
            <summary>
            Represents the list of available accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Accelerators">
            <summary>
            Returns a list of available accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Create(ILGPU.Context,ILGPU.Runtime.AcceleratorId)">
            <summary>
            Creates the specified accelerator using the provided accelerator id.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="acceleratorId">The specified accelerator id.</param>
            <returns>The created accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Create(ILGPU.Context,ILGPU.Runtime.AcceleratorId,ILGPU.CompileUnitFlags)">
            <summary>
            Creates the specified accelerator using the provided accelerator id.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="acceleratorId">The specified accelerator id.</param>
            <param name="flags">The compile-unit flags.</param>
            <returns>The created accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.TryResolvePointerType(System.IntPtr)">
            <summary>
            Tries to resolve the accelerator type of the given pointer.
            </summary>
            <param name="value">The pointer to check.</param>
            <returns>A value of the <see cref="P:ILGPU.Runtime.Accelerator.AcceleratorType"/> enum iff the type could be rsesolved.</returns>
        </member>
        <member name="E:ILGPU.Runtime.Accelerator.Disposed">
            <summary>
            Will be raised iff the accelerator is disposed.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.backend">
            <summary>
            The default backend instance.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.compileUnit">
            <summary>
            The default compile unit.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.memoryCache">
            <summary>
            The default memory cache for operations that require additional
            temporary memory.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Accelerator.storedPeerAccelerators">
            <summary>
            Contains a collection of all peer accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.#ctor(ILGPU.Context,ILGPU.Runtime.AcceleratorType)">
            <summary>
            Constructs a new accelerator.
            </summary>
            <param name="context">The target context.</param>
            <param name="type">The target accelerator type.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.InitBackend(ILGPU.Backends.Backend,ILGPU.CompileUnitFlags)">
            <summary>
            Initializes the associated backend.
            </summary>
            <param name="compilationBackend">The associated backend.</param>
            <param name="flags">The compile-unit flags.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Context">
            <summary>
            Returns the associated ILGPU context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.DefaultStream">
            <summary>
            Returns the default stream of this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.AcceleratorType">
            <summary>
            Returns the type of the accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MemorySize">
            <summary>
            Returns the memory size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.PeerAccelerators">
            <summary>
            Returns the accelerators for which the peer access has been enabled.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedPeerAccelerators">
            <summary>
            Returns the cached peer accesses.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Name">
            <summary>
            Returns the name of the device.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxGridSize">
            <summary>
            Returns the max grid size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumThreadsPerGroup">
            <summary>
            Returns the maximum number of threads in a group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxThreadsPerGroup">
            <summary>
            Returns the maximum number of threads in a group.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxSharedMemoryPerGroup">
            <summary>
            Returns the maximum number of shared memory per thread group in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxConstantMemory">
            <summary>
            Returns the maximum number of constant memory in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.WarpSize">
            <summary>
            Return the warp size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.NumMultiprocessors">
            <summary>
            Returns the number of available multiprocessors.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumThreadsPerMultiprocessor">
            <summary>
            Returns the maximum number of threads per multiprocessor.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MaxNumThreads">
            <summary>
            Returns the maximum number of threads of this accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.Backend">
            <summary>
            Returns the internal backend of this lightning context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CompileUnit">
            <summary>
            Returns the internal compile unit of this lightning context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.MemoryCache">
            <summary>
            Returns the default memory-buffer cache that can be used by several operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreateExtension``2(``1)">
            <summary>
            Creates a new accelerator extension using the given provider.
            </summary>
            <typeparam name="TExtension">The type of the extension to create.</typeparam>
            <typeparam name="TExtensionProvider">The extension provided type to create the extension.</typeparam>
            <param name="provider">The extension provided to create the extension.</param>
            <returns>The created extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreateBackend">
            <summary>
            Creates a new backend that is compatible with this accelerator.
            </summary>
            <returns>The created compatible backend.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``2(``1)">
            <summary>
            Allocates a buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(System.Int32)">
            <summary>
            Allocates a 1D buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated 1D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(ILGPU.Index2)">
            <summary>
            Allocates a 2D buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated 2D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(System.Int32,System.Int32)">
            <summary>
            Allocates a 2D buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="width">The width of the 2D buffer.</param>
            <param name="height">The height of the 2D buffer.</param>
            <returns>An allocated 2D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(ILGPU.Index3)">
            <summary>
            Allocates a 3D buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="extent">The extent (number of elements to allocate).</param>
            <returns>An allocated 3D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Allocate``1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a 2D buffer with the specified number of elements on this accelerator.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="width">The width of the 3D buffer.</param>
            <param name="height">The height of the 3D buffer.</param>
            <param name="depth">The depth of the 3D buffer.</param>
            <returns>An allocated 2D buffer on the this accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CreateStream">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <returns>The created accelerator stream.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Synchronize">
            <summary>
            Synchronizes pending operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.MakeCurrent">
            <summary>
            Makes this accelerator the current one for this thread.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.HasPeerAccess(ILGPU.Runtime.Accelerator)">
            <summary>
            Returns true iff peer access between the current and the given accelerator has been enabled.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns></returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CanAccessPeer(ILGPU.Runtime.Accelerator)">
            <summary>
            Returns true iff the current accelerator can directly access the memory
            of the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
            <returns>True, iff the current accelerator can directly access the memory
            of the given accelerator.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EnablePeerAccess(ILGPU.Runtime.Accelerator)">
            <summary>
            Enables peer access to the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DisablePeerAccess(ILGPU.Runtime.Accelerator)">
            <summary>
            Disables peer access to the given accelerator.
            </summary>
            <param name="otherAccelerator">The other accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateOccupancyPerMultiprocessor``1(ILGPU.Runtime.Kernel,``0)">
            <summary>
            Estimates the occupancy of the given kernel with the given group size of a single multiprocessor.
            </summary>
            <typeparam name="TIndex">The index type of the group dimension.</typeparam>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="groupDim">The group dimension.</param>
            <returns>The estimated occupancy in percent [0.0, 1.0] of a single multiprocessor.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateOccupancyPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32)">
            <summary>
            Estimates the occupancy of the given kernel with the given group size of a single multiprocessor.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="groupSize">The number of threads per group.</param>
            <returns>The estimated occupancy in percent [0.0, 1.0] of a single multiprocessor.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateOccupancyPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary>
            Estimates the occupancy of the given kernel with the given group size of a single multiprocessor.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="groupSize">The number of threads per group.</param>
            <param name="dynamicSharedMemorySizeInBytes">The required dynamic shared-memory size in bytes.</param>
            <returns>The estimated occupancy in percent [0.0, 1.0] of a single multiprocessor.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor``1(ILGPU.Runtime.Kernel,``0)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the given kernel.
            </summary>
            <typeparam name="TIndex">The index type of the group dimension.</typeparam>
            <param name="kernel">The kernel used for the computation of the maximum number of active groups.</param>
            <param name="groupDim">The group dimension.</param>
            <returns>The maximum number of active groups per multiprocessor for the given kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the given kernel.
            </summary>
            <param name="kernel">The kernel used for the computation of the maximum number of active groups.</param>
            <param name="groupSize">The number of threads per group.</param>
            <returns>The maximum number of active groups per multiprocessor for the given kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the given kernel.
            </summary>
            <param name="kernel">The kernel used for the computation of the maximum number of active groups.</param>
            <param name="groupSize">The number of threads per group.</param>
            <param name="dynamicSharedMemorySizeInBytes">The required dynamic shared-memory size in bytes.</param>
            <returns>The maximum number of active groups per multiprocessor for the given kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary>
            Estimates the maximum number of active groups per multiprocessor for the given kernel.
            </summary>
            <param name="kernel">The kernel used for the computation of the maximum number of active groups.</param>
            <param name="groupSize">The number of threads per group.</param>
            <param name="dynamicSharedMemorySizeInBytes">The required dynamic shared-memory size in bytes.</param>
            <remarks>Note that the arguments do not have to be verified since they are already verified.</remarks>
            <returns>The maximum number of active groups per multiprocessor for the given kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="dynamicSharedMemorySizeInBytes">The required dynamic shared-memory size in bytes.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="computeSharedMemorySize">A callback to compute the required amount of shared memory in bytes for a given group size.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="computeSharedMemorySize">A callback to compute the required amount of shared memory in bytes for a given group size.</param>
            <param name="maxGroupSize">The maximum group-size limit on a single multiprocessor.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="computeSharedMemorySize">A callback to compute the required amount of shared memory in bytes for a given group size.</param>
            <param name="maxGroupSize">The maximum group-size limit on a single multiprocessor.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <remarks>Note that the arguments do not have to be verified since they are already verified.</remarks>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSize(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="dynamicSharedMemorySizeInBytes">The required dynamic shared-memory size in bytes.</param>
            <param name="maxGroupSize">The maximum group-size limit on a single multiprocessor.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Estimates a group size to gain maximum occupancy on this device.
            </summary>
            <param name="kernel">The kernel used for the estimation.</param>
            <param name="dynamicSharedMemorySizeInBytes">The required dynamic shared-memory size in bytes.</param>
            <param name="maxGroupSize">The maximum group-size limit on a single multiprocessor.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <remarks>Note that the arguments do not have to be verified since they are already verified.</remarks>
            <returns>An estimated group size to gain maximum occupancy on this device.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ToString">
            <summary>
            Returns the string representation of this accelerator.
            </summary>
            <returns>The string representation of this accelerator.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.CachedKernelKey">
            <summary>
            A cached kernel key.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.#ctor(System.Reflection.MethodInfo,System.Nullable{System.Int32})">
            <summary>
            Constructs a new kernel key.
            </summary>
            <param name="method">The kernel method.</param>
            <param name="implicitGroupSize">The implicit group size (if any).</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernelKey.Method">
            <summary>
            Returns the associated kernel method.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernelKey.ImplicitGroupSize">
            <summary>
            Returns the associated implicit group size (if any).
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernelKey.Equals(ILGPU.Runtime.Accelerator.CachedKernelKey)">
            <summary>
            Returns true iff the given cached key is equal to the current one.
            </summary>
            <param name="key">The other key.</param>
            <returns>True, iff the given cached key is equal to the current one.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.CachedKernel">
            <summary>
            A cached kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernel.#ctor(ILGPU.Runtime.Kernel)">
            <summary>
            Constructs a new cached kernel.
            </summary>
            <param name="kernel">The kernel to cache.</param>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CachedKernel.#ctor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary>
            Constructs a new cached kernel.
            </summary>
            <param name="kernel">The kernel to cache.</param>
            <param name="groupSize">The computed group size.</param>
            <param name="minGridSize">The computed minimum grid size.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernel.Kernel">
            <summary>
            Returns the cached kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernel.GroupSize">
            <summary>
            Returns the computed group size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.CachedKernel.MinGridSize">
            <summary>
            Returns the computed minimum grid size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.CompileKernel(System.Reflection.MethodInfo)">
            <summary>
            Compiles the given method into a <see cref="T:ILGPU.Compiler.CompiledKernel"/>.
            </summary>
            <param name="method">The method to compile into a <see cref="T:ILGPU.Compiler.CompiledKernel"/> .</param>
            <returns>The compiled kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel(ILGPU.Compiler.CompiledKernel)">
            <summary>
            Loads the given kernel.
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            Hence, it has to be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel(ILGPU.Compiler.CompiledKernel,System.Int32)">
            <summary>
            Loads the given implicitly-grouped kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            Hence, it has to be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(ILGPU.Compiler.CompiledKernel)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            Hence, it has to be disposed manually.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(ILGPU.Compiler.CompiledKernel,System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel.</returns>
            <remarks>
            Note that the returned kernel will not be managed by the kernel cache.
            Hence, it has to be disposed manually.
            </remarks>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.IKernelLoader">
            <summary>
            Represents a generic kernel loader.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.IKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Compiler.CompiledKernel)">
            <summary>
            Loads the given kernel using the given accelerator.
            </summary>
            <param name="accelerator">The target accelerator for the loading operation.</param>
            <param name="compiledKernel">The compiled kernel to load.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.IKernelLoader.FetchInformation(ILGPU.Runtime.Accelerator.CachedKernel)">
            <summary>
            Fetches information from the given cached kernel.
            </summary>
            <param name="cachedKernel">The cached kernel.</param>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.ILauncherProvider">
            <summary>
            Represents a launcher provider to create launcher delegates.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.ILauncherProvider.CreateLauncher``1(ILGPU.Runtime.Kernel)">
            <summary>
            Creates a launcher delegate for the given kernel.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="kernel">The kernel for the creation operation.</param>
            <returns>A launcher delegate for the given kernel.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.DefaultKernelLoader">
            <summary>
            Represents a default kernel loader.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DefaultKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Compiler.CompiledKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.IKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Compiler.CompiledKernel)"/>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DefaultKernelLoader.FetchInformation(ILGPU.Runtime.Accelerator.CachedKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.IKernelLoader.FetchInformation(ILGPU.Runtime.Accelerator.CachedKernel)"/>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.GroupedKernelLoader">
            <summary>
            Represents a grouped kernel loader for implicitly-grouped kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.GroupedKernelLoader.#ctor(System.Int32)">
            <summary>
            Constructs a new grouped kernel loader.
            </summary>
            <param name="groupSize">The custom group size.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.GroupedKernelLoader.GroupSize">
            <summary>
            Returns the custom group size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.GroupedKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Compiler.CompiledKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.IKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Compiler.CompiledKernel)"/>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.GroupedKernelLoader.FetchInformation(ILGPU.Runtime.Accelerator.CachedKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.IKernelLoader.FetchInformation(ILGPU.Runtime.Accelerator.CachedKernel)"/>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.AutoKernelLoader">
            <summary>
            Represents an automatically configured grouped kernel loader for implicitly-grouped kernels.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.AutoKernelLoader.GroupSize">
            <summary>
            Returns the computed group size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.AutoKernelLoader.MinGridSize">
            <summary>
            Returns the computed minumum grid size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.AutoKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Compiler.CompiledKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.IKernelLoader.LoadKernel(ILGPU.Runtime.Accelerator,ILGPU.Compiler.CompiledKernel)"/>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.AutoKernelLoader.FetchInformation(ILGPU.Runtime.Accelerator.CachedKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.IKernelLoader.FetchInformation(ILGPU.Runtime.Accelerator.CachedKernel)"/>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.DefaultStreamLauncherProvider">
            <summary>
            Represents a default launcher provider for kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.DefaultStreamLauncherProvider.CreateLauncher``1(ILGPU.Runtime.Kernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.ILauncherProvider.CreateLauncher``1(ILGPU.Runtime.Kernel)"/>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.StreamLauncherProvider">
            <summary>
            Represents an implicit-stream-launcher provider for kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.StreamLauncherProvider.#ctor(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Constructs a new stream-launcher provider.
            </summary>
            <param name="stream">The associated accelerator stream.</param>
        </member>
        <member name="P:ILGPU.Runtime.Accelerator.StreamLauncherProvider.Stream">
            <summary>
            Returns the associated accelerator stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.StreamLauncherProvider.CreateLauncher``1(ILGPU.Runtime.Kernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.ILauncherProvider.CreateLauncher``1(ILGPU.Runtime.Kernel)"/>
        </member>
        <member name="T:ILGPU.Runtime.Accelerator.LauncherProvider">
            <summary>
            Represents a launcher provider for kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LauncherProvider.CreateLauncher``1(ILGPU.Runtime.Kernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.ILauncherProvider.CreateLauncher``1(ILGPU.Runtime.Kernel)"/>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadGenericKernel``1(System.Reflection.MethodInfo,System.Nullable{System.Int32},``0@)">
            <summary>
            Loads a kernel specified by the given method.
            </summary>
            <typeparam name="TKernelLoader">The type of the custom kernel loader.</typeparam>
            <param name="method">The method to compile into a kernel.</param>
            <param name="groupSize">The custom group size for implicitly-grouped kernels (if any).</param>
            <param name="kernelLoader">The kernel loader.</param>
            <returns>The loaded kernel.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadGenericKernel``3(System.Reflection.MethodInfo,System.Nullable{System.Int32},``1@,``2@)">
            <summary>
            Loads a kernel specified by the given method and returns a launcher of the specified type.
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <typeparam name="TKernelLoader">The type of the custom kernel loader.</typeparam>
            <typeparam name="TLauncherProvider">The type of the custom launcher provider.</typeparam>
            <param name="method">The method to compile into a kernel.</param>
            <param name="groupSize">The custom group size for implicitly-grouped kernels (if any).</param>
            <param name="kernelLoader">The kernel loader.</param>
            <param name="launcherProvider">The launcher provider.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel(System.Reflection.MethodInfo)">
            <summary>
            Loads the given kernel. Implictly-grouped kernels will be launched
            with a group size of the current warp size of the accelerator.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel.</returns>
            <remarks>Note that the returned kernel must not be disposed manually.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Loads the given implicitly-grouped kernel. Implictly-grouped kernel
            will be launched with the given group size.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel.</returns>
            <remarks>Note that the returned kernel must not be disposed manually.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(System.Reflection.MethodInfo)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel.</returns>
            <remarks>Note that the returned kernel must not be disposed manually.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(System.Reflection.MethodInfo,System.Int32@,System.Int32@)">
            <summary>
            Loads the given implicitly-grouped kernel while using an automatically
            computed grouping configuration.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel.</returns>
            <remarks>Note that the returned kernel must not be disposed manually.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadKernel``1(System.Reflection.MethodInfo)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadStreamKernel``1(System.Reflection.MethodInfo)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadStreamKernel``1(System.Reflection.MethodInfo,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="method">The method to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel``1(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedStreamKernel``1(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedStreamKernel``1(System.Reflection.MethodInfo,System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel``1(System.Reflection.MethodInfo,System.Int32@,System.Int32@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel``1(System.Reflection.MethodInfo)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedStreamKernel``1(System.Reflection.MethodInfo,System.Int32@,System.Int32@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedStreamKernel``1(System.Reflection.MethodInfo)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedStreamKernel``1(System.Reflection.MethodInfo,ILGPU.Runtime.AcceleratorStream,System.Int32@,System.Int32@)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <param name="groupSize">The estimated group size to gain maximum occupancy on this device.</param>
            <param name="minGridSize">The minimum grid size to gain maximum occupancy on this device.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedStreamKernel``1(System.Reflection.MethodInfo,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <param name="method">The method to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorId">
            <summary>
            Represents a single accelerator reference.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.#ctor(ILGPU.Runtime.AcceleratorType,System.Int32)">
            <summary>
            Constructs a new accelerator id.
            </summary>
            <param name="type">The accelerator type.</param>
            <param name="deviceId">The referenced device id.</param>
        </member>
        <member name="P:ILGPU.Runtime.AcceleratorId.AcceleratorType">
            <summary>
            Retunrs the type of the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.AcceleratorId.DeviceId">
            <summary>
            Retunrs the device id of the associated accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.Equals(ILGPU.Runtime.AcceleratorId)">
            <summary>
            Returns true iff the given accelerator id is equal to the current accelerator id.
            </summary>
            <param name="other">The other accelerator id.</param>
            <returns>True, iff the given accelerator id is equal to the current accelerator id.</returns>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current accelerator id.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current accelerator id.</returns>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.GetHashCode">
            <summary>
            Returns the hash code of this accelerator id.
            </summary>
            <returns>The hash code of this accelerator id.</returns>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.ToString">
            <summary>
            Returns the string representation of this accelerator id.
            </summary>
            <returns>The string representation of this accelerator id.</returns>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.op_Equality(ILGPU.Runtime.AcceleratorId,ILGPU.Runtime.AcceleratorId)">
            <summary>
            Returns true iff the first and second accelerator id are the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second accelerator id are the same.</returns>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorId.op_Inequality(ILGPU.Runtime.AcceleratorId,ILGPU.Runtime.AcceleratorId)">
            <summary>
            Returns true iff the first and second accelerator id are not the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second accelerator id are not the same.</returns>
        </member>
        <member name="T:ILGPU.Runtime.AcceleratorStream">
            <summary>
            Represents an abstract kernel stream for async processing.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.#ctor">
            <summary>
            Constructs a new accelerator stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.Synchronize">
            <summary>
            Synchronizes all queued operations.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.AcceleratorStream.SynchronizeAsync">
            <summary>
            Synchronizes all queued operations asynchronously.
            </summary>
            <returns>A task object to wait for.</returns>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUAccelerator">
            <summary>
            Represents a general CPU-based runtime for kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context,ILGPU.CompileUnitFlags)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="flags">The compile-unit flags.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context,System.Int32)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="numThreads">The number of threads for paralllel processing.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context,System.Int32,ILGPU.CompileUnitFlags)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="numThreads">The number of threads for paralllel processing.</param>
            <param name="flags">The compile-unit flags.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context,System.Int32,System.Int32)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="numThreads">The number of threads for paralllel processing.</param>
            <param name="warpSize">The number of threads per warp.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context,System.Int32,System.Int32,ILGPU.CompileUnitFlags)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="numThreads">The number of threads for paralllel processing.</param>
            <param name="warpSize">The number of threads per warp.</param>
            <param name="flags">The compile-unit flags.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context,System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="numThreads">The number of threads for paralllel processing.</param>
            <param name="threadPriority">The thread priority of the execution threads.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context,System.Int32,System.Threading.ThreadPriority,ILGPU.CompileUnitFlags)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="numThreads">The number of threads for paralllel processing.</param>
            <param name="threadPriority">The thread priority of the execution threads.</param>
            <param name="flags">The compile-unit flags.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context,System.Int32,System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="numThreads">The number of threads for paralllel processing.</param>
            <param name="warpSize">The number of threads per warp.</param>
            <param name="threadPriority">The thread priority of the execution threads.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.#ctor(ILGPU.Context,System.Int32,System.Int32,System.Threading.ThreadPriority,ILGPU.CompileUnitFlags)">
            <summary>
            Constructs a new CPU runtime.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="numThreads">The number of threads for paralllel processing.</param>
            <param name="warpSize">The number of threads per warp.</param>
            <param name="threadPriority">The thread priority of the execution threads.</param>
            <param name="flags">The compile-unit flags.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAccelerator.NumThreads">
            <summary>
            Returns the number of threads.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.CreateExtension``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateExtension``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.CreateBackend">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateBackend"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.Allocate``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.Allocate``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadKernel(ILGPU.Compiler.CompiledKernel,System.Int32)">
            <summary>
            Loads the given kernel.
            </summary>
            <param name="kernel">The kernel to load.</param>
            <param name="customGroupSize">The custom group size.</param>
            <returns>The loaded kernel</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadKernel(ILGPU.Compiler.CompiledKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.LoadKernel(ILGPU.Compiler.CompiledKernel)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadImplicitlyGroupedKernel(ILGPU.Compiler.CompiledKernel,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel(ILGPU.Compiler.CompiledKernel,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.LoadAutoGroupedKernel(ILGPU.Compiler.CompiledKernel,System.Int32@,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(ILGPU.Compiler.CompiledKernel,System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.CreateStream">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateStream"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.Synchronize">
            <summary cref="M:ILGPU.Runtime.Accelerator.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.MakeCurrent">
            <summary cref="M:ILGPU.Runtime.Accelerator.MakeCurrent"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.CanAccessPeer(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CanAccessPeer(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EnablePeerAccess(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EnablePeerAccess(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.DisablePeerAccess(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.DisablePeerAccess(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.ComputeNumGroupThreads(System.Int32)">
            <summary>
            Computes the number of required threads to reach the requested group size.
            </summary>
            <param name="groupSize">The requested group size.</param>
            <returns>The number of threads to reach the requested groupn size.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.Launch(ILGPU.Runtime.CPU.CPUAcceleratorTask)">
            <summary>
            Launches the given accelerator task on this accelerator.
            </summary>
            <param name="task">The task to launch.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.ExecuteThread(System.Object)">
            <summary>
            Entry point for a single processing thread.
            </summary>
            <param name="arg">The relative thread index.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.GenerateKernelLauncherMethod(ILGPU.Compiler.CompiledKernel,System.Type@,System.Reflection.FieldInfo[]@,System.Int32)">
            <summary>
            Generates a dynamic kernel-launcher method that will be just-in-time compiled
            during the first invocation. Using the generated launcher lowers the overhead
            for kernel launching dramatically, since unnecessary operations (like boxing)
            can be avoided.
            </summary>
            <param name="kernel">The kernel to generate a launcher for.</param>
            <param name="taskType">The created task.</param>
            <param name="taskArgumentMapping">The created task-argument mapping that maps parameter indices of uniforms</param>
            <param name="customGroupSize">The custom group size for the launching operation.</param>
            <returns>The generated launcher method.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.GenerateAcceleratorTask(ILGPU.Compiler.CompiledKernel,System.Type[],System.Type@,System.Reflection.ConstructorInfo@,System.Reflection.FieldInfo[]@)">
            <summary>
            Generates specialized task classes for kernel execution.
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="kernelParamTypes">The required launch parameter types.</param>
            <param name="taskType">The created task.</param>
            <param name="taskConstructor">The created task constructor.</param>
            <param name="taskArgumentMapping">The created task-argument mapping that maps parameter indices of uniforms
            and dynamically-sized shared-memory-variable-length specifications to fields in the task class.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.GenerateKernelExecutionMethod(ILGPU.Compiler.CompiledKernel,System.Type,System.Reflection.FieldInfo[])">
            <summary>
            Generates specialized task classes for kernel execution.
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="taskType">The created task.</param>
            <param name="taskArgumentMapping">The created task-argument mapping that maps parameter indices of uniforms
            and dynamically-sized shared-memory-variable-length specifications to fields in the task class.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAccelerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUKernelExecutionHandler">
            <summary>
            Execution delegate for CPU kernels inside the runtime system.
            </summary>
            <param name="task">The referenced task.</param>
            <param name="groupBarrier">The current group barrier.</param>
            <param name="sharedMemory">An array view pointing to available shared memory.</param>
            <param name="runtimeThreadOffset">The thread offset within the current group (WarpId * WarpSize + WarpThreadIdx).</param>
            <param name="groupSize">The group size in the scope of the runtime system.</param>
            <param name="numRuntimeGroups">The currently used number of processing threads.</param>
            <param name="numUsedRuntimeThreads">The currently used number of processing threads.</param>
            <param name="chunkSize">The size of a grid-idx chunk to process.</param>
            <param name="chunkOffset">The offset of the current processing chunk.</param>
            <param name="targetDimension">The target kernel dimension.</param>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUAcceleratorTask">
            <summary>
            Represents a single CPU-accelerator task.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUAcceleratorTask.ConstructorParameterTypes">
            <summary>
            Contains the required parameter types of the default task constructor.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUAcceleratorTask.ExecuteParameterTypes">
            <summary>
            Contains the required parameter types of the task-execution method.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAcceleratorTask.#ctor(ILGPU.Runtime.CPU.CPUKernelExecutionHandler,ILGPU.Index3,ILGPU.Index3,ILGPU.Index3,ILGPU.Index3,System.Int32)">
            <summary>
            Constructs a new accelerator task.
            </summary>
            <param name="kernelExecutionDelegate">The execution method.</param>
            <param name="userGridDim">The grid dimension that was specified by the user.</param>
            <param name="userGroupDim">The group dimension that was specified by the user.</param>
            <param name="gridDim">The grid dimension.</param>
            <param name="groupDim">The group dimension.</param>
            <param name="sharedMemSize">The required amount of shareed-memory per thread group in bytes.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.UserGridDim">
            <summary>
            Returns the grid dimension that was specified by the user.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.UserDimension">
            <summary>
            Returns the user-defined kernel dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.GridDim">
            <summary>
            Returns the current grid dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.GroupDim">
            <summary>
            Returns the current group dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.RuntimeDimension">
            <summary>
            Returns the runtime-defined kernel dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.SharedMemSize">
            <summary>
            Returns the required amount of shared-memory per thread group in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUAcceleratorTask.KernelExecutionDelegate">
            <summary>
            Returns the associated kernel-execution delegate.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUAcceleratorTask.Execute(System.Threading.Barrier,ILGPU.ArrayView{System.Byte},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes this task inside the runtime system.
            </summary>
            <param name="sharedMemory">An array view pointing to available shared memory.</param>
            <param name="groupBarrier">The current group barrier.</param>
            <param name="runtimeThreadOffset">The thread offset within the current group (WarpId * WarpSize + WarpThreadIdx).</param>
            <param name="groupSize">The group size in the scope of the runtime system.</param>
            <param name="numRuntimeGroups">The currently used number of processing threads.</param>
            <param name="numUsedRuntimeThreads">The currently used number of processing threads.</param>
            <param name="chunkSize">The size of a grid-idx chunk to process.</param>
            <param name="chunkOffset">The offset of the current processing chunk.</param>
            <param name="targetDimension">The target kernel dimension.</param>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUKernel">
            <summary>
            Represents a single CPU kernel.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUKernel.#ctor(ILGPU.Runtime.CPU.CPUAccelerator,ILGPU.Compiler.CompiledKernel,System.Reflection.MethodInfo,ILGPU.Runtime.CPU.CPUKernelExecutionHandler)">
            <summary>
            Loads a compiled kernel into the given Cuda context as kernel program.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="kernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
            <param name="kernelExecutionDelegate">The execution method.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUKernel.CPUAccelerator">
            <summary>
            Returns the associated CPU runtime.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPUKernel.KernelExecutionDelegate">
            <summary>
            Returns the associated kernel-execution delegate.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUKernel.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUMemoryBuffer`2">
            <summary>
            Represents a managed array that was pinned for unmanaged memory accesses.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.gcHandle">
            <summary>
            Holds the gc handle of the pinned object.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.array">
            <summary>
            A handle to the managed array.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.#ctor(ILGPU.Runtime.CPU.CPUAccelerator,`1)">
            <summary>
            Constructs a new pinned array.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="extent">The extent.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.CopyToViewInternal(ILGPU.ArrayView{`0,ILGPU.Index},ILGPU.Runtime.AcceleratorType,`1,ILGPU.Runtime.AcceleratorStream)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyToViewInternal(ILGPU.ArrayView{`0,ILGPU.Index},ILGPU.Runtime.AcceleratorType,`1,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.CopyFromViewInternal(ILGPU.ArrayView{`0,ILGPU.Index},ILGPU.Runtime.AcceleratorType,`1,ILGPU.Runtime.AcceleratorStream)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromViewInternal(ILGPU.ArrayView{`0,ILGPU.Index},ILGPU.Runtime.AcceleratorType,`1,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer.MemSetToZero(ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.GetArray">
            <summary>
            Returns the managed array.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUMemoryBuffer`2.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeGroupContext">
            <summary>
            Represents a runtime context for thread groups.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.currentContext">
            <summary>
            Represents the current context.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeGroupContext.groupCounter">
            <summary>
            A counter for the computation of interlocked group counters.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Current">
            <summary>
            Returns the current group runtime context.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.#ctor(ILGPU.Runtime.CPU.CPUAccelerator)">
            <summary>
            Constructs a new CPU-based runtime context for parallel processing.
            </summary>
            <param name="accelerator">The target CPU accelerator.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.GroupDim">
            <summary>
            Returns the current group dimension.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.GroupSize">
            <summary>
            Returns the current total group size in number of threads.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.SharedMemory">
            <summary>
            Returns the associated shared memory.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeGroupContext.WarpSize">
            <summary>
            Returns the associated warp size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Barrier">
            <summary>
            Executes a thread barrier.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BarrierPopCount(System.Boolean)">
            <summary>
            Executes a thread barrier and returns the number of threads for which
            the predicate evaluated to true.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>The number of threads for which the predicate evaluated to true.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BarrierAnd(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true iff all threads in a block
            fullfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, iff all threads in a block fullfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.BarrierOr(System.Boolean)">
            <summary>
            Executes a thread barrier and returns true iff any thread in a block
            fullfills the predicate.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <returns>True, iff any thread in a block fullfills the predicate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Initialize(ILGPU.Index3,System.Int32)">
            <summary>
            Initializes this context.
            </summary>
            <param name="groupDim">The group dimension.</param>
            <param name="sharedMemSize">The required shared-memory size in bytes used by this group.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.MakeCurrent(ILGPU.ArrayView{System.Byte}@,System.Threading.Barrier@)">
            <summary>
            Makes the current context the active one for this thread.
            </summary>
            <param name="sharedMemory">Outputs the current shared-memory view.</param>
            <param name="groupSynchronizationBarrier">Outputs the current group barrier.</param>
            <returns>The associated shared memory.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeGroupContext.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPURuntimeWarpContext">
            <summary>
            Represents a runtime context for warps.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeWarpContext.currentContext">
            <summary>
            Represents the current context.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeWarpContext.currentWarpIdx">
            <summary>
            Represents the current warp idx.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.CPU.CPURuntimeWarpContext.currentLaneIdx">
            <summary>
            Represents the current lane idx.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.Current">
            <summary>
            Returns the current warp runtime context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.WarpIdx">
            <summary>
            Returns the current warp idx.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.LaneIdx">
            <summary>
            Returns the current lane idx.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.IsValidWarpSize(System.Int32)">
            <summary>
            Returns true iff the given warp size is a valid warp size.
            </summary>
            <param name="warpSize">The warp size to test.</param>
            <returns>True, iff the given warp size is a valid warp size.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.#ctor(ILGPU.Runtime.CPU.CPUAccelerator)">
            <summary>
            Constructs a new CPU-based runtime context for parallel processing.
            </summary>
            <param name="accelerator">The target CPU accelerator.</param>
        </member>
        <member name="P:ILGPU.Runtime.CPU.CPURuntimeWarpContext.WarpSize">
            <summary>
            Returns the associated warp size.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.EnterShuffle``1(``0,System.Int32)">
            <summary>
            Enters a shuffle operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="width">The width of the shuffle operation.</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ExitShuffle``1(System.Int32)">
            <summary>
            Exits a shuffle operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="laneIdx">The absolute source lane index to load from.</param>
            <returns>The loaded value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ExitShuffle``1(``0)">
            <summary>
            Exits a shuffle operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <returns>The shuffle variable.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.Shuffle``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the specified source lane.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="sourceLane">The source lane.</param>
            <param name="width">The width of the shuffle operation.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ShuffleDown``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane + delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to add to the current lane.</param>
            <param name="width">The width of the shuffle operation.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ShuffleUp``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane - delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to subtract to the current lane.</param>
            <param name="width">The width of the shuffle operation.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.ShuffleXor``1(``0,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane xor mask.
            The width of the shuffle operation is the warp size.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="variable">The source variable to shuffle.</param>
            <param name="mask">The mask to xor to the current lane.</param>
            <param name="width">The width of the shuffle operation.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.Initialize(System.Int32,System.Int32@)">
            <summary>
            Initializes the wrap context.
            </summary>
            <param name="runtimeGroupThreadIdx">The current relative group-thread index.</param>
            <param name="runtimeThreadOffset">The thread offset within the current group (WarpId * WarpSize + WarpThreadIdx).</param>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.MakeCurrent">
            <summary>
            Makes the current context the active one for this thread.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPURuntimeWarpContext.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.CPU.CPUStream">
            <summary>
            Represents a CPU stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUStream.Synchronize">
            <summary cref="M:ILGPU.Runtime.AcceleratorStream.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.CPU.CPUStream.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize">
            <summary>
            Computes the amount of shared memory for the given block size.
            </summary>
            <param name="blockSize">The block size.</param>
            <returns>The amount of required shared memory.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.ComputeManagedDynamicMemorySizeForBlockSize">
            <summary>
            Computes the amount of shared memory for the given block size.
            </summary>
            <param name="blockSize">The block size.</param>
            <returns>The amount of required shared memory.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.CudaAPI">
            <summary>
            Wraps the Cuda-driver API.
            </summary>
            <remarks>
            Since the current implementation of dotnetcore does not support
            platform-dependent DLL imports with different entry point and libs,
            we have to wrap the direct low-level calls with (slow) virtual dispatchers.
            This will be removed as soon as dotnetcore adds additional support.
            </remarks>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.API.CudaAPI.Current">
            <summary>
            Returns the driver API for the current platform.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.InitAPI">
            <summary>
            Initializes the driver API.
            </summary>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDriverVersion(System.Int32@)">
            <summary>
            Resolves the current driver version.
            </summary>
            <param name="driverVersion">The resolved driver version.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetErrorString(ILGPU.Runtime.Cuda.CudaError,System.IntPtr@)">
            <summary>
            Resolves the error string for the given error status.
            </summary>
            <param name="error">The error to resolve.</param>
            <param name="pStr">The resolved error string.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetErrorString(ILGPU.Runtime.Cuda.CudaError)">
            <summary>
            Resolves the error string for the given error status.
            </summary>
            <param name="error">The error to resolve.</param>
            <returns>The resolved error string.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDevice(System.Int32@,System.Int32)">
            <summary>
            Resolves the device id for the given ordinal.
            </summary>
            <param name="device">The device id.</param>
            <param name="ordinal">The device ordinal.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceCount(System.Int32@)">
            <summary>
            Resolves the number of available devices.
            </summary>
            <param name="count">The number of devices</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceName(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Resolves the name of a device.
            </summary>
            <param name="bytes">The memory buffer in bytes.</param>
            <param name="length">The maximum length to resolve.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceName(System.String@,System.Int32)">
            <summary>
            Resolves the name of a device.
            </summary>
            <param name="name">The resolved name.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetTotalDeviceMemory(System.IntPtr@,System.Int32)">
            <summary>
            Resolves total device memory.
            </summary>
            <param name="bytes">The number of bytes.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetTotalDeviceMemory(System.Int64@,System.Int32)">
            <summary>
            Resolves total device memory.
            </summary>
            <param name="bytes">The number of bytes.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceAttribute(System.Int32@,ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)">
            <summary>
            Resolves the value of the given device attribute.
            </summary>
            <param name="value">The resolved value.</param>
            <param name="attribute">The device attribute.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceAttribute(ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)">
            <summary>
            Resolves the value of the given device attribute.
            </summary>
            <param name="attribute">The device attribute.</param>
            <param name="device">The device.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Resolves the compute capability of the given device.
            </summary>
            <param name="major">The major capability.</param>
            <param name="minor">The minor capability.</param>
            <param name="device">The device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)">
            <summary>
            Creates a new context.
            </summary>
            <param name="context">The created context.</param>
            <param name="flags">The flags to use.</param>
            <param name="device">The target device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContextD3D11(System.IntPtr@,System.Int32@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.IntPtr)">
            <summary>
            Creates a new context with D3D11 support
            </summary>
            <param name="context">The created context.</param>
            <param name="flags">The flags to use.</param>
            <param name="device">The target device.</param>
            <param name="d3dDevice">The associated D3D11 device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyContext(System.IntPtr)">
            <summary>
            Destroys the given context.
            </summary>
            <param name="context">The context to destroy.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCurrentContext(System.IntPtr)">
            <summary>
            Make the given context the current one.
            </summary>
            <param name="context">The context.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.SynchronizeContext">
            <summary>
            Synchronizes the current context.
            </summary>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)">
            <summary>
            Resolves the cache configuration.
            </summary>
            <param name="config">The resolved cache configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)">
            <summary>
            Updates the cache configuration.
            </summary>
            <param name="config">The updated cache configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)">
            <summary>
            Resolves the shared-memory configuration.
            </summary>
            <param name="config">The resolved shared-memory configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)">
            <summary>
            Updates the shared-memory configuration.
            </summary>
            <param name="config">The updated shared-memory configuration.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.CanAccessPeer(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Resolves whether the given device can access the given peer device.
            </summary>
            <param name="canAccess">True, iff the device can access the peer device.</param>
            <param name="device">The device.</param>
            <param name="peerDevice">The peer device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.EnablePeerAccess(System.IntPtr,System.Int32)">
            <summary>
            Enables peer access to the given context.
            </summary>
            <param name="peerContext">The peer context.</param>
            <param name="flags">The flags to use.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.DisablePeerAccess(System.IntPtr)">
            <summary>
            Disables peer access to the given context.
            </summary>
            <param name="peerContext">The peer context.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)">
            <summary>
            Resolves the given peer attribute.
            </summary>
            <param name="value">The resolved value.</param>
            <param name="attribute">The attribute to resolve.</param>
            <param name="sourceDevice">The source device.</param>
            <param name="destinationDevice">The destination device.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetMemoryInfo(System.IntPtr@,System.IntPtr@)">
            <summary>
            Resolves memory information.
            </summary>
            <param name="free">The amount of free memory.</param>
            <param name="total">The total amount of memory.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetMemoryInfo(System.Int64@,System.Int64@)">
            <summary>
            Resolves memory information.
            </summary>
            <param name="free">The amount of free memory.</param>
            <param name="total">The total amount of memory.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.AllocateMemory(System.IntPtr@,System.IntPtr)">
            <summary>
            Allocates memory on the current device.
            </summary>
            <param name="devicePtr">The resulting device pointer.</param>
            <param name="bytesize">The size of the allocation in bytes.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.FreeMemory(System.IntPtr)">
            <summary>
            Frees the given device pointer.
            </summary>
            <param name="devicePtr">The device pointer.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memcpy(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-copy operation.
            </summary>
            <param name="destination">The destination.</param>
            <param name="source">The source.</param>
            <param name="length">The number of bytes to copy.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Performs a memory-copy operation from host to device memory.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="sourceHost">The source in host memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">The accelerator stream for async processing.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-copy operation from host to device memory.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="sourceHost">The source in host memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">The accelerator stream for async processing.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Performs a memory-copy operation from device to host memory.
            </summary>
            <param name="destinationHost">The destination in host memory.</param>
            <param name="sourceDevice">The source in device memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">The accelerator stream for async processing.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-copy operation from device to host memory.
            </summary>
            <param name="destinationHost">The destination in host memory.</param>
            <param name="sourceDevice">The source in device memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">The accelerator stream for async processing.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Performs a memory-copy operation from device to device memory.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="sourceDevice">The source in device memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">The accelerator stream for async processing.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Performs a memory-copy operation from device to device memory.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="sourceDevice">The source in device memory.</param>
            <param name="length">The number of bytes to copy.</param>
            <param name="stream">The accelerator stream for async processing.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr)">
            <summary>
            Performs a memory-set operation.
            </summary>
            <param name="destinationDevice">The destination in device memory.</param>
            <param name="value">The value to set.</param>
            <param name="length">The length in bytes.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)">
            <summary>
            Resolves a pointer-attribute value.
            </summary>
            <param name="targetPtr">The target pointer.</param>
            <param name="attribute">The attribute to resolve.</param>
            <param name="devicePtr">The pointer in device memory.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <param name="stream">The created stream.</param>
            <param name="flags">The flags to use.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)">
            <summary>
            Creates a new accelerator stream.
            </summary>
            <param name="stream">The created stream.</param>
            <param name="flags">The flags to use.</param>
            <param name="priority">The priority to use.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyStream(System.IntPtr)">
            <summary>
            Destroys the given stream.
            </summary>
            <param name="stream">The stream to destroy.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.SynchronizeStream(System.IntPtr)">
            <summary>
            Synchronizes with the given stream.
            </summary>
            <param name="stream">The stream to synchronize with.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.LoadModule(System.IntPtr@,System.Byte[])">
            <summary>
            Loads the given kernel module into driver memory.
            </summary>
            <param name="kernelModule">The loaded module.</param>
            <param name="moduleData">The module data to load.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyModule(System.IntPtr)">
            <summary>
            Unlods the given module.
            </summary>
            <param name="kernelModule">The module to unload.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)">
            <summary>
            Resolves the requested function handle in the scope of the given module.
            </summary>
            <param name="kernelFunction">The resolved function.</param>
            <param name="kernelModule">The module.</param>
            <param name="functionName">The name of the function.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Launches the given kernel function.
            </summary>
            <param name="kernelFunction">The function to launch.</param>
            <param name="gridDimX">The grid dimension in X dimension.</param>
            <param name="gridDimY">The grid dimension in Y dimension.</param>
            <param name="gridDimZ">The grid dimension in Z dimension.</param>
            <param name="blockDimX">The block dimension in X dimension.</param>
            <param name="blockDimY">The block dimension in Y dimension.</param>
            <param name="blockDimZ">The block dimension in Z dimension.</param>
            <param name="sharedMemSizeInBytes">The shared-memory size in bytes.</param>
            <param name="stream">The associated accelerator stream.</param>
            <param name="args">The arguments.</param>
            <param name="kernelArgs">The kernel arguments.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Computes the maximum number of blocks for maximum occupancy. 
            </summary>
            <param name="numBlocks">The number of blocks.</param>
            <param name="func">The function.</param>
            <param name="blockSize">The desired block size.</param>
            <param name="dynamicSMemSize">The size of the required shared memory.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)">
            <summary>
            Computes the maximum potential block size to for maximum occupancy.
            </summary>
            <param name="minGridSize">The minimum grid size for maximum occupancy.</param>
            <param name="blockSize">The block size for maximum occupancy.</param>
            <param name="func">The function.</param>
            <param name="blockSizeToDynamicSMemSize">Computes the amount of required shared-memory for the given block size.</param>
            <param name="dynamicSMemSize">The size of the required shared memory (independent of the block size).</param>
            <param name="blockSizeLimit">The block-size limit.</param>
            <returns>The error status.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeManagedDynamicMemorySizeForBlockSize,System.Int32,System.Int32)">
            <summary>
            Computes the maximum potential block size to for maximum occupancy.
            </summary>
            <param name="minGridSize">The minimum grid size for maximum occupancy.</param>
            <param name="blockSize">The block size for maximum occupancy.</param>
            <param name="func">The function.</param>
            <param name="blockSizeToDynamicSMemSize">Computes the amount of required shared-memory for the given block size.</param>
            <param name="dynamicSMemSize">The size of the required shared memory (independent of the block size).</param>
            <param name="blockSizeLimit">The block-size limit.</param>
            <returns>The error status.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI">
            <summary>
            Represents the not-supported Cuda-driver API.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.InitAPI">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.InitAPI"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetDriverVersion(System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDriverVersion(System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetErrorString(ILGPU.Runtime.Cuda.CudaError,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetErrorString(ILGPU.Runtime.Cuda.CudaError,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetDevice(System.Int32@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDevice(System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetDeviceCount(System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDevice(System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetDeviceName(System.Byte[],System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceName(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetTotalDeviceMemory(System.IntPtr@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetTotalDeviceMemory(System.IntPtr@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetDeviceAttribute(System.Int32@,ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceAttribute(System.Int32@,ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.CreateContextD3D11(System.IntPtr@,System.Int32@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContextD3D11(System.IntPtr@,System.Int32@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.DestroyContext(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyContext(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.SetCurrentContext(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCurrentContext(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.SynchronizeContext">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SynchronizeContext"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.CanAccessPeer(System.Int32@,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CanAccessPeer(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.EnablePeerAccess(System.IntPtr,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.EnablePeerAccess(System.IntPtr,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.DisablePeerAccess(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DisablePeerAccess(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetMemoryInfo(System.IntPtr@,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetMemoryInfo(System.IntPtr@,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.AllocateMemory(System.IntPtr@,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.AllocateMemory(System.IntPtr@,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.FreeMemory(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.FreeMemory(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.Memcpy(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.DestroyStream(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyStream(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.LoadModule(System.IntPtr@,System.Byte[])">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LoadModule(System.IntPtr@,System.Byte[])"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.DestroyModule(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyModule(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NotSupportedCudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.CudaAPIUnix">
            <summary>
            Represents the Cuda-driver API for Unix.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.API.CudaAPIUnix.LibName">
            <summary>
            Represents the driver library name.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.#ctor">
            <summary>
            Intializes a new driver API for Unix.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.InitAPI">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.InitAPI"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetDriverVersion(System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDriverVersion(System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetErrorString(ILGPU.Runtime.Cuda.CudaError,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetErrorString(ILGPU.Runtime.Cuda.CudaError,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetDevice(System.Int32@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDevice(System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetDeviceCount(System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDevice(System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetDeviceName(System.Byte[],System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceName(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetTotalDeviceMemory(System.IntPtr@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetTotalDeviceMemory(System.IntPtr@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetDeviceAttribute(System.Int32@,ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceAttribute(System.Int32@,ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.CreateContextD3D11(System.IntPtr@,System.Int32@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContextD3D11(System.IntPtr@,System.Int32@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.DestroyContext(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyContext(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.SetCurrentContext(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCurrentContext(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.SynchronizeContext">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SynchronizeContext"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.CanAccessPeer(System.Int32@,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CanAccessPeer(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.EnablePeerAccess(System.IntPtr,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.EnablePeerAccess(System.IntPtr,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.DisablePeerAccess(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DisablePeerAccess(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetMemoryInfo(System.IntPtr@,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetMemoryInfo(System.IntPtr@,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.AllocateMemory(System.IntPtr@,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.AllocateMemory(System.IntPtr@,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.FreeMemory(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.FreeMemory(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.Memcpy(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.Memset(System.IntPtr,System.Byte,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.DestroyStream(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyStream(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.LoadModule(System.IntPtr@,System.Byte[])">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LoadModule(System.IntPtr@,System.Byte[])"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.DestroyModule(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyModule(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIUnix.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.CudaAPIWindows">
            <summary>
            Represents the Cuda-driver API for Windows.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.API.CudaAPIWindows.LibName">
            <summary>
            Represents the driver library name.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.#ctor">
            <summary>
            Intializes a new driver API for Windows.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.InitAPI">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.InitAPI"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetDriverVersion(System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDriverVersion(System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetErrorString(ILGPU.Runtime.Cuda.CudaError,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetErrorString(ILGPU.Runtime.Cuda.CudaError,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetDevice(System.Int32@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDevice(System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetDeviceCount(System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDevice(System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetDeviceName(System.Byte[],System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceName(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetTotalDeviceMemory(System.IntPtr@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetTotalDeviceMemory(System.IntPtr@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetDeviceAttribute(System.Int32@,ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceAttribute(System.Int32@,ILGPU.Runtime.Cuda.DeviceAttribute,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetDeviceComputeCapability(System.Int32@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContext(System.IntPtr@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.CreateContextD3D11(System.IntPtr@,System.Int32@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateContextD3D11(System.IntPtr@,System.Int32@,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.DestroyContext(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyContext(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.SetCurrentContext(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCurrentContext(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.SynchronizeContext">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SynchronizeContext"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetCacheConfig(ILGPU.Runtime.Cuda.CudaCacheConfiguration)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.SetSharedMemoryConfig(ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.CanAccessPeer(System.Int32@,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CanAccessPeer(System.Int32@,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.EnablePeerAccess(System.IntPtr,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.EnablePeerAccess(System.IntPtr,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.DisablePeerAccess(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DisablePeerAccess(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPeerAttribute(System.Int32@,ILGPU.Runtime.Cuda.Peer2PeerAttribute,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetMemoryInfo(System.IntPtr@,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetMemoryInfo(System.IntPtr@,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.AllocateMemory(System.IntPtr@,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.AllocateMemory(System.IntPtr@,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.FreeMemory(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.FreeMemory(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.Memcpy(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyHostToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToHost(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.MemcpyDeviceToDevice(System.IntPtr,System.IntPtr,System.IntPtr,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.Memset(System.IntPtr,System.Byte,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.Memset(System.IntPtr,System.Byte,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetPointerAttribute(System.IntPtr,ILGPU.Runtime.Cuda.PointerAttribute,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStream(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.CreateStreamWithPriority(System.IntPtr@,ILGPU.Runtime.Cuda.StreamFlags,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.DestroyStream(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyStream(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.LoadModule(System.IntPtr@,System.Byte[])">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LoadModule(System.IntPtr@,System.Byte[])"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.DestroyModule(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.DestroyModule(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.GetModuleFunction(System.IntPtr@,System.IntPtr,System.String)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.LaunchKernel(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32@,System.IntPtr,System.Int32,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CudaAPIWindows.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CudaAPI.ComputeOccupancyMaxPotentialBlockSize(System.Int32@,System.Int32@,System.IntPtr,ILGPU.Runtime.Cuda.API.ComputeDynamicMemorySizeForBlockSize,System.IntPtr,System.Int32)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAcceleratorFlags">
            <summary>
            Represents the accelerator flags for a Cuda accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleAuto">
            <summary>
            Automatic scheduling (default).
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleSpin">
            <summary>
            Spin scheduling.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleYield">
            <summary>
            Yield scheduling
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAcceleratorFlags.ScheduleBlockingSync">
            <summary>
            Blocking synchronization as default scheduling.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaCacheConfiguration">
            <summary>
            Represents a cache configuration of a device.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.Default">
            <summary>
            The default cache configuration.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.PreferShared">
            <summary>
            Prefer shared cache.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.PreferL1">
            <summary>
            Prefer L1 cache.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaCacheConfiguration.PreferEqual">
            <summary>
            Prefer shared or L1 cache.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration">
            <summary>
            Represents a shared-memory configuration of a device.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration.Default">
            <summary>
            The default shared-memory configuration.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration.FourByteBankSize">
            <summary>
            Setup a bank size of 4 byte.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaSharedMemoryConfiguration.EightByteBankSize">
            <summary>
            Setup a bank size of 8 byte.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaMemoryType">
            <summary>
            Represents the type of a device pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.None">
            <summary>
            Represents no known memory type.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Host">
            <summary>
            Represents a host pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Device">
            <summary>
            Represents a device pointer.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Array">
            <summary>
            Represents a pointer to a Cuda array.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaMemoryType.Unified">
            <summary>
            Represents a unified-memory pointer.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaAccelerator">
            <summary>
            Represents a Cuda accelerator.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaAccelerator.cudaAccelerators">
            <summary>
            Represents the list of available Cuda accelerators.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.CurrentAPI">
            <summary>
            Returns the current Cuda-driver API.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.CudaAccelerators">
            <summary>
            Returns a list of available Cuda accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GetCudaMemoryType(System.IntPtr)">
            <summary>
            Resolves the memory type of the given device pointer.
            </summary>
            <param name="value">The device pointer to check.</param>
            <returns>The resolved memory type</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context)">
            <summary>
            Constructs a new Cuda accelerator targeting the default device.
            </summary>
            <param name="context">The ILGPU context.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,ILGPU.CompileUnitFlags)">
            <summary>
            Constructs a new Cuda accelerator targeting the default device.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="flags">The compile-unit flags.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,System.Int32)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="deviceId">The target device id.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,System.Int32,ILGPU.CompileUnitFlags)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="deviceId">The target device id.</param>
            <param name="flags">The compile-unit flags.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,System.Int32,ILGPU.Runtime.Cuda.CudaAcceleratorFlags)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="deviceId">The target device id.</param>
            <param name="acceleratorFlags">The accelerator flags.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,System.Int32,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,ILGPU.CompileUnitFlags)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="deviceId">The target device id.</param>
            <param name="acceleratorFlags">The accelerator flags.</param>
            <param name="flags">The compile-unit flags.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,System.IntPtr)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="d3d11Device">A pointer to a valid D3D11 device.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,System.IntPtr,ILGPU.CompileUnitFlags)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="d3d11Device">A pointer to a valid D3D11 device.</param>
            <param name="flags">The compile-unit flags.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,System.IntPtr,ILGPU.Runtime.Cuda.CudaAcceleratorFlags)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="d3d11Device">A pointer to a valid D3D11 device.</param>
            <param name="acceleratorFlags">The accelerator flags.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.#ctor(ILGPU.Context,System.IntPtr,ILGPU.Runtime.Cuda.CudaAcceleratorFlags,ILGPU.CompileUnitFlags)">
            <summary>
            Constructs a new Cuda accelerator.
            </summary>
            <param name="context">The ILGPU context.</param>
            <param name="d3d11Device">A pointer to a valid D3D11 device.</param>
            <param name="acceleratorFlags">The accelerator flags.</param>
            <param name="flags">The compile-unit flags.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.SetupName">
            <summary>
            Setups the accelerator name.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.SetupAccelerator">
            <summary>
            Setups all required settings.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.ContextPtr">
            <summary>
            Returns the native Cuda-context ptr.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.DeviceId">
            <summary>
            Returns the device id.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.Architecture">
            <summary>
            Returns the PTX architecture.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.MaxGroupSize">
            <summary>
            Returns the max group size.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.ClockRate">
            <summary>
            Returns the clock rate.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.SharedMemoryConfiguration">
            <summary>
            Gets or sets the current shared-memory configuration.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaAccelerator.CacheConfiguration">
            <summary>
            Gets or sets the current cache configuration.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateExtension``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateExtension``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateBackend">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateBackend"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.MakeCurrentInternal">
            <summary>
            Makes this accelerator the current one.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.Allocate``2(``1)">
            <summary cref="M:ILGPU.Runtime.Accelerator.Allocate``2(``1)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.LoadKernel(ILGPU.Compiler.CompiledKernel)">
            <summary cref="M:ILGPU.Runtime.Accelerator.LoadKernel(ILGPU.Compiler.CompiledKernel)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.LoadImplicitlyGroupedKernel(ILGPU.Compiler.CompiledKernel,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.LoadImplicitlyGroupedKernel(ILGPU.Compiler.CompiledKernel,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.LoadAutoGroupedKernel(ILGPU.Compiler.CompiledKernel,System.Int32@,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.LoadAutoGroupedKernel(ILGPU.Compiler.CompiledKernel,System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CreateStream">
            <summary cref="M:ILGPU.Runtime.Accelerator.CreateStream"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.Synchronize">
            <summary cref="M:ILGPU.Runtime.Accelerator.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.MakeCurrent">
            <summary cref="M:ILGPU.Runtime.Accelerator.MakeCurrent"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GetFreeMemory">
            <summary>
            Queries the amount of free memory.
            </summary>
            <returns>The amount of free memory in bytes.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.CanAccessPeer(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.CanAccessPeer(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EnablePeerAccess(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EnablePeerAccess(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.DisablePeerAccess(ILGPU.Runtime.Accelerator)">
            <summary cref="M:ILGPU.Runtime.Accelerator.DisablePeerAccess(ILGPU.Runtime.Accelerator)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.GenerateKernelLauncherMethod(ILGPU.Compiler.CompiledKernel,System.Int32)">
            <summary>
            Generates a dynamic kernel-launcher method that will be just-in-time compiled
            during the first invocation. Using the generated launcher lowers the overhead
            for kernel launching dramatically, since unnecessary operations (like boxing)
            can be avoided.
            </summary>
            <param name="kernel">The kernel to generate a launcher for.</param>
            <param name="customGroupSize">The custom group size used for automatic blocking.</param>
            <returns>The generated launcher method.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EstimateMaxActiveGroupsPerMultiprocessorInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateMaxActiveGroupsPerMultiprocessor(ILGPU.Runtime.Kernel,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Func{System.Int32,System.Int32},System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Accelerator.EstimateGroupSizeInternal(ILGPU.Runtime.Kernel,System.Int32,System.Int32,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaAccelerator.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaException">
            <summary>
            Represents a Cuda exception that can be thrown by the Cuda runtime.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.#ctor">
            <summary>
            Constructs a new Cuda exception.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.#ctor(ILGPU.Runtime.Cuda.CudaError)">
            <summary>
            Constructs a new Cuda exception.
            </summary>
            <param name="error">The Cuda runtime error.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaException.Error">
            <summary>
            Returns the error.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaException.ThrowIfFailed(ILGPU.Runtime.Cuda.CudaError)">
            <summary>
            Checks the given status and throws an exception in case of an error.
            </summary>
            <param name="cudaStatus">The Cuda status to check.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaKernel">
            <summary>
            Represents a Cuda kernel that can be directly launched on a gpu.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaKernel.modulePtr">
            <summary>
            Holds the pointer to the native Cuda module in memory.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CudaKernel.functionPtr">
            <summary>
            Holds the pointer to the native Cuda function in memory.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaKernel.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,ILGPU.Compiler.CompiledKernel,System.Reflection.MethodInfo)">
            <summary>
            Loads a compiled kernel into the given Cuda context as kernel program.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="kernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaKernel.ModulePtr">
            <summary>
            Returns the Cuda module ptr.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaKernel.FunctionPtr">
            <summary>
            Returns the Cuda function ptr.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaKernel.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2">
            <summary>
            Represents an unmanaged Cuda buffer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,`1)">
            <summary>
            Constructs a new cuda buffer.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="extent">The extent.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.CopyToViewInternal(ILGPU.ArrayView{`0,ILGPU.Index},ILGPU.Runtime.AcceleratorType,`1,ILGPU.Runtime.AcceleratorStream)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyToViewInternal(ILGPU.ArrayView{`0,ILGPU.Index},ILGPU.Runtime.AcceleratorType,`1,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.CopyFromViewInternal(ILGPU.ArrayView{`0,ILGPU.Index},ILGPU.Runtime.AcceleratorType,`1,ILGPU.Runtime.AcceleratorStream)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromViewInternal(ILGPU.ArrayView{`0,ILGPU.Index},ILGPU.Runtime.AcceleratorType,`1,ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary cref="M:ILGPU.Runtime.MemoryBuffer.MemSetToZero(ILGPU.Runtime.AcceleratorStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaMemoryBuffer`2.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CudaStream">
            <summary>
            Represents a Cuda stream.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CudaStream.StreamPtr">
            <summary>
            Returns the underlying native Cuda stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.Synchronize">
            <summary cref="M:ILGPU.Runtime.AcceleratorStream.Synchronize"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CudaStream.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.DebugArrayView`2">
            <summary>
            Represents a debugger view for generic array views.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.DebugArrayView`2.#ctor(ILGPU.ArrayView{`0,`1})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="view">The target array view.</param>
        </member>
        <member name="T:ILGPU.Runtime.DebugArrayView`1">
            <summary>
            Represents a debugger view for generic array views.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.DebugArrayView`1.#ctor(ILGPU.ArrayView{`0,ILGPU.Index})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="view">The target array view.</param>
        </member>
        <member name="M:ILGPU.Runtime.DebugArrayView`1.#ctor(ILGPU.ArrayView{`0})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="view">The target array view.</param>
        </member>
        <member name="M:ILGPU.Runtime.DebugArrayView`1.#ctor(ILGPU.ArrayView2D{`0})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="view">The target array view.</param>
        </member>
        <member name="M:ILGPU.Runtime.DebugArrayView`1.#ctor(ILGPU.ArrayView3D{`0})">
            <summary>
            Constructs a new debug view.
            </summary>
            <param name="view">The target array view.</param>
        </member>
        <member name="P:ILGPU.Runtime.DebugArrayView`1.View">
            <summary>
            Returns the encapsulated generic debug view.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.IAcceleratorExtensionProvider`1">
            <summary>
            Represents a generic accelerator-extension provider.
            </summary>
            <typeparam name="TExtension">The type of the extension to be created.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.IAcceleratorExtensionProvider`1.CreateCPUExtension(ILGPU.Runtime.CPU.CPUAccelerator)">
            <summary>
            Creates an extension for a CPU accelerator.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns>The created extension.</returns>
        </member>
        <member name="M:ILGPU.Runtime.IAcceleratorExtensionProvider`1.CreateCudaExtension(ILGPU.Runtime.Cuda.CudaAccelerator)">
            <summary>
            Creates an extension for a Cuda accelerator.
            </summary>
            <param name="accelerator">The target accelerator.</param>
            <returns>The created extension.</returns>
        </member>
        <member name="T:ILGPU.Runtime.IMemoryBuffer">
            <summary>
            Represents the base interface for all memory buffers.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IMemoryBuffer.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IMemoryBuffer.Pointer">
            <summary>
            Returns the native pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.IMemoryBuffer.Length">
            <summary>
            Returns the length of this buffer.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.ImplicitKernelLauncherArgument">
            <summary>
            Represents a launcher argument for an implicit-stream launcher.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.ImplicitKernelLauncherArgument.GetKernelMethod">
            <summary>
            Represents a method to load the a kernel argument from a launcher instance.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.ImplicitKernelLauncherArgument.GetStreamMethod">
            <summary>
            Represents a method to load the a stream argument from a launcher instance.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ImplicitKernelLauncherArgument.#ctor(ILGPU.Runtime.Kernel,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Constructs a new instance argument.
            </summary>
            <param name="kernel">The kernel argument.</param>
            <param name="stream">The accelerator stream.</param>
        </member>
        <member name="P:ILGPU.Runtime.ImplicitKernelLauncherArgument.Kernel">
            <summary>
            Returns the associated kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.ImplicitKernelLauncherArgument.Stream">
            <summary>
            Returns the associated accelerator stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.ImplicitKernelLauncherArgument.EmitLoadKernelArgument(System.Int32,System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits code for loading a kernel from an instance argument.
            </summary>
            <param name="argumentIdx">The index of the launcher parameter.</param>
            <param name="ilGenerator">The target IL-instruction generator.</param>
        </member>
        <member name="M:ILGPU.Runtime.ImplicitKernelLauncherArgument.EmitLoadAcceleratorStream(System.Int32,System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits code for loading an accelerator stream from an instance argument.
            </summary>
            <param name="argumentIdx">The index of the launcher parameter.</param>
            <param name="ilGenerator">The target IL-instruction generator.</param>
        </member>
        <member name="T:ILGPU.Runtime.Kernel">
            <summary>
            Represents the base class for all runtime kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Runtime.Kernel.launcher">
            <summary>
            Stores the associated kernel launcher.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Kernel.implicitStreamLauncher">
            <summary>
            Stores the created implicit-stream kernel launcher.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.#ctor(ILGPU.Runtime.Accelerator,ILGPU.Compiler.CompiledKernel,System.Reflection.MethodInfo)">
            <summary>
            Constructs a new kernel.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="compiledKernel">The source kernel.</param>
            <param name="launcher">The launcher method for the given kernel.</param>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.Context">
            <summary>
            Returns the associated context.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.CompiledKernel">
            <summary>
            Returns the compiled kernel.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.Launcher">
            <summary>
            Returns the associated kernel launcher.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Kernel.DefaultStream">
            <summary>
            Returns the default stream of the associated accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.CreateImplicitStreamLauncher">
            <summary>
            Builds a new impicit-stream launcher for the current launcher.
            </summary>
            <returns>The constructed implicit-stream launcher.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.CreateLauncherDelegate``1">
            <summary>
            Creates a launcher delegate for this kernel.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <returns>The created delegate.</returns>
            <remarks>Note that the first argument is the accelerator stream.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.CreateStreamLauncherDelegate``1">
            <summary>
            Creates a launcher delegate for this kernel using the default
            accelerator stream of the associated accelerator.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <returns>The created delegate.</returns>
            <remarks>This method is a simple wrapper for <see cref="M:ILGPU.Runtime.Kernel.CreateStreamLauncherDelegate``1(ILGPU.Runtime.AcceleratorStream)"/>.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.CreateStreamLauncherDelegate``1(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Creates a launcher delegate for this kernel while binding the accelerator-stream
            parameter to the given stream.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The created delegate.</returns>
            <remarks>Note that the resulting delegate will not accept an additional stream argument.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.InvokeLauncher``1(``0,ILGPU.Runtime.AcceleratorStream,System.Object[],System.Int32[])">
            <summary>
            Invokes the associated launcher via reflection.
            </summary>
            <typeparam name="T">The index type T.</typeparam>
            <param name="dimension">The grid dimension.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="args">The kernel arguments.</param>
            <param name="dynSharedMemArraySizes">The number of elements for each dynamically-sized shared memory array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.Launch``1(``0,System.Object[])">
            <summary>
            Launches the current kernel with the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="dimension">The grid dimension.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.Launch(System.Int32,System.Object[])">
            <summary>
            Launches the current kernel with the given arguments.
            </summary>
            <param name="dimension">The grid dimension.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.Launch``1(``0,System.Int32[],System.Object[])">
            <summary>
            Launches the current grouped kernel with the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="dimension">The grid and group dimensions.</param>
            <param name="dynSharedMemArraySizes">The number of elements for each dynamically-sized shared memory array.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.Launch``1(``0,ILGPU.Runtime.AcceleratorStream,System.Object[])">
            <summary>
            Launches the current kernel with the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="dimension">The grid dimension.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.Launch(System.Int32,ILGPU.Runtime.AcceleratorStream,System.Object[])">
            <summary>
            Launches the current kernel with the given arguments.
            </summary>
            <param name="dimension">The grid dimension.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="M:ILGPU.Runtime.Kernel.Launch``1(``0,ILGPU.Runtime.AcceleratorStream,System.Int32[],System.Object[])">
            <summary>
            Launches the current grouped kernel with the given arguments.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <param name="dimension">The grid and group dimensions.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="dynSharedMemArraySizes">The number of elements for each dynamically-sized shared memory array.</param>
            <param name="args">The kernel arguments.</param>
        </member>
        <member name="T:ILGPU.Runtime.KernelLauncherBuilder">
            <summary>
            Builder methods for kernel launchers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadIndex(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits code to create an Index instance from a loaded integer value.
            </summary>
            <param name="ilGenerator">The target IL-instruction generator.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitSharedMemorySizeComputation(ILGPU.Backends.EntryPoint,System.Reflection.Emit.ILGenerator,System.Func{System.Int32,System.Reflection.ParameterInfo})">
            <summary>
            Emits code for computing and loading the required shared-memory size.
            </summary>
            <param name="entryPoint">The entry point for code generation.</param>
            <param name="ilGenerator">The target IL-instruction generator.</param>
            <param name="getDynSharedMemSizeParam">A function that resolves the length parameter for the referenced dynamically-sized shared-memory variable.</param>
        </member>
        <member name="F:ILGPU.Runtime.KernelLauncherBuilder.Index3ValueGetter">
            <summary>
            Stores all getter methods to resolve all index values of an <see cref="T:ILGPU.Index3"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.GetMainIndexConstructor(System.Type)">
            <summary>
            Resolves the main constructor of the given index type.
            </summary>
            <param name="indexType">The index type (can be Index, Index2 or Index3).</param>
            <returns>The main constructor.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitConvertIndex3ToTargetType(System.Type,System.Reflection.Emit.ILGenerator,System.Action)">
            <summary>
            Emits code to convert an Index3 to a specific target type.
            </summary>
            <param name="ungroupedIndexType">The index type (can be Index, Index2 or Index3).</param>
            <param name="ilGenerator">The target IL-instruction generator.</param>
            <param name="loadIdx">A callback to load the referenced index value onto the stack.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitConvertFrom1DIndexToTargetIndexType(System.Type,System.Reflection.Emit.ILGenerator,System.Action)">
            <summary>
            Emits code to convert a linear index to a specific target type.
            </summary>
            <param name="ungroupedIndexType">The index type (can be Index, Index2 or Index3).</param>
            <param name="ilGenerator">The target IL-instruction generator.</param>
            <param name="loadDimension">A callback to load the referenced dimension value onto the stack.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadDimensions(System.Type,System.Reflection.Emit.ILGenerator,System.Action)">
            <summary>
            Emits code to load a 3D dimension of a grid or a group index.
            </summary>
            <param name="indexType">The index type (can be Index, Index2 or Index3).</param>
            <param name="ilGenerator">The target IL-instruction generator.</param>
            <param name="loadIdx">A callback to load the referenced index value onto the stack.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadDimensions(System.Type,System.Reflection.Emit.ILGenerator,System.Action,System.Action{System.Int32})">
            <summary>
            Emits code to load a 3D dimension of a grid or a group index.
            </summary>
            <param name="indexType">The index type (can be Index, Index2 or Index3).</param>
            <param name="ilGenerator">The target IL-instruction generator.</param>
            <param name="loadIdx">A callback to load the referenced index value onto the stack.</param>
            <param name="manipulateIdx">A callback to manipulate the loaded index of a given dimension.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadDimensions(ILGPU.Backends.EntryPoint,System.Reflection.Emit.ILGenerator,System.Int32,System.Action)">
            <summary>
            Emits a kernel-dimension configuration.
            It pushes 6 integers onto the evaluation stack (gridIdx.X, gridIdx.Y, ...) by default.
            Howerver, using a custom <paramref name="convertIndex3Args"/> function allows to create
            and instantiate custom grid and group indices.
            </summary>
            <param name="entryPoint">The entry point.</param>
            <param name="ilGenerator">The target IL-instruction generator.</param>
            <param name="dimensionIdx">The argument index of the provided launch-dimension index.</param>
            <param name="convertIndex3Args">Allows to create and instantiate custom grid and group indices.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadDimensions(ILGPU.Backends.EntryPoint,System.Reflection.Emit.ILGenerator,System.Int32,System.Action,System.Int32)">
            <summary>
            Emits a kernel-dimension configuration.
            It pushes 6 integers onto the evaluation stack (gridIdx.X, gridIdx.Y, ...) by default.
            Howerver, using a custom <paramref name="convertIndex3Args"/> function allows to create
            and instantiate custom grid and group indices.
            </summary>
            <param name="entryPoint">The entry point.</param>
            <param name="ilGenerator">The target IL-instruction generator.</param>
            <param name="dimensionIdx">The argument index of the provided launch-dimension index.</param>
            <param name="convertIndex3Args">Allows to create and instantiate custom grid and group indices.</param>
            <param name="customGroupSize">The custom group size used for automatic blocking.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadKernelArgument``1(System.Int32,System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits code for loading a typed kernel from a generic kernel instance.
            </summary>
            <typeparam name="T">The kernel type.</typeparam>
            <param name="kernelArgumentIndex">The index of the launcher parameter.</param>
            <param name="ilGenerator">The target IL-instruction generator.</param>
        </member>
        <member name="M:ILGPU.Runtime.KernelLauncherBuilder.EmitLoadAcceleratorStream``1(System.Int32,System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits code for loading a typed accelerator stream from a generic accelerator-stream instance.
            </summary>
            <typeparam name="T">The kernel type.</typeparam>
            <param name="streamArgumentIndex">The index of the stream parameter.</param>
            <param name="ilGenerator">The target IL-instruction generator.</param>
        </member>
        <member name="T:ILGPU.Runtime.KernelLoaders">
            <summary>
            Contains extensions for convenient kernel loading of default kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``2(ILGPU.Runtime.Accelerator,System.Action{``0,``1},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels will be launched with a group size
            of the current warp size of the accelerator.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            group size.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32)">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadImplicitlyGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Int32,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="customGroupSize">The custom group size to use.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernel will be launched with the given
            group size.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="M:ILGPU.Runtime.KernelLoaders.LoadAutoGroupedStreamKernel``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="T12">Parameter type of parameter 12.</typeparam>
            <typeparam name="T13">Parameter type of parameter 13.</typeparam>
            <typeparam name="T14">Parameter type of parameter 14.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer">
            <summary>
            Represents an abstract memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.#ctor(ILGPU.Runtime.Accelerator,System.Int32)">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="length">The length in elements.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer.Pointer">
            <summary>
            Returns the native pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer.Length">
            <summary>
            Returns the length of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.GetAsRawArray(System.Int32,System.Int32)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer.MemSetToZero">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer`2">
            <summary>
            Represents an abstract memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Runtime.MemoryBuffer`2.ElementSize">
            <summary>
            Represents the size of an element in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.#ctor(ILGPU.Runtime.Accelerator,`1)">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`2.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`2.View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`2.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`2.Item(`1)">
            <summary>
            Accesses this memory buffer from the CPU.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
            <remarks>
            Note that this operation involves a synchronous memory copy.
            Do not use this operation frequently or in high-performance scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyToViewInternal(ILGPU.ArrayView{`0,ILGPU.Index},ILGPU.Runtime.AcceleratorType,`1,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target view.
            </summary>
            <param name="target">The target view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromViewInternal(ILGPU.ArrayView{`0,ILGPU.Index},ILGPU.Runtime.AcceleratorType,`1,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the source view to the current buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,`1,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,`1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.MemoryBuffer{`0,`1},`1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(ILGPU.Runtime.MemoryBuffer{`0,`1},`1,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyToView(ILGPU.ArrayView{`0,`1},`1,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyToView(ILGPU.ArrayView{`0,`1},`1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyToView(ILGPU.ArrayView{`0,`1},ILGPU.Runtime.AcceleratorType,`1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyToView(ILGPU.ArrayView{`0,`1},ILGPU.Runtime.AcceleratorType,`1,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(`0@,`1)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(`0@,`1,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyTo(`0[],`1,System.Int32,`1)">
            <summary>
            Copies the contents of this buffer into the given array.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,`1,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0,`1},`1,`1,`1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0,`1},`1)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0,`1},`1,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromView(ILGPU.ArrayView{`0,`1},`1,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromView(ILGPU.ArrayView{`0,`1},`1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromView(ILGPU.ArrayView{`0,`1},ILGPU.Runtime.AcceleratorType,`1)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFromView(ILGPU.ArrayView{`0,`1},ILGPU.Runtime.AcceleratorType,`1,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(`0,`1)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.CopyFrom(`0[],System.Int32,`1,System.Int32)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsArray">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsArray(`1,`1)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetAsRawArray(System.Int32,System.Int32)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetVariableView(`1)">
            <summary>
            Returns a variable view for the element at the given index.
            </summary>
            <param name="index">The target index.</param>
            <returns>A variable view for the element at the given index.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetSubView(`1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.GetSubView(`1,`1)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`2.op_Implicit(ILGPU.Runtime.MemoryBuffer{`0,`1})~ILGPU.ArrayView{`0,`1}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBufferCache">
            <summary>
            Represents a cached memory buffer with a specific capacity.
            It minimizes reallocations in cases of requests that can also
            be handled with the currently allocated amount of memory.
            If the requested amount of memory is not sufficient, the current
            buffer will be freed and a new buffer will be allocated.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="F:ILGPU.Runtime.MemoryBufferCache.cache">
            <summary>
            This represents the actual memory cache.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new memory-buffer cache.
            </summary>
            <param name="accelerator">The associated accelerator to allocate memory on.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.#ctor(ILGPU.Runtime.Accelerator,ILGPU.Index)">
            <summary>
            Constructs a new memory-buffer cache.
            </summary>
            <param name="accelerator">The associated accelerator to allocate memory on.</param>
            <param name="initialLength">The initial length of the buffer.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBufferCache.Accelerator">
            <summary>
            Returns the associated accelerator.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBufferCache.CacheSizeInBytes">
            <summary>
            Returns the current cached size in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBufferCache.Cache">
            <summary>
            Returns the underlying memory buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.GetCacheSize``1">
            <summary>
            Returns the available number of elements of type T.
            </summary>
            <typeparam name="T">The desired element type.</typeparam>
            <returns>The available number of elements of type T.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.Allocate``1(ILGPU.Index)">
            <summary>
            Allocates the given number of elements and returns an array view
            to the requested amount of elements. Note that the array view
            points to not-initialized memory.
            </summary>
            <param name="numElements">The number of elements to allocate.</param>
            <returns>An array view that can access the requested number of elements.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.CopyTo``1(``0@,ILGPU.Index)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="target">The target location.</param>
            <param name="targetIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.CopyFrom``1(``0,ILGPU.Index)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="source">The source value.</param>
            <param name="sourceIndex">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBufferCache.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer`1">
            <summary>
            Represents a 1D memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As2DView(System.Int32)">
            <summary>
            Returns a 2D view to this linear buffer.
            </summary>
            <param name="height">The height (number of elements in y direction).</param>
            <returns>The 2D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As2DView(System.Int32,System.Int32)">
            <summary>
            Returns a 2D view to this linear buffer.
            </summary>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <returns>The 2D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As2DView(ILGPU.Index2)">
            <summary>
            Returns a 2D view to this linear buffer.
            </summary>
            <param name="extent">The extent.</param>
            <returns>The 2D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As3DView(System.Int32,System.Int32)">
            <summary>
            Returns a 3D view to this linear buffer.
            </summary>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
            <returns>The 3D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As3DView(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a 3D view to this linear buffer.
            </summary>
            <param name="width">The width (number of elements in x direction).</param>
            <param name="height">The height (number of elements in y direction).</param>
            <param name="depth">The depth (number of elements in z direction).</param>
            <returns>The 3D view.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.As3DView(ILGPU.Index3)">
            <summary>
            Returns a 3D view to this linear buffer.
            </summary>
            <param name="extent">The extent.</param>
            <returns>The 3D view.</returns>
        </member>
        <member name="F:ILGPU.Runtime.MemoryBuffer`1.ElementSize">
            <summary>
            Represents the size of an element in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.#ctor(ILGPU.Runtime.MemoryBuffer{`0,ILGPU.Index})">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="buffer">The wrapped buffer.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.Buffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer`1.Item(ILGPU.Index)">
            <summary>
            Accesses this memory buffer from the CPU.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
            <remarks>
            Note that this operation involves a synchronous memory copy.
            Do not use this operation frequently or in high-performance scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index,ILGPU.Index,ILGPU.Index,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index,ILGPU.Index,ILGPU.Index)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyToView(ILGPU.ArrayView{`0},ILGPU.Index,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyToView(ILGPU.ArrayView{`0},ILGPU.Index)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyToView(ILGPU.ArrayView{`0},ILGPU.Runtime.AcceleratorType,ILGPU.Index)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyToView(ILGPU.ArrayView{`0},ILGPU.Runtime.AcceleratorType,ILGPU.Index,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(`0@,ILGPU.Index)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="target">The target location.</param>
            <param name="index">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(`0@,ILGPU.Index,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="target">The target location.</param>
            <param name="index">The source index.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyTo(`0[],ILGPU.Index,System.Int32,ILGPU.Index)">
            <summary>
            Copies the contents of this buffer into the given array.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index,ILGPU.Index,ILGPU.Index,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index,ILGPU.Index,ILGPU.Index)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(ILGPU.Runtime.MemoryBuffer{`0},ILGPU.Index,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFromView(ILGPU.ArrayView{`0},ILGPU.Index,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFromView(ILGPU.ArrayView{`0},ILGPU.Index)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFromView(ILGPU.ArrayView{`0},ILGPU.Runtime.AcceleratorType,ILGPU.Index)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFromView(ILGPU.ArrayView{`0},ILGPU.Runtime.AcceleratorType,ILGPU.Index,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(`0,ILGPU.Index)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="source">The source value.</param>
            <param name="index">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.CopyFrom(`0[],System.Int32,ILGPU.Index,System.Int32)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsArray">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsArray(ILGPU.Index,ILGPU.Index)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetAsRawArray(System.Int32,System.Int32)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetVariableView(ILGPU.Index)">
            <summary>
            Returns a variable view for the element at the given index.
            </summary>
            <param name="index">The target index.</param>
            <returns>A variable view for the element at the given index.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetSubView(ILGPU.Index)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.GetSubView(ILGPU.Index,ILGPU.Index)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.ToMemoryBuffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
            <returns>The underlying generic memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.op_Implicit(ILGPU.Runtime.MemoryBuffer{`0})~ILGPU.ArrayView{`0}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.op_Implicit(ILGPU.Runtime.MemoryBuffer{`0})~ILGPU.Runtime.MemoryBuffer{`0,ILGPU.Index}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer2D`1">
            <summary>
            Represents a 2D memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.Width">
            <summary>
            Returns the width (x-dimension) of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.Height">
            <summary>
            Returns the height (y-dimension) of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(`0[0:,0:],ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the input array will stored as a transposed array to match the target layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(`0[0:,0:],ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the contents of this buffer to the given array.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the output array will contain the data as a transposed array to match the source layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetRowView(System.Int32)">
            <summary>
            Returns a linear view to a single row.
            </summary>
            <param name="y">The y index of the row.</param>
            <returns>A linear view to a single row.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="F:ILGPU.Runtime.MemoryBuffer2D`1.ElementSize">
            <summary>
            Represents the size of an element in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.#ctor(ILGPU.Runtime.MemoryBuffer{`0,ILGPU.Index2})">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="buffer">The wrapped buffer.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.Buffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer2D`1.Item(ILGPU.Index2)">
            <summary>
            Accesses this memory buffer from the CPU.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
            <remarks>
            Note that this operation involves a synchronous memory copy.
            Do not use this operation frequently or in high-performance scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2,ILGPU.Index2,ILGPU.Index2,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyToView(ILGPU.ArrayView2D{`0},ILGPU.Index2,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyToView(ILGPU.ArrayView2D{`0},ILGPU.Index2)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyToView(ILGPU.ArrayView2D{`0},ILGPU.Runtime.AcceleratorType,ILGPU.Index2)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyToView(ILGPU.ArrayView2D{`0},ILGPU.Runtime.AcceleratorType,ILGPU.Index2,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(`0@,ILGPU.Index2)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="target">The target location.</param>
            <param name="index">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(`0@,ILGPU.Index2,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="target">The target location.</param>
            <param name="index">The source index.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyTo(`0[],ILGPU.Index2,System.Int32,ILGPU.Index2)">
            <summary>
            Copies the contents of this buffer into the given array.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2,ILGPU.Index2,ILGPU.Index2,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2,ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer2D{`0},ILGPU.Index2,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFromView(ILGPU.ArrayView2D{`0},ILGPU.Index2,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFromView(ILGPU.ArrayView2D{`0},ILGPU.Index2)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFromView(ILGPU.ArrayView2D{`0},ILGPU.Runtime.AcceleratorType,ILGPU.Index2)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFromView(ILGPU.ArrayView2D{`0},ILGPU.Runtime.AcceleratorType,ILGPU.Index2,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(`0,ILGPU.Index2)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="source">The source value.</param>
            <param name="index">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.CopyFrom(`0[],System.Int32,ILGPU.Index2,System.Int32)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsArray">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsArray(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetAsRawArray(System.Int32,System.Int32)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetVariableView(ILGPU.Index2)">
            <summary>
            Returns a variable view for the element at the given index.
            </summary>
            <param name="index">The target index.</param>
            <returns>A variable view for the element at the given index.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetSubView(ILGPU.Index2)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.GetSubView(ILGPU.Index2,ILGPU.Index2)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.ToMemoryBuffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
            <returns>The underlying generic memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.op_Implicit(ILGPU.Runtime.MemoryBuffer2D{`0})~ILGPU.ArrayView2D{`0}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.op_Implicit(ILGPU.Runtime.MemoryBuffer2D{`0})~ILGPU.Runtime.MemoryBuffer{`0,ILGPU.Index2}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer2D`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.MemoryBuffer3D`1">
            <summary>
            Represents a 3D memory buffer that can be used in the scope
            of ILGPU runtime kernels.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Width">
            <summary>
            Returns the width (x-dimension) of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Height">
            <summary>
            Returns the height (y-dimension) of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Depth">
            <summary>
            Returns the depth (z-dimension) of this buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(`0[0:,0:,0:],ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the contents of this buffer from the given array.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the input array will stored as a transposed array to match the target layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(`0[0:,0:,0:],ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the contents to this buffer to the given array.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The length.</param>
            <remarks>Note that the output array will contain the data as a transposed array to match the source layout.</remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetRowView(System.Int32,System.Int32)">
            <summary>
            Returns a linear view to a single row.
            </summary>
            <param name="y">The y index of the row.</param>
            <param name="z">The z index of the slice.</param>
            <returns>A linear view to a single row.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetSliceView(System.Int32)">
            <summary>
            Returns a 2D view to a single slice.
            </summary>
            <param name="z">The z index of the slice.</param>
            <returns>A 2D view to a single slice.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.AsLinearView">
            <summary>
            Converts the current view into a linear view.
            </summary>
            <returns>The converted linear view.</returns>
        </member>
        <member name="F:ILGPU.Runtime.MemoryBuffer3D`1.ElementSize">
            <summary>
            Represents the size of an element in bytes.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.#ctor(ILGPU.Runtime.MemoryBuffer{`0,ILGPU.Index3})">
            <summary>
            Initializes this memory buffer.
            </summary>
            <param name="buffer">The wrapped buffer.</param>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Buffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.View">
            <summary>
            Returns an array view that can access this array.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.LengthInBytes">
            <summary>
            Returns the length of this buffer in bytes.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Extent">
            <summary>
            Returns the extent of this buffer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.MemoryBuffer3D`1.Item(ILGPU.Index3)">
            <summary>
            Accesses this memory buffer from the CPU.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element at the given index.</returns>
            <remarks>
            Note that this operation involves a synchronous memory copy.
            Do not use this operation frequently or in high-performance scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3,ILGPU.Index3,ILGPU.Index3,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyToView(ILGPU.ArrayView3D{`0},ILGPU.Index3,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyToView(ILGPU.ArrayView3D{`0},ILGPU.Index3)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyToView(ILGPU.ArrayView3D{`0},ILGPU.Runtime.AcceleratorType,ILGPU.Index3)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="sourceOffset">The source offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyToView(ILGPU.ArrayView3D{`0},ILGPU.Runtime.AcceleratorType,ILGPU.Index3,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="target">The target view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(`0@,ILGPU.Index3)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="target">The target location.</param>
            <param name="index">The source index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(`0@,ILGPU.Index3,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies a single element of this buffer to the given target variable
            in CPU memory.
            </summary>
            <param name="target">The target location.</param>
            <param name="index">The source index.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyTo(`0[],ILGPU.Index3,System.Int32,ILGPU.Index3)">
            <summary>
            Copies the contents of this buffer into the given array.
            </summary>
            <param name="target">The target array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3,ILGPU.Index3,ILGPU.Index3,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3,ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(ILGPU.Runtime.MemoryBuffer3D{`0},ILGPU.Index3,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements to the current buffer from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFromView(ILGPU.ArrayView3D{`0},ILGPU.Index3,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFromView(ILGPU.ArrayView3D{`0},ILGPU.Index3)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFromView(ILGPU.ArrayView3D{`0},ILGPU.Runtime.AcceleratorType,ILGPU.Index3)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="targetOffset">The target offset.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFromView(ILGPU.ArrayView3D{`0},ILGPU.Runtime.AcceleratorType,ILGPU.Index3,ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Copies elements from the current buffer to the target buffer.
            </summary>
            <param name="source">The source view.</param>
            <param name="acceleratorType">The accelerator type of the view.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(`0,ILGPU.Index3)">
            <summary>
            Copies a single element from CPU memory to this buffer.
            </summary>
            <param name="source">The source value.</param>
            <param name="index">The target index.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.CopyFrom(`0[],System.Int32,ILGPU.Index3,System.Int32)">
            <summary>
            Copies the contents to this buffer from the given array.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="targetOffset">The target offset.</param>
            <param name="extent">The extent (number of elements).</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.MemSetToZero(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Sets the contents of the current buffer to zero.
            </summary>
            <param name="stream">The used accelerator stream.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsArray">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsArray(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetAsRawArray(System.Int32,System.Int32)">
            <summary>
            Copies the current contents into a new array.
            </summary>
            <param name="offset">The offset.</param>
            <param name="extent">The extent (number of elements).</param>
            <returns>A new array holding the requested contents.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetVariableView(ILGPU.Index3)">
            <summary>
            Returns a variable view for the element at the given index.
            </summary>
            <param name="index">The target index.</param>
            <returns>A variable view for the element at the given index.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetSubView(ILGPU.Index3)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.GetSubView(ILGPU.Index3,ILGPU.Index3)">
            <summary>
            Returns a subview of the current view starting at the given offset.
            </summary>
            <param name="offset">The starting offset.</param>
            <param name="subViewExtent">The extent of the new subview.</param>
            <returns>The new subview.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.ToMemoryBuffer">
            <summary>
            Returns the underlying generic memory buffer.
            </summary>
            <returns>The underlying generic memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.ToArrayView">
            <summary>
            Returns an array view that can access this array.
            </summary>
            <returns>An array view that can access this array.</returns>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.op_Implicit(ILGPU.Runtime.MemoryBuffer3D{`0})~ILGPU.ArrayView3D{`0}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.op_Implicit(ILGPU.Runtime.MemoryBuffer3D{`0})~ILGPU.Runtime.MemoryBuffer{`0,ILGPU.Index3}">
            <summary>
            Implicitly converts this buffer into an array view.
            </summary>
            <param name="buffer">The source buffer.</param>
        </member>
        <member name="M:ILGPU.Runtime.MemoryBuffer3D`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.SharedMemoryKernelLoaders">
            <summary>
            Contains extensions for convenient kernel loading of default kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel1``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``3(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel2``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel3``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel4``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel1``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``4(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel2``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel3``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel4``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel1``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``5(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel2``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel3``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel4``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel1``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``6(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel2``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel3``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel4``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel1``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``7(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel2``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel3``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel4``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel1``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``8(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel2``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel3``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel4``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel1``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``9(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel2``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel3``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel4``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel1``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``10(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel2``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel3``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel4``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel1``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``11(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel2``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel3``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel4``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel1``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``12(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel2``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel3``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel4``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel1``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel1``13(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel2``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel2``14(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel3``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel3``15(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryKernel4``16(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Loads the given kernel and returns a launcher delegate that
            can receive arbitrary accelerator streams (first parameter).
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``16(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Loads the given kernel and returns a launcher delegate that launches
            the loaded kernel with the default stream.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.SharedMemoryKernelLoaders.LoadSharedMemoryStreamKernel4``16(ILGPU.Runtime.Accelerator,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Loads the given kernel and returns a launcher delegate that is associated
            with the given accelerator stream. Consequently, the resulting delegate
            cannot receive other accelerator streams.
            </summary>
            <typeparam name="TIndex">The index type.</typeparam>
            <typeparam name="T1">Parameter type of parameter 1.</typeparam>
            <typeparam name="T2">Parameter type of parameter 2.</typeparam>
            <typeparam name="T3">Parameter type of parameter 3.</typeparam>
            <typeparam name="T4">Parameter type of parameter 4.</typeparam>
            <typeparam name="T5">Parameter type of parameter 5.</typeparam>
            <typeparam name="T6">Parameter type of parameter 6.</typeparam>
            <typeparam name="T7">Parameter type of parameter 7.</typeparam>
            <typeparam name="T8">Parameter type of parameter 8.</typeparam>
            <typeparam name="T9">Parameter type of parameter 9.</typeparam>
            <typeparam name="T10">Parameter type of parameter 10.</typeparam>
            <typeparam name="T11">Parameter type of parameter 11.</typeparam>
            <typeparam name="TShared1">Parameter type of shared-memory parameter 1.</typeparam>
            <typeparam name="TShared2">Parameter type of shared-memory parameter 2.</typeparam>
            <typeparam name="TShared3">Parameter type of shared-memory parameter 3.</typeparam>
            <typeparam name="TShared4">Parameter type of shared-memory parameter 4.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="action">The action to compile into a kernel.</param>
            <param name="stream">The accelerator stream to use.</param>
            <returns>The loaded kernel-launcher delegate.</returns>
            <remarks>
            Note that implictly-grouped kernels are not supported in shared-memory scenarios.
            </remarks>
        </member>
        <member name="T:ILGPU.SharedMemoryAttribute">
            <summary>
            Marks parameters as shared-memory variables.
            </summary>
        </member>
        <member name="M:ILGPU.SharedMemoryAttribute.TryGetSharedMemoryCount(System.Reflection.ParameterInfo,System.Nullable{System.Int32}@)">
            <summary>
            Tries to get the shared-memory count for the given parameter.
            </summary>
            <param name="parameter">The input parameter information.</param>
            <param name="count">The resolved count information.</param>
            <returns>True, iff the shared-memory could be determined.</returns>
        </member>
        <member name="M:ILGPU.SharedMemoryAttribute.#ctor">
            <summary>
            Marks the parameter as shared-memory variable with
            an unspecified number of elements. This number is either
            implictly fixed by the use of VariableView to one element,
            or the number is dynamically determined by the runtime system.
            </summary>
        </member>
        <member name="M:ILGPU.SharedMemoryAttribute.#ctor(System.Int32)">
            <summary>
            Marks the parameter as a shared-memory variable with
            the given number of elements.
            </summary>
            <param name="numElements">The number of elements.</param>
        </member>
        <member name="P:ILGPU.SharedMemoryAttribute.NumElements">
            <summary>
            Returns the specified number of elements (if any).
            </summary>
        </member>
        <member name="T:ILGPU.ShuffleOperations.IShuffle`1">
            <summary>
            Represents an abstract shuffle operation.
            </summary>
            <typeparam name="T">The underlying type of the shuffle operation.</typeparam>
        </member>
        <member name="M:ILGPU.ShuffleOperations.IShuffle`1.Shuffle(`0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the specified source lane.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="sourceLane">The source lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="T:ILGPU.ShuffleOperations.IShuffleDown`1">
            <summary>
            Represents an abstract shuffle-down operation.
            </summary>
            <typeparam name="T">The underlying type of the shuffle operation.</typeparam>
        </member>
        <member name="M:ILGPU.ShuffleOperations.IShuffleDown`1.ShuffleDown(`0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane + delta.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to add to the current lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="T:ILGPU.ShuffleOperations.IShuffleUp`1">
            <summary>
            Represents an abstract shuffle-up operation.
            </summary>
            <typeparam name="T">The underlying type of the shuffle operation.</typeparam>
        </member>
        <member name="M:ILGPU.ShuffleOperations.IShuffleUp`1.ShuffleUp(`0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane - delta.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to subtract to the current lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="T:ILGPU.ShuffleOperations.IShuffleXor`1">
            <summary>
            Represents an abstract shuffle-xor operation.
            </summary>
            <typeparam name="T">The underlying type of the shuffle operation.</typeparam>
        </member>
        <member name="M:ILGPU.ShuffleOperations.IShuffleXor`1.ShuffleXor(`0,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane xor mask.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="mask">The mask to xor to the current lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="T:ILGPU.ShuffleOperations.ShuffleInt32">
            <summary>
            Represents a shuffle  reduction of type int.
            </summary>
        </member>
        <member name="M:ILGPU.ShuffleOperations.ShuffleInt32.Shuffle(System.Int32,System.Int32)">
            <summary>
            Performs the shuffle operation.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="sourceLane">The shuffle parameter.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="T:ILGPU.ShuffleOperations.ShuffleDownInt32">
            <summary>
            Represents a shuffle down reduction of type int.
            </summary>
        </member>
        <member name="M:ILGPU.ShuffleOperations.ShuffleDownInt32.ShuffleDown(System.Int32,System.Int32)">
            <summary>
            Performs the shuffle operation.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The shuffle parameter.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="T:ILGPU.ShuffleOperations.ShuffleUpInt32">
            <summary>
            Represents a shuffle up reduction of type int.
            </summary>
        </member>
        <member name="M:ILGPU.ShuffleOperations.ShuffleUpInt32.ShuffleUp(System.Int32,System.Int32)">
            <summary>
            Performs the shuffle operation.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The shuffle parameter.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="T:ILGPU.ShuffleOperations.ShuffleXorInt32">
            <summary>
            Represents a shuffle xor reduction of type int.
            </summary>
        </member>
        <member name="M:ILGPU.ShuffleOperations.ShuffleXorInt32.ShuffleXor(System.Int32,System.Int32)">
            <summary>
            Performs the shuffle operation.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="mask">The shuffle parameter.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="T:ILGPU.ShuffleOperations.ShuffleFloat">
            <summary>
            Represents a shuffle  reduction of type float.
            </summary>
        </member>
        <member name="M:ILGPU.ShuffleOperations.ShuffleFloat.Shuffle(System.Single,System.Int32)">
            <summary>
            Performs the shuffle operation.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="sourceLane">The shuffle parameter.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="T:ILGPU.ShuffleOperations.ShuffleDownFloat">
            <summary>
            Represents a shuffle down reduction of type float.
            </summary>
        </member>
        <member name="M:ILGPU.ShuffleOperations.ShuffleDownFloat.ShuffleDown(System.Single,System.Int32)">
            <summary>
            Performs the shuffle operation.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The shuffle parameter.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="T:ILGPU.ShuffleOperations.ShuffleUpFloat">
            <summary>
            Represents a shuffle up reduction of type float.
            </summary>
        </member>
        <member name="M:ILGPU.ShuffleOperations.ShuffleUpFloat.ShuffleUp(System.Single,System.Int32)">
            <summary>
            Performs the shuffle operation.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The shuffle parameter.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="T:ILGPU.ShuffleOperations.ShuffleXorFloat">
            <summary>
            Represents a shuffle xor reduction of type float.
            </summary>
        </member>
        <member name="M:ILGPU.ShuffleOperations.ShuffleXorFloat.ShuffleXor(System.Single,System.Int32)">
            <summary>
            Performs the shuffle operation.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="mask">The shuffle parameter.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
        </member>
        <member name="T:ILGPU.Util.DisposeBase">
            <summary>
            Utility base class for correct implementations of IDisposable
            </summary>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.Dispose">
            <summary>
            Triggers the 'dispose' functionality of this object.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.Finalize">
            <summary>
            The custom finalizer for dispose-base objects.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)">
            <summary>
            Frees allocated resources.
            </summary>
            <param name="disposing">True, iff the method is not called by the finalizer.</param>
        </member>
        <member name="M:ILGPU.Util.DisposeBase.Dispose``1(``0@)">
            <summary>
            Disposes the given object and sets its object reference to null.
            </summary>
            <typeparam name="T">The type of the object to dispose.</typeparam>
            <param name="object">The object to dispose.</param>
        </member>
        <member name="T:ILGPU.Util.OSPlatform">
            <summary>
            Represents an operating system.
            </summary>
        </member>
        <member name="F:ILGPU.Util.OSPlatform.Windows">
            <summary>
            The windows operating system.
            </summary>
        </member>
        <member name="T:ILGPU.Util.DLLLoader">
            <summary>
            A helper class for injecting native libraries from the X64 or the X86 lib folder.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DLLLoader.CurrentOSPlatform">
            <summary>
            Returns the current OS platform.
            </summary>
        </member>
        <member name="P:ILGPU.Util.DLLLoader.LibraryPathVariable">
            <summary>
            Returns the current dynamic-library-path variable.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DLLLoader.AddDefaultX86X64SearchPath">
            <summary>
            Adds the default search directory (../X86/ or ../X64/) to the search path.
            </summary>
        </member>
        <member name="M:ILGPU.Util.DLLLoader.AddSearchPath(System.String)">
            <summary>
            Adds the given sub directory to the current search path.
            </summary>
            <param name="subDirectory">The sub directory to add.</param>
        </member>
        <member name="T:ILGPU.Util.MethodExtensions">
            <summary>
            Extensions for methods.
            </summary>
        </member>
        <member name="M:ILGPU.Util.MethodExtensions.GetParameterOffset(System.Reflection.MethodBase)">
            <summary>
            Returns a parameter offset of 1 for instance methods and 0 for static methods.
            </summary>
            <param name="method">The method to compute the parameter offset for.</param>
            <returns>A parameter offset of 1 for instance methods and 0 for static methods.</returns>
        </member>
        <member name="T:ILGPU.Util.TypeExtensions">
            <summary>
            Represents general type extensions.
            </summary>
        </member>
        <member name="F:ILGPU.Util.TypeExtensions.BasicValueTypes">
            <summary>
            Represents all basic-value types.
            </summary>
        </member>
        <member name="F:ILGPU.Util.TypeExtensions.IntBasicValueTypes">
            <summary>
            Represents all integer basic-value types.
            </summary>
        </member>
        <member name="F:ILGPU.Util.TypeExtensions.FloatBasicValueTypes">
            <summary>
            Represents all float basic-value types.
            </summary>
        </member>
        <member name="F:ILGPU.Util.TypeExtensions.NumericBasicValueTypes">
            <summary>
            Represents all numeric basic-value types.
            </summary>
        </member>
        <member name="F:ILGPU.Util.TypeExtensions.ManagedIntBasicValueTypes">
            <summary>
            Represents all managed integer basic-value types (excludes U1).
            </summary>
        </member>
        <member name="F:ILGPU.Util.TypeExtensions.ManagedFloatBasicValueTypes">
            <summary>
            Represents all managed float basic-value types.
            </summary>
        </member>
        <member name="F:ILGPU.Util.TypeExtensions.ManagedNumericBasicValueTypes">
            <summary>
            Represents all managed numeric basic-value types.
            </summary>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetLLVMTypeRepresentation(System.Type)">
            <summary>
            Returns a type that reflects a LLVM-type repesentation.
            </summary>
            <param name="type">The current .Net type.</param>
            <returns>A .Net type that reflects a LLVM-type representation.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsSignedInt(System.Type)">
            <summary>
            Returns true iff the given type represents a signed int.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, iff the given type represents a signed int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsUnsignedInt(System.Type)">
            <summary>
            Returns true iff the given type represents an unsigned int.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, iff the given type represents an unsigned int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetManagedType(ILGPU.BasicValueType)">
            <summary>
            Resolves the managed type for the given basic-value type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved managed type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.GetBasicValueType(System.Type)">
            <summary>
            Resolves the basic-value type for the given managed type.
            </summary>
            <param name="type">The source type.</param>
            <returns>The resolved basic-value type.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsInt(System.Type)">
            <summary>
            Returns true iff the given type represents an int.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, iff the given type represents an int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsInt(ILGPU.BasicValueType)">
            <summary>
            Returns true iff the given basic-value type represents an int.
            </summary>
            <param name="value">The basic-value type.</param>
            <returns>True, iff the given basic-value type represents an int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsSignedInt(ILGPU.BasicValueType)">
            <summary>
            Returns true iff the given basic-value type represents a signed int.
            </summary>
            <param name="value">The basic-value type.</param>
            <returns>True, iff the given basic-value type represents a signed int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsUnsignedInt(ILGPU.BasicValueType)">
            <summary>
            Returns true iff the given basic-value type represents an unsigned int.
            </summary>
            <param name="value">The basic-value type.</param>
            <returns>True, iff the given basic-value type represents an unsigned int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsPtrOrInt(ILGPU.BasicValueType)">
            <summary>
            Returns true iff the given basic-value type represents either a ptr or an int.
            </summary>
            <param name="value">The basic-value type.</param>
            <returns>True, iff the given basic-value type represents either a ptr or an int.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsFloat(System.Type)">
            <summary>
            Returns true iff the given type represents a float.
            </summary>
            <param name="type">The source type.</param>
            <returns>True, iff the given type represents a float.</returns>
        </member>
        <member name="M:ILGPU.Util.TypeExtensions.IsFloat(ILGPU.BasicValueType)">
            <summary>
            Returns true iff the given basic-value type represents a float.
            </summary>
            <param name="value">The basic-value type.</param>
            <returns>True, iff the given basic-value type represents a float.</returns>
        </member>
        <member name="T:ILGPU.Util.Utilities">
            <summary>
            General util methods.
            </summary>
        </member>
        <member name="M:ILGPU.Util.Utilities.Swap``1(``0@,``0@)">
            <summary>
            Swaps the given values.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="first">The first value to swap with the second one.</param>
            <param name="second">The second value to swap with the first one.</param>
        </member>
        <member name="M:ILGPU.Util.Utilities.Swap``1(System.Boolean,``0@,``0@)">
            <summary>
            Swaps the given values iff swap is true.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="performSwap">True, iff the values should be swapped.</param>
            <param name="first">The first value to swap with the second one.</param>
            <param name="second">The second value to swap with the first one.</param>
            <returns>True, iff the values were swapped.</returns>
        </member>
        <member name="T:ILGPU.VariableView`1">
            <summary>
            Represents a general view to a variable at a specific address on a gpu.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
        </member>
        <member name="F:ILGPU.VariableView`1.VariableSize">
            <summary>
            Represents the native size of a single element.
            </summary>
        </member>
        <member name="M:ILGPU.VariableView`1.#ctor(`0@)">
            <summary>
            Constructs a new variable view.
            </summary>
            <param name="variableRef">A reference to the target variable.</param>
        </member>
        <member name="M:ILGPU.VariableView`1.#ctor(System.IntPtr)">
            <summary>
            Constructs a new variable view.
            </summary>
            <param name="ptr">The target address of the variable.</param>
        </member>
        <member name="P:ILGPU.VariableView`1.IsValid">
            <summary>
            Returns true iff this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.VariableView`1.Pointer">
            <summary>
            Returns the in-memory address of the variable.
            </summary>
        </member>
        <member name="P:ILGPU.VariableView`1.Value">
            <summary>
            Accesses the stored value.
            </summary>
        </member>
        <member name="P:ILGPU.VariableView`1.Ref">
            <summary>
            Returns a reference to the encapsulated variable.
            </summary>
        </member>
        <member name="M:ILGPU.VariableView`1.LoadRef">
            <summary>
            Loads a reference to the variable as ref T.
            </summary>
            <returns>A reference to the internal variable.</returns>
        </member>
        <member name="M:ILGPU.VariableView`1.Load">
            <summary>
            Loads the variable as type T.
            </summary>
            <returns>The loaded variable.</returns>
        </member>
        <member name="M:ILGPU.VariableView`1.Store(`0)">
            <summary>
            Stores the given value into the variable of type T.
            </summary>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:ILGPU.VariableView`1.GetSubView``1(System.Int32)">
            <summary>
            Returns a sub-view to a particular sub-variable.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <param name="offsetInBytes">The offset of the sub variable in bytes.</param>
            <returns>The sub-variable view.</returns>
        </member>
        <member name="M:ILGPU.VariableView`1.Cast``1">
            <summary>
            Casts the current variable view into another variable type.
            </summary>
            <typeparam name="TOther">The target type.</typeparam>
            <returns>The casted variable view.</returns>
        </member>
        <member name="M:ILGPU.VariableView`1.CopyTo(ILGPU.VariableView{`0})">
            <summary>
            Copies the current value to the memory location of the given view.
            </summary>
            <param name="targetView">The target view.</param>
            <remarks>The target view must be accessible from the this view (e.g. same accelerator).</remarks>
        </member>
        <member name="M:ILGPU.VariableView`1.CopyFrom(ILGPU.VariableView{`0})">
            <summary>
            Copies the value from the memory location of the given view.
            </summary>
            <param name="sourceView">The source view.</param>
            <remarks>The source view must be accessible from the this view (e.g. same accelerator).</remarks>
        </member>
        <member name="M:ILGPU.VariableView`1.Equals(ILGPU.VariableView{`0})">
            <summary>
            Returns true iff the given view is equal to the current view.
            </summary>
            <param name="other">The other view.</param>
            <returns>True, iff the given view is equal to the current view.</returns>
        </member>
        <member name="M:ILGPU.VariableView`1.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current view.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, iff the given object is equal to the current view.</returns>
        </member>
        <member name="M:ILGPU.VariableView`1.GetHashCode">
            <summary>
            Returns the hash code of this view.
            </summary>
            <returns>The hash code of this view.</returns>
        </member>
        <member name="M:ILGPU.VariableView`1.ToString">
            <summary>
            Returns the string representation of this view.
            </summary>
            <returns>The string representation of this view.</returns>
        </member>
        <member name="M:ILGPU.VariableView`1.op_Equality(ILGPU.VariableView{`0},ILGPU.VariableView{`0})">
            <summary>
            Returns true iff the first and second views are the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second views are the same.</returns>
        </member>
        <member name="M:ILGPU.VariableView`1.op_Inequality(ILGPU.VariableView{`0},ILGPU.VariableView{`0})">
            <summary>
            Returns true iff the first and second view are not the same.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>True, iff the first and second view are not the same.</returns>
        </member>
        <member name="T:ILGPU.Warp">
            <summary>
            Contains warp-wide functions.
            </summary>
        </member>
        <member name="P:ILGPU.Warp.WarpSize">
            <summary>
            Returns the warp size.
            </summary>
        </member>
        <member name="P:ILGPU.Warp.LaneIdx">
            <summary>
            Returns the current lane index [0, WarpSize - 1].
            </summary>
        </member>
        <member name="P:ILGPU.Warp.IsFirstLane">
            <summary>
            Returns true iff the current lane is the first lane.
            </summary>
        </member>
        <member name="M:ILGPU.Warp.ComputeWarpIdx(ILGPU.Index)">
            <summary>
            Computes the current warp index in the range [0, NumUsedWarps - 1].
            </summary>
            <param name="groupThreadIdx">The current thread index within the current group.</param>
            <returns>The current warp index in the range [0, NumUsedWarps - 1].</returns>
        </member>
        <member name="M:ILGPU.Warp.Shuffle(System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the specified source lane.
            The width of the shuffle operation is the warp size.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="sourceLane">The source lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.Shuffle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the specified source lane.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="sourceLane">The source lane.</param>
            <param name="width">The width of the shuffle operation. Width must be a power of 2.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.Shuffle(System.Single,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the specified source lane.
            The width of the shuffle operation is the warp size.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="sourceLane">The source lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.Shuffle(System.Single,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the specified source lane.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="sourceLane">The source lane.</param>
            <param name="width">The width of the shuffle operation. Width must be a power of 2.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleDown(System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane + delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to add to the current lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleDown(System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane + delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to add to the current lane.</param>
            <param name="width">The width of the shuffle operation. Width must be a power of 2.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleDown(System.Single,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane + delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to add to the current lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleDown(System.Single,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane + delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to add to the current lane.</param>
            <param name="width">The width of the shuffle operation. Width must be a power of 2.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleUp(System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane - delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to subtract to the current lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleUp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane - delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to subtract to the current lane.</param>
            <param name="width">The width of the shuffle operation. Width must be a power of 2.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleUp(System.Single,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane - delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to subtract to the current lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleUp(System.Single,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane - delta.
            The width of the shuffle operation is the warp size.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="delta">The delta to subtract to the current lane.</param>
            <param name="width">The width of the shuffle operation. Width must be a power of 2.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleXor(System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane xor mask.
            The width of the shuffle operation is the warp size.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="mask">The mask to xor to the current lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleXor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane xor mask.
            The width of the shuffle operation is the warp size.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="mask">The mask to xor to the current lane.</param>
            <param name="width">The width of the shuffle operation. Width must be a power of 2.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleXor(System.Single,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane xor mask.
            The width of the shuffle operation is the warp size.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="mask">The mask to xor to the current lane.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.ShuffleXor(System.Single,System.Int32,System.Int32)">
            <summary>
            Performs a shuffle operation. It returns the value of the variable
            in the context of the lane with the id current lane xor mask.
            The width of the shuffle operation is the warp size.
            </summary>
            <param name="variable">The source variable to shuffle.</param>
            <param name="mask">The mask to xor to the current lane.</param>
            <param name="width">The width of the shuffle operation. Width must be a power of 2.</param>
            <returns>The value of the variable in the scope of the desired lane.</returns>
            <remarks>Note that all threads in a warp should participate in the shuffle operation.</remarks>
        </member>
        <member name="M:ILGPU.Warp.Reduce``3(``0,``1,``2)">
            <summary>
            Performs a warp-wide reduction.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TShuffleDown">The type of the shuffle logic.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="value">The current value.</param>
            <param name="shuffleDown">The shuffle logic.</param>
            <param name="reduction">The reduction logic.</param>
            <returns>The first lane (lane id = 0) will return reduced result.</returns>
        </member>
        <member name="M:ILGPU.Warp.Reduce``1(System.Int32,``0)">
            <summary>
            Performs a warp-wide reduction.
            </summary>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="value">The current value.</param>
            <param name="reduction">The reduction logic.</param>
            <returns>The first lane (lane id = 0) will return reduced result.</returns>
        </member>
        <member name="M:ILGPU.Warp.Reduce``1(System.Single,``0)">
            <summary>
            Performs a warp-wide reduction.
            </summary>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="value">The current value.</param>
            <param name="reduction">The reduction logic.</param>
            <returns>The first lane (lane id = 0) will return reduced result.</returns>
        </member>
        <member name="M:ILGPU.Warp.AllReduce``3(``0,``1,``2)">
            <summary>
            Performs a warp-wide reduction.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TShuffleXor">The type of the shuffle logic.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="value">The current value.</param>
            <param name="shuffleXor">The shuffle logic.</param>
            <param name="reduction">The reduction logic.</param>
            <returns>All lanes will return the reduced result.</returns>
        </member>
        <member name="M:ILGPU.Warp.AllReduce``1(System.Int32,``0)">
            <summary>
            Performs a warp-wide reduction.
            </summary>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="value">The current value.</param>
            <param name="reduction">The reduction logic.</param>
            <returns>All lanes will return the reduced result.</returns>
        </member>
        <member name="M:ILGPU.Warp.AllReduce``1(System.Single,``0)">
            <summary>
            Performs a warp-wide reduction.
            </summary>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="value">The current value.</param>
            <param name="reduction">The reduction logic.</param>
            <returns>All lanes will return the reduced result.</returns>
        </member>
    </members>
</doc>
